<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# MealPlanner ️&#10;&#10;Eine moderne Android-App zur Verwaltung deiner Rezepte – jetzt mit **KI-Unterstützung**!&#10;&#10;## Features&#10;&#10;###  **KI-gestützte Rezept-Erstellung**&#10;- **Instagram-Import:** Importiere Rezepte direkt aus Instagram-Posts mit KI-Analyse&#10;- **Website-Import:** Extrahiere Rezepte automatisch von beliebigen Websites &#10;- **Intelligente Texterkennung:** Die KI erkennt und strukturiert automatisch Zutaten, Zubereitungsschritte und weitere Details&#10;&#10;###  **Kernfunktionen**&#10;- **Rezeptverwaltung:** Erstelle, bearbeite und lösche deine eigenen Rezepte&#10;- **Lange-Drücken-Menü:** Halte Rezepte lange gedrückt für Bearbeitungs- und Löschoptionen&#10;- **Intelligente Bildbearbeitung:** Integrierter Bild-Crop-Editor für perfekte Rezeptfotos&#10;- **Rezept-Detailansicht:** Zeigt alle Informationen zu einem Rezept übersichtlich an – inklusive Portionsgröße und Notizen&#10;- **Favoriten:** Markiere Rezepte als Favoriten und greife schnell darauf zu&#10;- **Drag &amp; Drop:** Sortiere Zutaten und Zubereitungsschritte per Drag &amp; Drop&#10;- **Intuitive Bedienung:** Die App ist für Smartphones optimiert und bietet ein modernes, klares Design&#10;&#10;###  **Benutzerfreundlichkeit**&#10;- **Modernes Bottom-Sheet-Design:** Elegante Dialoge für alle Aktionen&#10;- **Responsives Layout:** Optimiert für verschiedene Bildschirmgrößen&#10;- **Offline-Funktionalität:** Alle Daten werden lokal gespeichert&#10;&#10;## Installation&#10;&#10;1. Klone das Repository:&#10;   ```&#10;   git clone &lt;repo-url&gt;&#10;   ```&#10;2. Öffne das Projekt in Android Studio.&#10;3. Baue und starte die App auf deinem Gerät oder Emulator.&#10;&#10;## Screenshots&#10;&lt;img src=&quot;screenshots/screenshot1.png&quot; alt=&quot;Startbildschirm&quot; width=&quot;300&quot;/&gt;&#10;&lt;img src=&quot;screenshots/screenshot2.png&quot; alt=&quot;Rezept hinzufügen&quot; width=&quot;300&quot;/&gt;&#10;&lt;img src=&quot;screenshots/screenshot3.png&quot; alt=&quot;Favoriten&quot; width=&quot;300&quot;/&gt;&#10;&lt;img src=&quot;screenshots/screenshot4.png&quot; alt=&quot;Rezept Details&quot; width=&quot;300&quot;/&gt;&#10;&#10;## Projektstruktur&#10;&#10;- **app/src/main/java/com/app/mealplanner/**  – Hauptlogik, Fragments, Adapter und Models&#10;- **app/src/main/res/layout/**  – XML-Layouts für die verschiedenen Ansichten&#10;- **app/src/main/res/drawable/**  – Icons und Hintergründe&#10;- **app/src/main/res/values/**  – Farben, Strings und Styles&#10;&#10;## Wie funktioniert der Code?&#10;&#10;Die App ist modular aufgebaut und nutzt moderne Android-Architekturprinzipien:&#10;&#10;###  **KI-Integration**&#10;- **ChatGPT API:** Nutzt OpenAI's ChatGPT für intelligente Textanalyse&#10;- **Web-Scraping:** Automatische Extraktion von Rezeptdaten aus Websites&#10;- **JSON-Parsing:** Strukturierte Verarbeitung der KI-Antworten&#10;&#10;###  **App-Architektur**&#10;- **Fragments:** Die Hauptansichten (z.B. Rezeptübersicht, Rezeptdetails, Dialog zum Hinzufügen) sind als Fragments umgesetzt und werden dynamisch angezeigt&#10;- **Modern UI:** Bottom-Sheet-Dialoge für elegante Benutzerinteraktion&#10;- **Custom Views:** CropOverlayView für professionelle Bildbearbeitung&#10;- **Adapter:** Zutaten und Zubereitungsschritte werden über RecyclerView-Adapter verwaltet. Die Adapter unterstützen Drag &amp; Drop und das Löschen von Einträgen&#10;- **Model-Klassen:** Rezepte werden als eigene Model-Klasse (Recipe) gespeichert. Die Daten werden als JSON-Dateien im internen Speicher abgelegt und beim Start geladen&#10;- **Dialoge:** Neue Rezepte werden über einen Dialog (AddRecipeDialogFragment) hinzugefügt. Die Eingabefelder sind dynamisch und die Listen werden direkt aktualisiert&#10;- **Favoriten:** Favorisierte Rezepte werden in einer eigenen Datei gespeichert und können schnell angezeigt werden&#10;- **Bilder:** Bilder werden im internen Speicher abgelegt und als relativer Pfad im Rezept gespeichert&#10;&#10;###  **Technische Highlights**&#10;- **Long-Press-Funktionalität:** RecipeOptionsDialogFragment für Bearbeitung und Löschung&#10;- **Interne Bildbearbeitung:** ImageCropActivity für Zuschnitt ohne externe Apps  &#10;- **HTTP-Requests:** OkHttp für Website-Scraping und API-Kommunikation&#10;- **Asynchrone Verarbeitung:** Kotlin Coroutines für performante KI-Anfragen&#10;&#10;##  Neue KI-Features im Detail&#10;&#10;### Instagram-Import&#10;1. **Instagram-Post-URL eingeben**&#10;2. **KI analysiert den Post** und extrahiert automatisch:&#10;   - Rezeptname&#10;   - Zutatenliste&#10;   - Zubereitungsschritte&#10;   - Portionsangaben&#10;   - Zubereitungszeit&#10;3. **Automatische Strukturierung** in die App-Formate&#10;&#10;### Website-Import  &#10;1. **Beliebige Website-URL eingeben** (z.B. Chefkoch, Lecker, etc.)&#10;2. **KI scannt die Webseite** und findet Rezeptinformationen&#10;3. **Intelligente Extraktion** von strukturierten Daten&#10;4. **Direkte Integration** in deine Rezeptsammlung&#10;&#10;### Bild-Crop-Editor&#10;- **Integrierter Editor:** Keine externen Apps erforderlich&#10;- **Touch-Gestensteuerung:** Intuitives Zuschneiden und Anpassen&#10;- **Professionelle Darstellung:** Optimiert für Rezeptfotos&#10;&#10;##  Zukunftspläne&#10;&#10;- **Spracherkennung:** Rezepte per Spracheingabe erstellen&#10;- **Nährwertanalyse:** Automatische Berechnung von Kalorien und Nährstoffen&#10;- **Social Features:** Rezepte mit Freunden teilen&#10;- **Einkaufsliste:** Automatische Generierung aus Rezepten&#10;&#10;## Lizenz&#10;&#10;Dieses Projekt steht unter der MIT-Lizenz.&#10;" />
              <option name="updatedContent" value="&lt;div align=&quot;center&quot;&gt;&#10;  &lt;img src=&quot;screenshots/app_icon.png&quot; alt=&quot;MealPlanner Icon&quot; width=&quot;120&quot; height=&quot;120&quot;/&gt;&#10;  &lt;h1&gt;MealPlanner ️&lt;/h1&gt;&#10;  &lt;p&gt;&lt;em&gt;Eine moderne Android-App zur Verwaltung deiner Rezepte – jetzt mit &lt;strong&gt;KI-Unterstützung&lt;/strong&gt;!&lt;/em&gt;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;## Features&#10;&#10;###  **KI-gestützte Rezept-Erstellung**&#10;- **Instagram-Import:** Importiere Rezepte direkt aus Instagram-Posts mit KI-Analyse&#10;- **Website-Import:** Extrahiere Rezepte automatisch von beliebigen Websites &#10;- **Intelligente Texterkennung:** Die KI erkennt und strukturiert automatisch Zutaten, Zubereitungsschritte und weitere Details&#10;&#10;###  **Kernfunktionen**&#10;- **Rezeptverwaltung:** Erstelle, bearbeite und lösche deine eigenen Rezepte&#10;- **Lange-Drücken-Menü:** Halte Rezepte lange gedrückt für Bearbeitungs- und Löschoptionen&#10;- **Intelligente Bildbearbeitung:** Integrierter Bild-Crop-Editor für perfekte Rezeptfotos&#10;- **Rezept-Detailansicht:** Zeigt alle Informationen zu einem Rezept übersichtlich an – inklusive Portionsgröße und Notizen&#10;- **Favoriten:** Markiere Rezepte als Favoriten und greife schnell darauf zu&#10;- **Drag &amp; Drop:** Sortiere Zutaten und Zubereitungsschritte per Drag &amp; Drop&#10;- **Intuitive Bedienung:** Die App ist für Smartphones optimiert und bietet ein modernes, klares Design&#10;&#10;###  **Benutzerfreundlichkeit**&#10;- **Modernes Bottom-Sheet-Design:** Elegante Dialoge für alle Aktionen&#10;- **Responsives Layout:** Optimiert für verschiedene Bildschirmgrößen&#10;- **Offline-Funktionalität:** Alle Daten werden lokal gespeichert&#10;&#10;## Installation&#10;&#10;1. Klone das Repository:&#10;   ```&#10;   git clone &lt;repo-url&gt;&#10;   ```&#10;2. Öffne das Projekt in Android Studio.&#10;3. Baue und starte die App auf deinem Gerät oder Emulator.&#10;&#10;## Screenshots&#10;&lt;img src=&quot;screenshots/screenshot1.png&quot; alt=&quot;Startbildschirm&quot; width=&quot;300&quot;/&gt;&#10;&lt;img src=&quot;screenshots/screenshot2.png&quot; alt=&quot;Rezept hinzufügen&quot; width=&quot;300&quot;/&gt;&#10;&lt;img src=&quot;screenshots/screenshot3.png&quot; alt=&quot;Favoriten&quot; width=&quot;300&quot;/&gt;&#10;&lt;img src=&quot;screenshots/screenshot4.png&quot; alt=&quot;Rezept Details&quot; width=&quot;300&quot;/&gt;&#10;&#10;## Projektstruktur&#10;&#10;- **app/src/main/java/com/app/mealplanner/**  – Hauptlogik, Fragments, Adapter und Models&#10;- **app/src/main/res/layout/**  – XML-Layouts für die verschiedenen Ansichten&#10;- **app/src/main/res/drawable/**  – Icons und Hintergründe&#10;- **app/src/main/res/values/**  – Farben, Strings und Styles&#10;&#10;## Wie funktioniert der Code?&#10;&#10;Die App ist modular aufgebaut und nutzt moderne Android-Architekturprinzipien:&#10;&#10;###  **KI-Integration**&#10;- **ChatGPT API:** Nutzt OpenAI's ChatGPT für intelligente Textanalyse&#10;- **Web-Scraping:** Automatische Extraktion von Rezeptdaten aus Websites&#10;- **JSON-Parsing:** Strukturierte Verarbeitung der KI-Antworten&#10;&#10;###  **App-Architektur**&#10;- **Fragments:** Die Hauptansichten (z.B. Rezeptübersicht, Rezeptdetails, Dialog zum Hinzufügen) sind als Fragments umgesetzt und werden dynamisch angezeigt&#10;- **Modern UI:** Bottom-Sheet-Dialoge für elegante Benutzerinteraktion&#10;- **Custom Views:** CropOverlayView für professionelle Bildbearbeitung&#10;- **Adapter:** Zutaten und Zubereitungsschritte werden über RecyclerView-Adapter verwaltet. Die Adapter unterstützen Drag &amp; Drop und das Löschen von Einträgen&#10;- **Model-Klassen:** Rezepte werden als eigene Model-Klasse (Recipe) gespeichert. Die Daten werden als JSON-Dateien im internen Speicher abgelegt und beim Start geladen&#10;- **Dialoge:** Neue Rezepte werden über einen Dialog (AddRecipeDialogFragment) hinzugefügt. Die Eingabefelder sind dynamisch und die Listen werden direkt aktualisiert&#10;- **Favoriten:** Favorisierte Rezepte werden in einer eigenen Datei gespeichert und können schnell angezeigt werden&#10;- **Bilder:** Bilder werden im internen Speicher abgelegt und als relativer Pfad im Rezept gespeichert&#10;&#10;###  **Technische Highlights**&#10;- **Long-Press-Funktionalität:** RecipeOptionsDialogFragment für Bearbeitung und Löschung&#10;- **Interne Bildbearbeitung:** ImageCropActivity für Zuschnitt ohne externe Apps  &#10;- **HTTP-Requests:** OkHttp für Website-Scraping und API-Kommunikation&#10;- **Asynchrone Verarbeitung:** Kotlin Coroutines für performante KI-Anfragen&#10;&#10;##  Neue KI-Features im Detail&#10;&#10;### Instagram-Import&#10;1. **Instagram-Post-URL eingeben**&#10;2. **KI analysiert den Post** und extrahiert automatisch:&#10;   - Rezeptname&#10;   - Zutatenliste&#10;   - Zubereitungsschritte&#10;   - Portionsangaben&#10;   - Zubereitungszeit&#10;3. **Automatische Strukturierung** in die App-Formate&#10;&#10;### Website-Import  &#10;1. **Beliebige Website-URL eingeben** (z.B. Chefkoch, Lecker, etc.)&#10;2. **KI scannt die Webseite** und findet Rezeptinformationen&#10;3. **Intelligente Extraktion** von strukturierten Daten&#10;4. **Direkte Integration** in deine Rezeptsammlung&#10;&#10;### Bild-Crop-Editor&#10;- **Integrierter Editor:** Keine externen Apps erforderlich&#10;- **Touch-Gestensteuerung:** Intuitives Zuschneiden und Anpassen&#10;- **Professionelle Darstellung:** Optimiert für Rezeptfotos&#10;&#10;##  Zukunftspläne&#10;&#10;- **Spracherkennung:** Rezepte per Spracheingabe erstellen&#10;- **Nährwertanalyse:** Automatische Berechnung von Kalorien und Nährstoffen&#10;- **Social Features:** Rezepte mit Freunden teilen&#10;- **Einkaufsliste:** Automatische Generierung aus Rezepten&#10;&#10;## Lizenz&#10;&#10;Dieses Projekt steht unter der MIT-Lizenz." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="import java.util.Properties&#10;&#10;plugins {&#10;    id(&quot;com.android.application&quot;)&#10;    id(&quot;org.jetbrains.kotlin.android&quot;)&#10;    id(&quot;com.google.gms.google-services&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.app.mealplanner&quot;&#10;    compileSdk = 35&#10;&#10;    val localProperties = Properties()&#10;    val localPropertiesFile = rootProject.file(&quot;local.properties&quot;)&#10;    if (localPropertiesFile.exists()) {&#10;        localProperties.load(localPropertiesFile.inputStream())&#10;    }&#10;    val chatGptApiKey = localProperties.getProperty(&quot;CHATGPT_API_KEY&quot;) ?: &quot;fehler&quot;&#10;&#10;    defaultConfig {&#10;        buildConfigField(&#10;            &quot;String&quot;,&#10;            &quot;CHATGPT_API_KEY&quot;,&#10;            &quot;\&quot;$chatGptApiKey\&quot;&quot;&#10;        )&#10;&#10;&#10;&#10;        applicationId = &quot;com.app.mealplanner&quot;&#10;        minSdk = 29&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;        debug {&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;        isCoreLibraryDesugaringEnabled = true&#10;&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;        buildConfig = true&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.constraintlayout)&#10;    implementation(libs.lifecycle.livedata.ktx)&#10;    implementation(libs.lifecycle.viewmodel.ktx)&#10;    implementation(libs.navigation.fragment)&#10;    implementation(libs.navigation.ui)&#10;    implementation(libs.core.ktx)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;    implementation(&quot;androidx.recyclerview:recyclerview:1.4.0&quot;)&#10;    implementation(&quot;com.lorentzos.swipecards:library:1.0.9@aar&quot;)&#10;    implementation(&quot;org.mongodb:bson-kotlinx:5.3.0&quot;)&#10;    implementation(&quot;io.github.cdimascio:dotenv-kotlin:6.2.2&quot;)&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;    coreLibraryDesugaring(&quot;com.android.tools:desugar_jdk_libs:2.1.5&quot;)&#10;    implementation(&quot;com.github.bumptech.glide:glide:4.15.1&quot;)&#10;    annotationProcessor(&quot;com.github.bumptech.glide:compiler:4.15.1&quot;)&#10;    implementation (&quot;androidx.cardview:cardview:1.0.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.11.0&quot;)&#10;    implementation(&quot;org.json:json:20230618&quot;)&#10;    implementation(&quot;com.github.yalantis:ucrop:2.2.8&quot;) // Für Bild-Crop-Funktionalität&#10;&#10;}&#10;" />
              <option name="updatedContent" value="import java.util.Properties&#10;&#10;plugins {&#10;    id(&quot;com.android.application&quot;)&#10;    id(&quot;org.jetbrains.kotlin.android&quot;)&#10;    id(&quot;com.google.gms.google-services&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.app.mealplanner&quot;&#10;    compileSdk = 35&#10;&#10;    val localProperties = Properties()&#10;    val localPropertiesFile = rootProject.file(&quot;local.properties&quot;)&#10;    if (localPropertiesFile.exists()) {&#10;        localProperties.load(localPropertiesFile.inputStream())&#10;    }&#10;    val chatGptApiKey = localProperties.getProperty(&quot;CHATGPT_API_KEY&quot;) ?: &quot;fehler&quot;&#10;&#10;    defaultConfig {&#10;        buildConfigField(&#10;            &quot;String&quot;,&#10;            &quot;CHATGPT_API_KEY&quot;,&#10;            &quot;\&quot;$chatGptApiKey\&quot;&quot;&#10;        )&#10;&#10;&#10;&#10;        applicationId = &quot;com.app.mealplanner&quot;&#10;        minSdk = 29&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;        debug {&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;        isCoreLibraryDesugaringEnabled = true&#10;&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;        buildConfig = true&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.constraintlayout)&#10;    implementation(libs.lifecycle.livedata.ktx)&#10;    implementation(libs.lifecycle.viewmodel.ktx)&#10;    implementation(libs.navigation.fragment)&#10;    implementation(libs.navigation.ui)&#10;    implementation(libs.core.ktx)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;    implementation(&quot;androidx.recyclerview:recyclerview:1.4.0&quot;)&#10;    implementation(&quot;com.lorentzos.swipecards:library:1.0.9@aar&quot;)&#10;    implementation(&quot;org.mongodb:bson-kotlinx:5.3.0&quot;)&#10;    implementation(&quot;io.github.cdimascio:dotenv-kotlin:6.2.2&quot;)&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;    coreLibraryDesugaring(&quot;com.android.tools:desugar_jdk_libs:2.1.5&quot;)&#10;    implementation(&quot;com.github.bumptech.glide:glide:4.15.1&quot;)&#10;    annotationProcessor(&quot;com.github.bumptech.glide:compiler:4.15.1&quot;)&#10;    implementation (&quot;androidx.cardview:cardview:1.0.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.11.0&quot;)&#10;    implementation(&quot;org.json:json:20230618&quot;)&#10;    implementation(&quot;androidx.activity:activity-ktx:1.8.2&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_mealplanner&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_mealplanner&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Mealplanner&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_mealplanner&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_mealplanner&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.Mealplanner&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;@string/app_name&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;        &#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ImageCropActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AppCompat.NoActionBar&quot; /&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/AddRecipeDialogFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/AddRecipeDialogFragment.kt" />
              <option name="originalContent" value="package com.app.mealplanner&#10;&#10;import IngredientsAdapter&#10;import PreparationsAdapter&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.provider.MediaStore&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.view.ViewTreeObserver&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.ImageView&#10;import android.widget.LinearLayout&#10;import android.widget.Toast&#10;import androidx.fragment.app.DialogFragment&#10;import androidx.recyclerview.widget.ItemTouchHelper&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.InputStream&#10;import java.util.UUID&#10;&#10;class AddRecipeDialogFragment : DialogFragment() {&#10;&#10;    private var selectedImagePath: String? = null&#10;    private var imageUri: Uri? = null&#10;    private var recipeToEdit: Recipe? = null // Variable to hold the recipe being edited&#10;&#10;    interface OnRecipeAddedListener {&#10;        fun onRecipeAdded(recipe: Recipe)&#10;    }&#10;&#10;    private var listener: OnRecipeAddedListener? = null&#10;&#10;    fun setOnRecipeAddedListener(listener: OnRecipeAddedListener) {&#10;        this.listener = listener&#10;    }&#10;&#10;    fun setRecipeToEdit(recipe: Recipe) {&#10;        this.recipeToEdit = recipe&#10;    }&#10;&#10;    private val ingredients = mutableListOf&lt;String&gt;()&#10;    private lateinit var ingredientsAdapter: IngredientsAdapter&#10;&#10;    private val preparations = mutableListOf&lt;String&gt;()&#10;    private lateinit var preparationsAdapter: PreparationsAdapter&#10;&#10;    private lateinit var globalLayoutListener: ViewTreeObserver.OnGlobalLayoutListener&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.dialog_add_recipe, container, false)&#10;    }&#10;&#10;    override fun onStart() {&#10;        super.onStart()&#10;        dialog?.window?.setLayout(&#10;            ViewGroup.LayoutParams.MATCH_PARENT,&#10;            ViewGroup.LayoutParams.MATCH_PARENT&#10;        )&#10;        dialog?.window?.setBackgroundDrawableResource(android.R.color.transparent) // Transparent background&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        // Adapter initialisieren, bevor sie verwendet werden&#10;        ingredientsAdapter = IngredientsAdapter(&#10;            ingredients,&#10;            android.R.color.black,&#10;            onDelete = { pos -&gt;&#10;                ingredients.removeAt(pos)&#10;                ingredientsAdapter.notifyItemRemoved(pos)&#10;            },&#10;            onStartDrag = { viewHolder -&gt;&#10;                // Drag-Logik&#10;            },&#10;            showEditIcons = true // Edit-Icons explizit anzeigen&#10;        )&#10;        preparationsAdapter = PreparationsAdapter(&#10;            preparations,&#10;            android.R.color.black,&#10;            onDelete = { pos -&gt;&#10;                preparations.removeAt(pos)&#10;                preparationsAdapter.notifyItemRemoved(pos)&#10;            },&#10;            onStartDrag = { viewHolder -&gt;&#10;                // Drag-Logik&#10;            },&#10;            showEditIcons = true // Edit-Icons explizit anzeigen&#10;        )&#10;&#10;        // Rezepttext aus Argumenten übernehmen und Felder vorausfüllen&#10;        val importedRecipeText = arguments?.getString(&quot;imported_recipe_text&quot;)&#10;        if (!importedRecipeText.isNullOrEmpty()) {&#10;            val nameInput: EditText = view.findViewById(R.id.inputRecipeTitle)&#10;            val descriptionInput: EditText = view.findViewById(R.id.inputDescription)&#10;            val servingsInput: EditText = view.findViewById(R.id.inputServings)&#10;            val prepTimeInput: EditText = view.findViewById(R.id.inputPrepTime)&#10;            val notesInput: EditText = view.findViewById(R.id.inputNotes)&#10;&#10;            try {&#10;                val json = com.google.gson.JsonParser.parseString(importedRecipeText).asJsonObject&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;JSON: $json&quot;)&#10;                nameInput.setText(json[&quot;name&quot;]?.asString ?: &quot;&quot;)&#10;                servingsInput.setText(json[&quot;servings&quot;]?.asInt?.toString() ?: &quot;&quot;)&#10;                prepTimeInput.setText(json[&quot;prepTime&quot;]?.asString ?: &quot;&quot;)&#10;                notesInput.setText(json[&quot;notes&quot;]?.asString ?: &quot;&quot;)&#10;&#10;                // Beschreibung korrekt setzen&#10;                descriptionInput.setText(json[&quot;description&quot;]?.asString ?: &quot;&quot;)&#10;&#10;                // Zutaten als Liste&#10;                ingredients.clear()&#10;                json[&quot;ingredients&quot;]?.asJsonArray?.forEach { elem -&gt;&#10;                    ingredients.add(elem.asString)&#10;                }&#10;                ingredientsAdapter.notifyDataSetChanged()&#10;&#10;                // Zubereitung: Nur Array zulassen&#10;                preparations.clear()&#10;                val preparationsElement = json[&quot;preparations&quot;]&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;preparationsElement: $preparationsElement&quot;)&#10;                if (preparationsElement != null &amp;&amp; preparationsElement.isJsonArray) {&#10;                    preparationsElement.asJsonArray.forEach { elem -&gt;&#10;                        android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;preparation step: ${elem.asString}&quot;)&#10;                        preparations.add(elem.asString)&#10;                    }&#10;                } else {&#10;                    android.util.Log.e(&quot;AddRecipeDialog&quot;, &quot;preparations ist kein Array!&quot;)&#10;                }&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;preparations list: $preparations&quot;)&#10;                preparationsAdapter.notifyDataSetChanged()&#10;&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;AddRecipeDialog&quot;, &quot;Rezept konnte nicht geladen werden: ${e.message}&quot;)&#10;            }&#10;        }&#10;&#10;        // If editing an existing recipe, pre-fill the fields&#10;        recipeToEdit?.let { recipe -&gt;&#10;            val nameInput: EditText = view.findViewById(R.id.inputRecipeTitle)&#10;            val descriptionInput: EditText = view.findViewById(R.id.inputDescription)&#10;            val servingsInput: EditText = view.findViewById(R.id.inputServings)&#10;            val prepTimeInput: EditText = view.findViewById(R.id.inputPrepTime)&#10;            val notesInput: EditText = view.findViewById(R.id.inputNotes)&#10;&#10;            nameInput.setText(recipe.name)&#10;            descriptionInput.setText(recipe.description ?: &quot;&quot;)&#10;            servingsInput.setText(recipe.servings?.toString() ?: &quot;&quot;)&#10;            prepTimeInput.setText(recipe.prepTime ?: &quot;&quot;)&#10;            notesInput.setText(recipe.notes ?: &quot;&quot;)&#10;&#10;            // Pre-fill ingredients&#10;            ingredients.clear()&#10;            recipe.ingredients?.let { recipeIngredients -&gt;&#10;                ingredients.addAll(recipeIngredients)&#10;            }&#10;            ingredientsAdapter.notifyDataSetChanged()&#10;&#10;            // Pre-fill preparations&#10;            preparations.clear()&#10;            recipe.preparations?.let { recipePreparations -&gt;&#10;                preparations.addAll(recipePreparations)&#10;            }&#10;            preparationsAdapter.notifyDataSetChanged()&#10;&#10;            // Set the existing image if available&#10;            selectedImagePath = recipe.image&#10;            if (!recipe.image.isNullOrEmpty()) {&#10;                val selectedImageView = view.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;                val uploadPlaceholder = view.findViewById&lt;View&gt;(R.id.uploadPlaceholder)&#10;&#10;                val imageFile = File(requireContext().filesDir, recipe.image)&#10;                if (imageFile.exists()) {&#10;                    selectedImageView.setImageURI(Uri.fromFile(imageFile))&#10;                    selectedImageView.visibility = View.VISIBLE&#10;                    uploadPlaceholder.visibility = View.GONE&#10;                }&#10;            }&#10;        }&#10;&#10;        val nameInput: EditText = view.findViewById(R.id.inputRecipeTitle)&#10;        val preparationInput: EditText = view.findViewById(R.id.inputDescription)&#10;        val newIngredientInput: EditText = view.findViewById(R.id.inputNewIngredient)&#10;        val servingsInput: EditText = view.findViewById(R.id.inputServings)&#10;        val prepTimeInput: EditText = view.findViewById(R.id.inputPrepTime)&#10;        val notesInput: EditText = view.findViewById(R.id.inputNotes)&#10;        val saveButton: Button = view.findViewById(R.id.buttonAddRecipe)&#10;        val ingredientsRecyclerView: RecyclerView = view.findViewById(R.id.ingredientsRecyclerView)&#10;        val newPreparationInput: EditText = view.findViewById(R.id.inputNewInstruction)&#10;        val preparationsRecyclerView: RecyclerView = view.findViewById(R.id.instructionsRecyclerView)&#10;&#10;&#10;        val backButton: View = view.findViewById(R.id.backButton) // Replace with the actual ID of the back symbol&#10;        backButton.setOnClickListener {&#10;            dismiss() // Close the dialog&#10;        }&#10;&#10;        val uploadButton = view.findViewById&lt;View&gt;(R.id.buttonUploadImage)&#10;        val selectedImageView = view.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;        val uploadPlaceholder = view.findViewById&lt;View&gt;(R.id.uploadPlaceholder)&#10;        uploadButton.setOnClickListener {&#10;            openImagePicker()&#10;        }&#10;&#10;        // Set up RecyclerView&#10;        val ingredientTouchHelper = ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(&#10;            ItemTouchHelper.UP or ItemTouchHelper.DOWN, 0) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                val from = viewHolder.adapterPosition&#10;                val to = target.adapterPosition&#10;                ingredientsAdapter.onItemMove(from, to)&#10;                return true&#10;            }&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {}&#10;        })&#10;        ingredientTouchHelper.attachToRecyclerView(ingredientsRecyclerView)&#10;&#10;        val preparationTouchHelper = ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(&#10;            ItemTouchHelper.UP or ItemTouchHelper.DOWN, 0) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                val from = viewHolder.adapterPosition&#10;                val to = target.adapterPosition&#10;                preparationsAdapter.onItemMove(from, to)&#10;                return true&#10;            }&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {}&#10;        })&#10;        preparationTouchHelper.attachToRecyclerView(preparationsRecyclerView)&#10;&#10;        ingredientsRecyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        ingredientsRecyclerView.adapter = ingredientsAdapter&#10;&#10;        preparationsRecyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        preparationsRecyclerView.adapter = preparationsAdapter&#10;&#10;        // Add ingredient on Enter key press&#10;        newIngredientInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                val ingredientText = newIngredientInput.text.toString().trim()&#10;                if (ingredientText.isNotEmpty()) {&#10;                    ingredients.add(ingredientText) // Add ingredient to the list&#10;                    ingredientsAdapter.notifyDataSetChanged() // Update RecyclerView&#10;                    ingredientsRecyclerView.scrollToPosition(ingredients.size - 1) // Scroll to the last item&#10;                    newIngredientInput.text.clear() // Clear input field&#10;                }&#10;                true // Event handled&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        newPreparationInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                val preparationText = newPreparationInput.text.toString().trim()&#10;                if (preparationText.isNotEmpty()) {&#10;                    preparations.add(preparationText) // Add preparation step to the list&#10;                    preparationsAdapter.notifyDataSetChanged() // Update RecyclerView&#10;                    preparationsRecyclerView.scrollToPosition(preparations.size - 1) // Scroll to the last item&#10;                    newPreparationInput.text.clear() // Clear input field&#10;                }&#10;                true // Event handled&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        // Button neu anlegen&#10;        val addRecipeButton: Button = view.findViewById(R.id.buttonAddRecipe)&#10;        addRecipeButton.visibility = View.VISIBLE&#10;        addRecipeButton.isEnabled = true&#10;        // Tastatur-Listener: Button ausblenden, wenn Keyboard sichtbar ist&#10;        globalLayoutListener = ViewTreeObserver.OnGlobalLayoutListener {&#10;            val rect = android.graphics.Rect()&#10;            requireActivity().window.decorView.getWindowVisibleDisplayFrame(rect)&#10;            val screenHeight = requireActivity().window.decorView.height&#10;            val keypadHeight = screenHeight - rect.bottom&#10;            if (keypadHeight &gt; screenHeight * 0.15) {&#10;                if (addRecipeButton.visibility != View.GONE) {&#10;                    addRecipeButton.visibility = View.GONE&#10;                }&#10;            } else {&#10;                if (addRecipeButton.visibility != View.VISIBLE) {&#10;                    addRecipeButton.visibility = View.VISIBLE&#10;                }&#10;            }&#10;        }&#10;        view.viewTreeObserver.addOnGlobalLayoutListener(globalLayoutListener)&#10;&#10;        saveButton.setOnClickListener {&#10;            val name = nameInput.text.toString()&#10;            val description = preparationInput.text.toString()&#10;            val servings = servingsInput.text.toString().toIntOrNull() ?: 0&#10;            val prepTime = prepTimeInput.text.toString()&#10;            val notes = notesInput.text.toString()&#10;            var imagePath: String? = selectedImagePath // Verwende das heruntergeladene Bild&#10;&#10;            // Falls kein heruntergeladenes Bild vorhanden, aber ein manuell ausgewähltes Bild&#10;            if (imagePath == null &amp;&amp; imageUri != null) {&#10;                imagePath = saveImageToInternalStorageAndReturnPath(imageUri!!, name)&#10;            }&#10;&#10;            if (name.isNotEmpty() &amp;&amp; ingredients.isNotEmpty() &amp;&amp; preparations.isNotEmpty()) {&#10;                val recipe = if (recipeToEdit != null) {&#10;                    // Editing existing recipe - keep the same ID&#10;                    Recipe(&#10;                        id = recipeToEdit!!.id,&#10;                        name = name,&#10;                        description = description,&#10;                        ingredients = ingredients.toList(),&#10;                        preparations = preparations.toList(),&#10;                        image = imagePath,&#10;                        servings = servings,&#10;                        prepTime = prepTime,&#10;                        notes = notes&#10;                    )&#10;                } else {&#10;                    // Creating new recipe - generate new ID&#10;                    Recipe(&#10;                        id = System.currentTimeMillis().toInt(),&#10;                        name = name,&#10;                        description = description,&#10;                        ingredients = ingredients.toList(),&#10;                        preparations = preparations.toList(),&#10;                        image = imagePath,&#10;                        servings = servings,&#10;                        prepTime = prepTime,&#10;                        notes = notes&#10;                    )&#10;                }&#10;&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;Saving recipe: ${recipe.name} with ID: ${recipe.id}&quot;)&#10;                saveRecipe(recipe)&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;Recipe saved, calling listener&quot;)&#10;                listener?.onRecipeAdded(recipe)&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;Listener called, dismissing dialog&quot;)&#10;                dismiss()&#10;            } else {&#10;                android.util.Log.e(&quot;AddRecipeDialog&quot;, &quot;Recipe validation failed - name: '${name}', ingredients: ${ingredients.size}, preparations: ${preparations.size}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        view?.viewTreeObserver?.removeOnGlobalLayoutListener(globalLayoutListener)&#10;    }&#10;&#10;    private fun saveRecipe(recipe: Recipe) {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val recipes: MutableList&lt;Recipe&gt; = if (recipesFile.exists()) {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;&#10;        if (recipeToEdit != null) {&#10;            // Editing existing recipe - replace the existing one&#10;            val index = recipes.indexOfFirst { it.id == recipe.id }&#10;            if (index != -1) {&#10;                recipes[index] = recipe&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;Existing recipe updated at index $index with ID: ${recipe.id}&quot;)&#10;            } else {&#10;                // Fallback: if not found, add as new&#10;                recipes.add(recipe)&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;Recipe not found for editing, added as new with ID: ${recipe.id}&quot;)&#10;            }&#10;        } else {&#10;            // Creating new recipe - add to list&#10;            recipes.add(recipe)&#10;            android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;New recipe added with ID: ${recipe.id}&quot;)&#10;        }&#10;&#10;        recipesFile.writeText(Gson().toJson(recipes))&#10;        android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;Recipe saved to file&quot;)&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;&#10;        when (requestCode) {&#10;            REQUEST_IMAGE_PICK -&gt; {&#10;                if (resultCode == Activity.RESULT_OK &amp;&amp; data?.data != null) {&#10;                    // Start Android's built-in crop activity&#10;                    startCropActivity(data.data!!)&#10;                } else {&#10;                    Toast.makeText(requireContext(), &quot;Bildauswahl fehlgeschlagen&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;&#10;            REQUEST_IMAGE_CROP -&gt; {&#10;                if (resultCode == Activity.RESULT_OK) {&#10;                    // Handle the cropped image from Android's crop activity&#10;                    val extras = data?.extras&#10;                    val croppedBitmap = extras?.getParcelable&lt;Bitmap&gt;(&quot;data&quot;)&#10;&#10;                    if (croppedBitmap != null) {&#10;                        // Save the cropped bitmap and update UI&#10;                        val croppedUri = saveBitmapToTempFile(croppedBitmap)&#10;                        if (croppedUri != null) {&#10;                            imageUri = croppedUri&#10;                            val selectedImageView = view?.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;                            val uploadPlaceholder = view?.findViewById&lt;View&gt;(R.id.uploadPlaceholder)&#10;&#10;                            selectedImageView?.setImageBitmap(croppedBitmap)&#10;                            selectedImageView?.visibility = View.VISIBLE&#10;                            uploadPlaceholder?.visibility = View.GONE&#10;&#10;                            Toast.makeText(requireContext(), &quot;Bild erfolgreich zugeschnitten&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                    }&#10;                } else {&#10;                    Toast.makeText(requireContext(), &quot;Zuschneiden abgebrochen&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startCropActivity(sourceUri: Uri) {&#10;        try {&#10;            val cropIntent = Intent(&quot;com.android.camera.action.CROP&quot;)&#10;            cropIntent.setDataAndType(sourceUri, &quot;image/*&quot;)&#10;            cropIntent.putExtra(&quot;crop&quot;, &quot;true&quot;)&#10;            cropIntent.putExtra(&quot;aspectX&quot;, 1) // Square aspect ratio&#10;            cropIntent.putExtra(&quot;aspectY&quot;, 1)&#10;            cropIntent.putExtra(&quot;outputX&quot;, 400) // Output size&#10;            cropIntent.putExtra(&quot;outputY&quot;, 400)&#10;            cropIntent.putExtra(&quot;return-data&quot;, true) // Return bitmap in extras&#10;            cropIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)&#10;&#10;            startActivityForResult(cropIntent, REQUEST_IMAGE_CROP)&#10;        } catch (e: Exception) {&#10;            // Fallback: If crop activity is not available, use the original image&#10;            Toast.makeText(requireContext(), &quot;Zuschneiden nicht verfügbar, verwende Originalbild&quot;, Toast.LENGTH_SHORT).show()&#10;            imageUri = sourceUri&#10;            val selectedImageView = view?.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;            val uploadPlaceholder = view?.findViewById&lt;View&gt;(R.id.uploadPlaceholder)&#10;&#10;            selectedImageView?.setImageURI(sourceUri)&#10;            selectedImageView?.visibility = View.VISIBLE&#10;            uploadPlaceholder?.visibility = View.GONE&#10;        }&#10;    }&#10;&#10;    private fun saveBitmapToTempFile(bitmap: Bitmap): Uri? {&#10;        return try {&#10;            val tempFile = File(requireContext().cacheDir, &quot;cropped_${UUID.randomUUID()}.jpg&quot;)&#10;            val outputStream = FileOutputStream(tempFile)&#10;            bitmap.compress(Bitmap.CompressFormat.JPEG, 90, outputStream)&#10;            outputStream.flush()&#10;            outputStream.close()&#10;            Uri.fromFile(tempFile)&#10;        } catch (e: Exception) {&#10;            Toast.makeText(requireContext(), &quot;Fehler beim Speichern: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            null&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        private const val REQUEST_IMAGE_PICK = 1001&#10;        private const val REQUEST_IMAGE_CROP = 1002&#10;    }&#10;&#10;    private fun openImagePicker() {&#10;        val intent = Intent(Intent.ACTION_PICK)&#10;        intent.type = &quot;image/*&quot;&#10;        startActivityForResult(intent, REQUEST_IMAGE_PICK)&#10;    }&#10;&#10;    private fun saveImageToInternalStorageAndReturnPath(imageUri: Uri, recipeName: String): String? {&#10;        return try {&#10;            val inputStream: InputStream? = requireContext().contentResolver.openInputStream(imageUri)&#10;            val bitmap = BitmapFactory.decodeStream(inputStream)&#10;            val imageDir = File(requireContext().filesDir, &quot;images&quot;)&#10;            if (!imageDir.exists()) {&#10;                imageDir.mkdir()&#10;            }&#10;            val sanitizedRecipeName = recipeName.replace(&quot;[^a-zA-Z0-9]&quot;.toRegex(), &quot;_&quot;)&#10;            val fileName = &quot;${System.currentTimeMillis()}_${sanitizedRecipeName}.jpg&quot;&#10;            val imageFile = File(imageDir, fileName)&#10;            val outputStream = FileOutputStream(imageFile)&#10;            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream)&#10;            outputStream.flush()&#10;            outputStream.close()&#10;            // Nur relativen Pfad speichern&#10;            &quot;images/$fileName&quot;&#10;        } catch (e: Exception) {&#10;            Toast.makeText(requireContext(), &quot;Failed to save image: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            null&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import IngredientsAdapter&#10;import PreparationsAdapter&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.provider.MediaStore&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.view.ViewTreeObserver&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.ImageView&#10;import android.widget.LinearLayout&#10;import android.widget.Toast&#10;import androidx.fragment.app.DialogFragment&#10;import androidx.recyclerview.widget.ItemTouchHelper&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.InputStream&#10;import java.util.UUID&#10;&#10;class AddRecipeDialogFragment : DialogFragment() {&#10;&#10;    private var selectedImagePath: String? = null&#10;    private var imageUri: Uri? = null&#10;    private var recipeToEdit: Recipe? = null // Variable to hold the recipe being edited&#10;&#10;    interface OnRecipeAddedListener {&#10;        fun onRecipeAdded(recipe: Recipe)&#10;    }&#10;&#10;    private var listener: OnRecipeAddedListener? = null&#10;&#10;    fun setOnRecipeAddedListener(listener: OnRecipeAddedListener) {&#10;        this.listener = listener&#10;    }&#10;&#10;    fun setRecipeToEdit(recipe: Recipe) {&#10;        this.recipeToEdit = recipe&#10;    }&#10;&#10;    private val ingredients = mutableListOf&lt;String&gt;()&#10;    private lateinit var ingredientsAdapter: IngredientsAdapter&#10;&#10;    private val preparations = mutableListOf&lt;String&gt;()&#10;    private lateinit var preparationsAdapter: PreparationsAdapter&#10;&#10;    private lateinit var globalLayoutListener: ViewTreeObserver.OnGlobalLayoutListener&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.dialog_add_recipe, container, false)&#10;    }&#10;&#10;    override fun onStart() {&#10;        super.onStart()&#10;        dialog?.window?.setLayout(&#10;            ViewGroup.LayoutParams.MATCH_PARENT,&#10;            ViewGroup.LayoutParams.MATCH_PARENT&#10;        )&#10;        dialog?.window?.setBackgroundDrawableResource(android.R.color.transparent) // Transparent background&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        // Adapter initialisieren, bevor sie verwendet werden&#10;        ingredientsAdapter = IngredientsAdapter(&#10;            ingredients,&#10;            android.R.color.black,&#10;            onDelete = { pos -&gt;&#10;                ingredients.removeAt(pos)&#10;                ingredientsAdapter.notifyItemRemoved(pos)&#10;            },&#10;            onStartDrag = { viewHolder -&gt;&#10;                // Drag-Logik&#10;            },&#10;            showEditIcons = true // Edit-Icons explizit anzeigen&#10;        )&#10;        preparationsAdapter = PreparationsAdapter(&#10;            preparations,&#10;            android.R.color.black,&#10;            onDelete = { pos -&gt;&#10;                preparations.removeAt(pos)&#10;                preparationsAdapter.notifyItemRemoved(pos)&#10;            },&#10;            onStartDrag = { viewHolder -&gt;&#10;                // Drag-Logik&#10;            },&#10;            showEditIcons = true // Edit-Icons explizit anzeigen&#10;        )&#10;&#10;        // Rezepttext aus Argumenten übernehmen und Felder vorausfüllen&#10;        val importedRecipeText = arguments?.getString(&quot;imported_recipe_text&quot;)&#10;        if (!importedRecipeText.isNullOrEmpty()) {&#10;            val nameInput: EditText = view.findViewById(R.id.inputRecipeTitle)&#10;            val descriptionInput: EditText = view.findViewById(R.id.inputDescription)&#10;            val servingsInput: EditText = view.findViewById(R.id.inputServings)&#10;            val prepTimeInput: EditText = view.findViewById(R.id.inputPrepTime)&#10;            val notesInput: EditText = view.findViewById(R.id.inputNotes)&#10;&#10;            try {&#10;                val json = com.google.gson.JsonParser.parseString(importedRecipeText).asJsonObject&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;JSON: $json&quot;)&#10;                nameInput.setText(json[&quot;name&quot;]?.asString ?: &quot;&quot;)&#10;                servingsInput.setText(json[&quot;servings&quot;]?.asInt?.toString() ?: &quot;&quot;)&#10;                prepTimeInput.setText(json[&quot;prepTime&quot;]?.asString ?: &quot;&quot;)&#10;                notesInput.setText(json[&quot;notes&quot;]?.asString ?: &quot;&quot;)&#10;&#10;                // Beschreibung korrekt setzen&#10;                descriptionInput.setText(json[&quot;description&quot;]?.asString ?: &quot;&quot;)&#10;&#10;                // Zutaten als Liste&#10;                ingredients.clear()&#10;                json[&quot;ingredients&quot;]?.asJsonArray?.forEach { elem -&gt;&#10;                    ingredients.add(elem.asString)&#10;                }&#10;                ingredientsAdapter.notifyDataSetChanged()&#10;&#10;                // Zubereitung: Nur Array zulassen&#10;                preparations.clear()&#10;                val preparationsElement = json[&quot;preparations&quot;]&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;preparationsElement: $preparationsElement&quot;)&#10;                if (preparationsElement != null &amp;&amp; preparationsElement.isJsonArray) {&#10;                    preparationsElement.asJsonArray.forEach { elem -&gt;&#10;                        android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;preparation step: ${elem.asString}&quot;)&#10;                        preparations.add(elem.asString)&#10;                    }&#10;                } else {&#10;                    android.util.Log.e(&quot;AddRecipeDialog&quot;, &quot;preparations ist kein Array!&quot;)&#10;                }&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;preparations list: $preparations&quot;)&#10;                preparationsAdapter.notifyDataSetChanged()&#10;&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;AddRecipeDialog&quot;, &quot;Rezept konnte nicht geladen werden: ${e.message}&quot;)&#10;            }&#10;        }&#10;&#10;        // If editing an existing recipe, pre-fill the fields&#10;        recipeToEdit?.let { recipe -&gt;&#10;            val nameInput: EditText = view.findViewById(R.id.inputRecipeTitle)&#10;            val descriptionInput: EditText = view.findViewById(R.id.inputDescription)&#10;            val servingsInput: EditText = view.findViewById(R.id.inputServings)&#10;            val prepTimeInput: EditText = view.findViewById(R.id.inputPrepTime)&#10;            val notesInput: EditText = view.findViewById(R.id.inputNotes)&#10;&#10;            nameInput.setText(recipe.name)&#10;            descriptionInput.setText(recipe.description ?: &quot;&quot;)&#10;            servingsInput.setText(recipe.servings?.toString() ?: &quot;&quot;)&#10;            prepTimeInput.setText(recipe.prepTime ?: &quot;&quot;)&#10;            notesInput.setText(recipe.notes ?: &quot;&quot;)&#10;&#10;            // Pre-fill ingredients&#10;            ingredients.clear()&#10;            recipe.ingredients?.let { recipeIngredients -&gt;&#10;                ingredients.addAll(recipeIngredients)&#10;            }&#10;            ingredientsAdapter.notifyDataSetChanged()&#10;&#10;            // Pre-fill preparations&#10;            preparations.clear()&#10;            recipe.preparations?.let { recipePreparations -&gt;&#10;                preparations.addAll(recipePreparations)&#10;            }&#10;            preparationsAdapter.notifyDataSetChanged()&#10;&#10;            // Set the existing image if available&#10;            selectedImagePath = recipe.image&#10;            if (!recipe.image.isNullOrEmpty()) {&#10;                val selectedImageView = view.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;                val uploadPlaceholder = view.findViewById&lt;View&gt;(R.id.uploadPlaceholder)&#10;&#10;                val imageFile = File(requireContext().filesDir, recipe.image)&#10;                if (imageFile.exists()) {&#10;                    selectedImageView.setImageURI(Uri.fromFile(imageFile))&#10;                    selectedImageView.visibility = View.VISIBLE&#10;                    uploadPlaceholder.visibility = View.GONE&#10;                }&#10;            }&#10;        }&#10;&#10;        val nameInput: EditText = view.findViewById(R.id.inputRecipeTitle)&#10;        val preparationInput: EditText = view.findViewById(R.id.inputDescription)&#10;        val newIngredientInput: EditText = view.findViewById(R.id.inputNewIngredient)&#10;        val servingsInput: EditText = view.findViewById(R.id.inputServings)&#10;        val prepTimeInput: EditText = view.findViewById(R.id.inputPrepTime)&#10;        val notesInput: EditText = view.findViewById(R.id.inputNotes)&#10;        val saveButton: Button = view.findViewById(R.id.buttonAddRecipe)&#10;        val ingredientsRecyclerView: RecyclerView = view.findViewById(R.id.ingredientsRecyclerView)&#10;        val newPreparationInput: EditText = view.findViewById(R.id.inputNewInstruction)&#10;        val preparationsRecyclerView: RecyclerView = view.findViewById(R.id.instructionsRecyclerView)&#10;&#10;&#10;        val backButton: View = view.findViewById(R.id.backButton) // Replace with the actual ID of the back symbol&#10;        backButton.setOnClickListener {&#10;            dismiss() // Close the dialog&#10;        }&#10;&#10;        val uploadButton = view.findViewById&lt;View&gt;(R.id.buttonUploadImage)&#10;        val selectedImageView = view.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;        val uploadPlaceholder = view.findViewById&lt;View&gt;(R.id.uploadPlaceholder)&#10;        uploadButton.setOnClickListener {&#10;            openImagePicker()&#10;        }&#10;&#10;        // Set up RecyclerView&#10;        val ingredientTouchHelper = ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(&#10;            ItemTouchHelper.UP or ItemTouchHelper.DOWN, 0) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                val from = viewHolder.adapterPosition&#10;                val to = target.adapterPosition&#10;                ingredientsAdapter.onItemMove(from, to)&#10;                return true&#10;            }&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {}&#10;        })&#10;        ingredientTouchHelper.attachToRecyclerView(ingredientsRecyclerView)&#10;&#10;        val preparationTouchHelper = ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(&#10;            ItemTouchHelper.UP or ItemTouchHelper.DOWN, 0) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                val from = viewHolder.adapterPosition&#10;                val to = target.adapterPosition&#10;                preparationsAdapter.onItemMove(from, to)&#10;                return true&#10;            }&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {}&#10;        })&#10;        preparationTouchHelper.attachToRecyclerView(preparationsRecyclerView)&#10;&#10;        ingredientsRecyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        ingredientsRecyclerView.adapter = ingredientsAdapter&#10;&#10;        preparationsRecyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        preparationsRecyclerView.adapter = preparationsAdapter&#10;&#10;        // Add ingredient on Enter key press&#10;        newIngredientInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                val ingredientText = newIngredientInput.text.toString().trim()&#10;                if (ingredientText.isNotEmpty()) {&#10;                    ingredients.add(ingredientText) // Add ingredient to the list&#10;                    ingredientsAdapter.notifyDataSetChanged() // Update RecyclerView&#10;                    ingredientsRecyclerView.scrollToPosition(ingredients.size - 1) // Scroll to the last item&#10;                    newIngredientInput.text.clear() // Clear input field&#10;                }&#10;                true // Event handled&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        newPreparationInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                val preparationText = newPreparationInput.text.toString().trim()&#10;                if (preparationText.isNotEmpty()) {&#10;                    preparations.add(preparationText) // Add preparation step to the list&#10;                    preparationsAdapter.notifyDataSetChanged() // Update RecyclerView&#10;                    preparationsRecyclerView.scrollToPosition(preparations.size - 1) // Scroll to the last item&#10;                    newPreparationInput.text.clear() // Clear input field&#10;                }&#10;                true // Event handled&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        // Button neu anlegen&#10;        val addRecipeButton: Button = view.findViewById(R.id.buttonAddRecipe)&#10;        addRecipeButton.visibility = View.VISIBLE&#10;        addRecipeButton.isEnabled = true&#10;        // Tastatur-Listener: Button ausblenden, wenn Keyboard sichtbar ist&#10;        globalLayoutListener = ViewTreeObserver.OnGlobalLayoutListener {&#10;            val rect = android.graphics.Rect()&#10;            requireActivity().window.decorView.getWindowVisibleDisplayFrame(rect)&#10;            val screenHeight = requireActivity().window.decorView.height&#10;            val keypadHeight = screenHeight - rect.bottom&#10;            if (keypadHeight &gt; screenHeight * 0.15) {&#10;                if (addRecipeButton.visibility != View.GONE) {&#10;                    addRecipeButton.visibility = View.GONE&#10;                }&#10;            } else {&#10;                if (addRecipeButton.visibility != View.VISIBLE) {&#10;                    addRecipeButton.visibility = View.VISIBLE&#10;                }&#10;            }&#10;        }&#10;        view.viewTreeObserver.addOnGlobalLayoutListener(globalLayoutListener)&#10;&#10;        saveButton.setOnClickListener {&#10;            val name = nameInput.text.toString()&#10;            val description = preparationInput.text.toString()&#10;            val servings = servingsInput.text.toString().toIntOrNull() ?: 0&#10;            val prepTime = prepTimeInput.text.toString()&#10;            val notes = notesInput.text.toString()&#10;            var imagePath: String? = selectedImagePath // Verwende das heruntergeladene Bild&#10;&#10;            // Falls kein heruntergeladenes Bild vorhanden, aber ein manuell ausgewähltes Bild&#10;            if (imagePath == null &amp;&amp; imageUri != null) {&#10;                imagePath = saveImageToInternalStorageAndReturnPath(imageUri!!, name)&#10;            }&#10;&#10;            if (name.isNotEmpty() &amp;&amp; ingredients.isNotEmpty() &amp;&amp; preparations.isNotEmpty()) {&#10;                val recipe = if (recipeToEdit != null) {&#10;                    // Editing existing recipe - keep the same ID&#10;                    Recipe(&#10;                        id = recipeToEdit!!.id,&#10;                        name = name,&#10;                        description = description,&#10;                        ingredients = ingredients.toList(),&#10;                        preparations = preparations.toList(),&#10;                        image = imagePath,&#10;                        servings = servings,&#10;                        prepTime = prepTime,&#10;                        notes = notes&#10;                    )&#10;                } else {&#10;                    // Creating new recipe - generate new ID&#10;                    Recipe(&#10;                        id = System.currentTimeMillis().toInt(),&#10;                        name = name,&#10;                        description = description,&#10;                        ingredients = ingredients.toList(),&#10;                        preparations = preparations.toList(),&#10;                        image = imagePath,&#10;                        servings = servings,&#10;                        prepTime = prepTime,&#10;                        notes = notes&#10;                    )&#10;                }&#10;&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;Saving recipe: ${recipe.name} with ID: ${recipe.id}&quot;)&#10;                saveRecipe(recipe)&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;Recipe saved, calling listener&quot;)&#10;                listener?.onRecipeAdded(recipe)&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;Listener called, dismissing dialog&quot;)&#10;                dismiss()&#10;            } else {&#10;                android.util.Log.e(&quot;AddRecipeDialog&quot;, &quot;Recipe validation failed - name: '${name}', ingredients: ${ingredients.size}, preparations: ${preparations.size}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        view?.viewTreeObserver?.removeOnGlobalLayoutListener(globalLayoutListener)&#10;    }&#10;&#10;    private fun saveRecipe(recipe: Recipe) {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val recipes: MutableList&lt;Recipe&gt; = if (recipesFile.exists()) {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;&#10;        if (recipeToEdit != null) {&#10;            // Editing existing recipe - replace the existing one&#10;            val index = recipes.indexOfFirst { it.id == recipe.id }&#10;            if (index != -1) {&#10;                recipes[index] = recipe&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;Existing recipe updated at index $index with ID: ${recipe.id}&quot;)&#10;            } else {&#10;                // Fallback: if not found, add as new&#10;                recipes.add(recipe)&#10;                android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;Recipe not found for editing, added as new with ID: ${recipe.id}&quot;)&#10;            }&#10;        } else {&#10;            // Creating new recipe - add to list&#10;            recipes.add(recipe)&#10;            android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;New recipe added with ID: ${recipe.id}&quot;)&#10;        }&#10;&#10;        recipesFile.writeText(Gson().toJson(recipes))&#10;        android.util.Log.d(&quot;AddRecipeDialog&quot;, &quot;Recipe saved to file&quot;)&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;&#10;        when (requestCode) {&#10;            REQUEST_IMAGE_PICK -&gt; {&#10;                if (resultCode == Activity.RESULT_OK &amp;&amp; data?.data != null) {&#10;                    // Start internal crop activity instead of external one&#10;                    startInternalCropActivity(data.data!!)&#10;                } else {&#10;                    Toast.makeText(requireContext(), &quot;Bildauswahl fehlgeschlagen&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;&#10;            REQUEST_IMAGE_CROP -&gt; {&#10;                if (resultCode == Activity.RESULT_OK &amp;&amp; data?.data != null) {&#10;                    // Handle the cropped image from internal crop activity&#10;                    val croppedImageUri = data.data!!&#10;                    imageUri = croppedImageUri&#10;                    &#10;                    val selectedImageView = view?.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;                    val uploadPlaceholder = view?.findViewById&lt;View&gt;(R.id.uploadPlaceholder)&#10;&#10;                    selectedImageView?.setImageURI(croppedImageUri)&#10;                    selectedImageView?.visibility = View.VISIBLE&#10;                    uploadPlaceholder?.visibility = View.GONE&#10;&#10;                    Toast.makeText(requireContext(), &quot;Bild erfolgreich zugeschnitten&quot;, Toast.LENGTH_SHORT).show()&#10;                } else {&#10;                    Toast.makeText(requireContext(), &quot;Zuschneiden abgebrochen&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startInternalCropActivity(sourceUri: Uri) {&#10;        val cropIntent = Intent(requireContext(), ImageCropActivity::class.java)&#10;        cropIntent.putExtra(&quot;imageUri&quot;, sourceUri)&#10;        startActivityForResult(cropIntent, REQUEST_IMAGE_CROP)&#10;    }&#10;&#10;    companion object {&#10;        private const val REQUEST_IMAGE_PICK = 1001&#10;        private const val REQUEST_IMAGE_CROP = 1002&#10;    }&#10;&#10;    private fun openImagePicker() {&#10;        val intent = Intent(Intent.ACTION_PICK)&#10;        intent.type = &quot;image/*&quot;&#10;        startActivityForResult(intent, REQUEST_IMAGE_PICK)&#10;    }&#10;&#10;    private fun saveImageToInternalStorageAndReturnPath(imageUri: Uri, recipeName: String): String? {&#10;        return try {&#10;            val inputStream: InputStream? = requireContext().contentResolver.openInputStream(imageUri)&#10;            val bitmap = BitmapFactory.decodeStream(inputStream)&#10;            val imageDir = File(requireContext().filesDir, &quot;images&quot;)&#10;            if (!imageDir.exists()) {&#10;                imageDir.mkdir()&#10;            }&#10;            val sanitizedRecipeName = recipeName.replace(&quot;[^a-zA-Z0-9]&quot;.toRegex(), &quot;_&quot;)&#10;            val fileName = &quot;${System.currentTimeMillis()}_${sanitizedRecipeName}.jpg&quot;&#10;            val imageFile = File(imageDir, fileName)&#10;            val outputStream = FileOutputStream(imageFile)&#10;            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream)&#10;            outputStream.flush()&#10;            outputStream.close()&#10;            // Nur relativen Pfad speichern&#10;            &quot;images/$fileName&quot;&#10;        } catch (e: Exception) {&#10;            Toast.makeText(requireContext(), &quot;Failed to save image: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            null&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/CropOverlayView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/CropOverlayView.kt" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.content.Context&#10;import android.graphics.*&#10;import android.util.AttributeSet&#10;import android.view.MotionEvent&#10;import android.view.View&#10;import kotlin.math.abs&#10;import kotlin.math.max&#10;import kotlin.math.min&#10;&#10;class CropOverlayView @JvmOverloads constructor(&#10;    context: Context,&#10;    attrs: AttributeSet? = null,&#10;    defStyleAttr: Int = 0&#10;) : View(context, attrs, defStyleAttr) {&#10;&#10;    private val cropRect = RectF()&#10;    private val paint = Paint().apply {&#10;        color = Color.WHITE&#10;        strokeWidth = 4f&#10;        style = Paint.Style.STROKE&#10;    }&#10;    private val overlayPaint = Paint().apply {&#10;        color = Color.BLACK&#10;        alpha = 128&#10;    }&#10;    private val gridPaint = Paint().apply {&#10;        color = Color.WHITE&#10;        strokeWidth = 2f&#10;        alpha = 200&#10;    }&#10;&#10;    private var bitmap: Bitmap? = null&#10;    private var isDragging = false&#10;    private var dragHandle = DragHandle.NONE&#10;    private var lastTouchX = 0f&#10;    private var lastTouchY = 0f&#10;    private val handleSize = 40f&#10;&#10;    enum class DragHandle {&#10;        NONE, MOVE, TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, BOTTOM_RIGHT&#10;    }&#10;&#10;    fun setBitmap(bitmap: Bitmap) {&#10;        this.bitmap = bitmap&#10;        initializeCropRect()&#10;        invalidate()&#10;    }&#10;&#10;    private fun initializeCropRect() {&#10;        val size = min(width, height) * 0.8f&#10;        val centerX = width / 2f&#10;        val centerY = height / 2f&#10;        &#10;        cropRect.set(&#10;            centerX - size / 2f,&#10;            centerY - size / 2f,&#10;            centerX + size / 2f,&#10;            centerY + size / 2f&#10;        )&#10;    }&#10;&#10;    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {&#10;        super.onSizeChanged(w, h, oldw, oldh)&#10;        if (bitmap != null) {&#10;            initializeCropRect()&#10;        }&#10;    }&#10;&#10;    override fun onDraw(canvas: Canvas) {&#10;        super.onDraw(canvas)&#10;&#10;        // Draw semi-transparent overlay&#10;        canvas.drawRect(0f, 0f, width.toFloat(), cropRect.top, overlayPaint)&#10;        canvas.drawRect(0f, cropRect.bottom, width.toFloat(), height.toFloat(), overlayPaint)&#10;        canvas.drawRect(0f, cropRect.top, cropRect.left, cropRect.bottom, overlayPaint)&#10;        canvas.drawRect(cropRect.right, cropRect.top, width.toFloat(), cropRect.bottom, overlayPaint)&#10;&#10;        // Draw crop rectangle&#10;        canvas.drawRect(cropRect, paint)&#10;&#10;        // Draw grid lines&#10;        val thirdWidth = cropRect.width() / 3f&#10;        val thirdHeight = cropRect.height() / 3f&#10;        &#10;        // Vertical lines&#10;        canvas.drawLine(cropRect.left + thirdWidth, cropRect.top, cropRect.left + thirdWidth, cropRect.bottom, gridPaint)&#10;        canvas.drawLine(cropRect.left + 2 * thirdWidth, cropRect.top, cropRect.left + 2 * thirdWidth, cropRect.bottom, gridPaint)&#10;        &#10;        // Horizontal lines&#10;        canvas.drawLine(cropRect.left, cropRect.top + thirdHeight, cropRect.right, cropRect.top + thirdHeight, gridPaint)&#10;        canvas.drawLine(cropRect.left, cropRect.top + 2 * thirdHeight, cropRect.right, cropRect.top + 2 * thirdHeight, gridPaint)&#10;&#10;        // Draw corner handles&#10;        drawHandle(canvas, cropRect.left, cropRect.top)&#10;        drawHandle(canvas, cropRect.right, cropRect.top)&#10;        drawHandle(canvas, cropRect.left, cropRect.bottom)&#10;        drawHandle(canvas, cropRect.right, cropRect.bottom)&#10;    }&#10;&#10;    private fun drawHandle(canvas: Canvas, x: Float, y: Float) {&#10;        canvas.drawCircle(x, y, handleSize / 2f, paint.apply { style = Paint.Style.FILL })&#10;        canvas.drawCircle(x, y, handleSize / 2f, paint.apply { &#10;            style = Paint.Style.STROKE&#10;            color = Color.BLACK&#10;        })&#10;        paint.color = Color.WHITE&#10;        paint.style = Paint.Style.STROKE&#10;    }&#10;&#10;    override fun onTouchEvent(event: MotionEvent): Boolean {&#10;        when (event.action) {&#10;            MotionEvent.ACTION_DOWN -&gt; {&#10;                lastTouchX = event.x&#10;                lastTouchY = event.y&#10;                dragHandle = getDragHandle(event.x, event.y)&#10;                isDragging = dragHandle != DragHandle.NONE&#10;                return true&#10;            }&#10;            &#10;            MotionEvent.ACTION_MOVE -&gt; {&#10;                if (isDragging) {&#10;                    val deltaX = event.x - lastTouchX&#10;                    val deltaY = event.y - lastTouchY&#10;                    &#10;                    when (dragHandle) {&#10;                        DragHandle.MOVE -&gt; {&#10;                            moveCropRect(deltaX, deltaY)&#10;                        }&#10;                        DragHandle.TOP_LEFT -&gt; {&#10;                            resizeCropRect(deltaX, deltaY, 0f, 0f)&#10;                        }&#10;                        DragHandle.TOP_RIGHT -&gt; {&#10;                            resizeCropRect(0f, deltaY, deltaX, 0f)&#10;                        }&#10;                        DragHandle.BOTTOM_LEFT -&gt; {&#10;                            resizeCropRect(deltaX, 0f, 0f, deltaY)&#10;                        }&#10;                        DragHandle.BOTTOM_RIGHT -&gt; {&#10;                            resizeCropRect(0f, 0f, deltaX, deltaY)&#10;                        }&#10;                        else -&gt; {}&#10;                    }&#10;                    &#10;                    lastTouchX = event.x&#10;                    lastTouchY = event.y&#10;                    invalidate()&#10;                }&#10;                return true&#10;            }&#10;            &#10;            MotionEvent.ACTION_UP -&gt; {&#10;                isDragging = false&#10;                dragHandle = DragHandle.NONE&#10;                return true&#10;            }&#10;        }&#10;        return super.onTouchEvent(event)&#10;    }&#10;&#10;    private fun getDragHandle(x: Float, y: Float): DragHandle {&#10;        // Check corner handles first&#10;        if (isNearPoint(x, y, cropRect.left, cropRect.top)) return DragHandle.TOP_LEFT&#10;        if (isNearPoint(x, y, cropRect.right, cropRect.top)) return DragHandle.TOP_RIGHT&#10;        if (isNearPoint(x, y, cropRect.left, cropRect.bottom)) return DragHandle.BOTTOM_LEFT&#10;        if (isNearPoint(x, y, cropRect.right, cropRect.bottom)) return DragHandle.BOTTOM_RIGHT&#10;        &#10;        // Check if inside crop rectangle for move&#10;        if (cropRect.contains(x, y)) return DragHandle.MOVE&#10;        &#10;        return DragHandle.NONE&#10;    }&#10;&#10;    private fun isNearPoint(x: Float, y: Float, pointX: Float, pointY: Float): Boolean {&#10;        return abs(x - pointX) &lt; handleSize &amp;&amp; abs(y - pointY) &lt; handleSize&#10;    }&#10;&#10;    private fun moveCropRect(deltaX: Float, deltaY: Float) {&#10;        val newLeft = cropRect.left + deltaX&#10;        val newTop = cropRect.top + deltaY&#10;        val newRight = cropRect.right + deltaX&#10;        val newBottom = cropRect.bottom + deltaY&#10;        &#10;        // Keep within bounds&#10;        if (newLeft &gt;= 0 &amp;&amp; newRight &lt;= width &amp;&amp; newTop &gt;= 0 &amp;&amp; newBottom &lt;= height) {&#10;            cropRect.offset(deltaX, deltaY)&#10;        }&#10;    }&#10;&#10;    private fun resizeCropRect(deltaLeft: Float, deltaTop: Float, deltaRight: Float, deltaBottom: Float) {&#10;        val newLeft = max(0f, min(cropRect.left + deltaLeft, cropRect.right - 50f))&#10;        val newTop = max(0f, min(cropRect.top + deltaTop, cropRect.bottom - 50f))&#10;        val newRight = min(width.toFloat(), max(cropRect.right + deltaRight, cropRect.left + 50f))&#10;        val newBottom = min(height.toFloat(), max(cropRect.bottom + deltaBottom, cropRect.top + 50f))&#10;        &#10;        cropRect.set(newLeft, newTop, newRight, newBottom)&#10;    }&#10;&#10;    fun getCropRect(): RectF {&#10;        return RectF(cropRect)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/FavoritesFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/FavoritesFragment.kt" />
              <option name="originalContent" value="package com.app.mealplanner&#10;&#10;import android.os.Bundle&#10;import android.text.Editable&#10;import android.text.TextWatcher&#10;import android.util.Log&#10;import android.view.Menu&#10;import android.view.MenuInflater&#10;import android.view.MenuItem&#10;import android.view.View&#10;import android.widget.EditText&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;&#10;class FavoritesFragment : Fragment(R.layout.fragment_favorites) {&#10;&#10;    private lateinit var adapter: FavoritesRecipeAdapter&#10;    private var allFavorites: MutableList&lt;Recipe&gt; = mutableListOf() // Store all recipes&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        val recyclerView: RecyclerView = view.findViewById(R.id.recyclerViewFavorites)&#10;        recyclerView.layoutManager = GridLayoutManager(requireContext(), 2)&#10;        adapter = FavoritesRecipeAdapter(&#10;            mutableListOf(),&#10;            onSwipe = {}, // Handle swipe if needed&#10;            onRemoveClick = { recipe -&gt; removeFavorite(recipe) } // Handle remove click&#10;        ) { recipe -&gt;&#10;            openRecipeDetail(recipe)&#10;        }&#10;        recyclerView.adapter = adapter&#10;&#10;        val favorites = loadFavorites()&#10;        allFavorites = favorites.toMutableList() // Save all recipes for filtering&#10;        if (favorites.isNotEmpty()) {&#10;            adapter.updateRecipes(favorites)&#10;        } else {&#10;            println(&quot;Keine Favoriten gefunden.&quot;)&#10;        }&#10;&#10;        val searchInput: EditText = view.findViewById&lt;View&gt;(R.id.topBar).findViewById(R.id.search_input)&#10;        searchInput.addTextChangedListener(object : TextWatcher {&#10;            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}&#10;            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {&#10;                filterFavorites(s.toString())&#10;            }&#10;            override fun afterTextChanged(s: Editable?) {}&#10;        })&#10;&#10;        // Add the listener for the Enter key&#10;        searchInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH || actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                filterFavorites(searchInput.text.toString()) // Apply the filter&#10;                true // Event handled&#10;            } else {&#10;                false // Event not handled&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun filterFavorites(query: String) {&#10;        val filteredFavorites = if (query.isEmpty()) {&#10;            allFavorites // Show all favorites if the search field is empty&#10;        } else {&#10;            allFavorites.filter { recipe -&gt;&#10;                recipe.name.contains(query, ignoreCase = true) // Filter by name&#10;            }&#10;        }&#10;        adapter.updateRecipes(filteredFavorites.toMutableList()) // Update RecyclerView&#10;    }&#10;&#10;    private fun removeFavorite(recipe: Recipe) {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        if (favoritesFile.exists()) {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            val favorites: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;            favorites.remove(recipe)&#10;            favoritesFile.writeText(Gson().toJson(favorites))&#10;            adapter.removeRecipe(recipe)&#10;        }&#10;    }&#10;&#10;    private fun openRecipeDetail(recipe: Recipe) {&#10;        val fragment = RecipeDetailFragment.newInstance(recipe)&#10;        parentFragmentManager.beginTransaction()&#10;            .replace(R.id.fragment_container, fragment)&#10;            .addToBackStack(null)&#10;            .commit()&#10;    }&#10;&#10;    private fun loadFavorites(): MutableList&lt;Recipe&gt; {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        if (!favoritesFile.exists()) {&#10;            // Copy the file from assets to filesDir if it doesn't exist&#10;            try {&#10;                requireContext().assets.open(&quot;favorites.json&quot;).use { inputStream -&gt;&#10;                    favoritesFile.outputStream().use { outputStream -&gt;&#10;                        inputStream.copyTo(outputStream)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;FavoritesFragment&quot;, &quot;Error copying favorites.json: ${e.message}&quot;)&#10;                return mutableListOf()&#10;            }&#10;        }&#10;&#10;        return try {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            val favorites: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;&#10;            // Log missing images instead of resetting the property&#10;            favorites.forEach { recipe -&gt;&#10;                if (recipe.image != null) {&#10;                    val imageFile = File(requireContext().filesDir, recipe.image)&#10;                    if (!imageFile.exists()) {&#10;                        Log.w(&quot;FavoritesFragment&quot;, &quot;Image file missing for recipe: ${recipe.name}&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            favorites&#10;        } catch (e: Exception) {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setHasOptionsMenu(true) // Enables the options menu&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {&#10;        inflater.inflate(R.menu.menu_favorites, menu)&#10;        super.onCreateOptionsMenu(menu, inflater)&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        return when (item.itemId) {&#10;            R.id.action_clear_favorites -&gt; {&#10;                clearFavorites()&#10;                true&#10;            }&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    private fun clearFavorites() {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        if (favoritesFile.exists()) {&#10;            favoritesFile.delete() // Deletes the file&#10;        }&#10;        adapter.updateRecipes(mutableListOf()) // Updates the RecyclerView&#10;        println(&quot;Favoritenliste wurde gelöscht.&quot;)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        loadFavoritesAndUpdateUI()&#10;    }&#10;&#10;    private fun loadFavoritesAndUpdateUI() {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        if (favoritesFile.exists()) {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            val favorites: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;            adapter.updateRecipes(favorites) // Aktualisiert die RecyclerView&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.os.Bundle&#10;import android.text.Editable&#10;import android.text.TextWatcher&#10;import android.util.Log&#10;import android.view.Menu&#10;import android.view.MenuInflater&#10;import android.view.MenuItem&#10;import android.view.View&#10;import android.widget.EditText&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;&#10;class FavoritesFragment : Fragment(R.layout.fragment_favorites) {&#10;&#10;    private lateinit var adapter: FavoritesRecipeAdapter&#10;    private var allFavorites: MutableList&lt;Recipe&gt; = mutableListOf() // Store all recipes&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        val recyclerView: RecyclerView = view.findViewById(R.id.recyclerViewFavorites)&#10;        recyclerView.layoutManager = GridLayoutManager(requireContext(), 2)&#10;        adapter = FavoritesRecipeAdapter(&#10;            mutableListOf(),&#10;            onSwipe = {}, // Handle swipe if needed&#10;            onRemoveClick = { recipe -&gt; removeFavorite(recipe) }, // Handle remove click&#10;            onClick = { recipe -&gt; openRecipeDetail(recipe) },&#10;            onLongClick = { recipe -&gt; showRecipeOptions(recipe) } // Handle long click&#10;        )&#10;        recyclerView.adapter = adapter&#10;&#10;        val favorites = loadFavorites()&#10;        allFavorites = favorites.toMutableList() // Save all recipes for filtering&#10;        if (favorites.isNotEmpty()) {&#10;            adapter.updateRecipes(favorites)&#10;        } else {&#10;            println(&quot;Keine Favoriten gefunden.&quot;)&#10;        }&#10;&#10;        val searchInput: EditText = view.findViewById&lt;View&gt;(R.id.topBar).findViewById(R.id.search_input)&#10;        searchInput.addTextChangedListener(object : TextWatcher {&#10;            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}&#10;            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {&#10;                filterFavorites(s.toString())&#10;            }&#10;            override fun afterTextChanged(s: Editable?) {}&#10;        })&#10;&#10;        // Add the listener for the Enter key&#10;        searchInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH || actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                filterFavorites(searchInput.text.toString()) // Apply the filter&#10;                true // Event handled&#10;            } else {&#10;                false // Event not handled&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun filterFavorites(query: String) {&#10;        val filteredFavorites = if (query.isEmpty()) {&#10;            allFavorites // Show all favorites if the search field is empty&#10;        } else {&#10;            allFavorites.filter { recipe -&gt;&#10;                recipe.name.contains(query, ignoreCase = true) // Filter by name&#10;            }&#10;        }&#10;        adapter.updateRecipes(filteredFavorites.toMutableList()) // Update RecyclerView&#10;    }&#10;&#10;    private fun removeFavorite(recipe: Recipe) {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        if (favoritesFile.exists()) {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            val favorites: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;            favorites.remove(recipe)&#10;            favoritesFile.writeText(Gson().toJson(favorites))&#10;            adapter.removeRecipe(recipe)&#10;        }&#10;    }&#10;&#10;    private fun openRecipeDetail(recipe: Recipe) {&#10;        val fragment = RecipeDetailFragment.newInstance(recipe)&#10;        parentFragmentManager.beginTransaction()&#10;            .replace(R.id.fragment_container, fragment)&#10;            .addToBackStack(null)&#10;            .commit()&#10;    }&#10;&#10;    private fun loadFavorites(): MutableList&lt;Recipe&gt; {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        if (!favoritesFile.exists()) {&#10;            // Copy the file from assets to filesDir if it doesn't exist&#10;            try {&#10;                requireContext().assets.open(&quot;favorites.json&quot;).use { inputStream -&gt;&#10;                    favoritesFile.outputStream().use { outputStream -&gt;&#10;                        inputStream.copyTo(outputStream)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;FavoritesFragment&quot;, &quot;Error copying favorites.json: ${e.message}&quot;)&#10;                return mutableListOf()&#10;            }&#10;        }&#10;&#10;        return try {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            val favorites: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;&#10;            // Log missing images instead of resetting the property&#10;            favorites.forEach { recipe -&gt;&#10;                if (recipe.image != null) {&#10;                    val imageFile = File(requireContext().filesDir, recipe.image)&#10;                    if (!imageFile.exists()) {&#10;                        Log.w(&quot;FavoritesFragment&quot;, &quot;Image file missing for recipe: ${recipe.name}&quot;)&#10;                    }&#10;                }&#10;            }&#10;&#10;            favorites&#10;        } catch (e: Exception) {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setHasOptionsMenu(true) // Enables the options menu&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {&#10;        inflater.inflate(R.menu.menu_favorites, menu)&#10;        super.onCreateOptionsMenu(menu, inflater)&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        return when (item.itemId) {&#10;            R.id.action_clear_favorites -&gt; {&#10;                clearFavorites()&#10;                true&#10;            }&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    private fun clearFavorites() {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        if (favoritesFile.exists()) {&#10;            favoritesFile.delete() // Deletes the file&#10;        }&#10;        adapter.updateRecipes(mutableListOf()) // Updates the RecyclerView&#10;        println(&quot;Favoritenliste wurde gelöscht.&quot;)&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        loadFavoritesAndUpdateUI()&#10;    }&#10;&#10;    private fun loadFavoritesAndUpdateUI() {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        if (favoritesFile.exists()) {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            val favorites: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;            adapter.updateRecipes(favorites) // Aktualisiert die RecyclerView&#10;        }&#10;    }&#10;&#10;    private fun showRecipeOptions(recipe: Recipe) {&#10;        val dialog = RecipeOptionsDialogFragment(&#10;            recipe = recipe,&#10;            onEdit = { recipeToEdit -&gt;&#10;                showEditRecipeDialog(recipeToEdit)&#10;            },&#10;            onDelete = { recipeToDelete -&gt;&#10;                deleteFavoriteRecipe(recipeToDelete)&#10;            }&#10;        )&#10;        dialog.show(parentFragmentManager, &quot;RecipeOptionsDialog&quot;)&#10;    }&#10;&#10;    private fun showEditRecipeDialog(recipe: Recipe) {&#10;        val dialog = AddRecipeDialogFragment()&#10;        dialog.setRecipeToEdit(recipe) // Assume this method exists to pre-fill the dialog&#10;        dialog.setOnRecipeAddedListener(object : AddRecipeDialogFragment.OnRecipeAddedListener {&#10;            override fun onRecipeAdded(updatedRecipe: Recipe) {&#10;                updateRecipeInFavorites(updatedRecipe)&#10;            }&#10;        })&#10;        dialog.show(parentFragmentManager, &quot;EditRecipeDialog&quot;)&#10;    }&#10;&#10;    private fun updateRecipeInFavorites(updatedRecipe: Recipe) {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        if (favoritesFile.exists()) {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            val favorites: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;&#10;            // Find and update the recipe&#10;            val index = favorites.indexOfFirst { it.id == updatedRecipe.id }&#10;            if (index != -1) {&#10;                favorites[index] = updatedRecipe&#10;                favoritesFile.writeText(Gson().toJson(favorites))&#10;&#10;                // Update the UI&#10;                allFavorites = favorites&#10;                val filteredFavorites = if (view?.findViewById&lt;EditText&gt;(R.id.search_input)?.text.toString().isEmpty()) {&#10;                    allFavorites&#10;                } else {&#10;                    allFavorites.filter { recipe -&gt;&#10;                        recipe.name.contains(view?.findViewById&lt;EditText&gt;(R.id.search_input)?.text.toString(), ignoreCase = true)&#10;                    }&#10;                }&#10;                adapter.updateRecipes(filteredFavorites.toMutableList())&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun deleteFavoriteRecipe(recipe: Recipe) {&#10;        removeFavorite(recipe)&#10;        // Update allFavorites list&#10;        allFavorites.removeIf { it.id == recipe.id }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/FavoritesRecipeAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/FavoritesRecipeAdapter.kt" />
              <option name="originalContent" value="package com.app.mealplanner&#10;&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.databinding.NewRecipeItemBinding&#10;import com.app.mealplanner.model.Recipe&#10;import java.io.File&#10;import com.bumptech.glide.Glide&#10;&#10;class FavoritesRecipeAdapter(&#10;    private var recipes: MutableList&lt;Recipe&gt;,&#10;    private val onSwipe: (String) -&gt; Unit,&#10;    private val onRemoveClick: (Recipe) -&gt; Unit,&#10;    private val onClick: (Recipe) -&gt; Unit // Add onClick callback&#10;) : RecyclerView.Adapter&lt;FavoritesRecipeAdapter.FavoritesRecipeViewHolder&gt;() {&#10;&#10;    class FavoritesRecipeViewHolder(private val binding: NewRecipeItemBinding) : RecyclerView.ViewHolder(binding.root) {&#10;        val recipeImage: ImageView = binding.recipeImage&#10;        val recipeTitle: TextView = binding.recipeTitle&#10;        val recipeTime: TextView = binding.recipeTime&#10;        val recipeIcon: ImageView = binding.recipeIcon&#10;        val btnRemoveFavorite: ImageView = binding.btnRemoveFavorite&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): FavoritesRecipeViewHolder {&#10;        val binding = NewRecipeItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)&#10;        return FavoritesRecipeViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: FavoritesRecipeViewHolder, position: Int) {&#10;        val currentRecipe = recipes[position]&#10;        holder.recipeTitle.text = currentRecipe.name&#10;&#10;        val imagePath = currentRecipe.image&#10;        val imageFile = if (!imagePath.isNullOrEmpty() &amp;&amp; !File(imagePath).isAbsolute) File(holder.itemView.context.filesDir, imagePath) else if (!imagePath.isNullOrEmpty()) File(imagePath) else null&#10;        if (imageFile != null &amp;&amp; imageFile.exists()) {&#10;            Glide.with(holder.itemView.context)&#10;                .load(imageFile)&#10;                .placeholder(android.R.drawable.ic_menu_gallery)&#10;                .error(android.R.drawable.ic_dialog_alert)&#10;                .into(holder.recipeImage)&#10;        } else {&#10;            holder.recipeImage.setImageResource(android.R.drawable.ic_menu_gallery)&#10;        }&#10;&#10;        holder.recipeTime.text = &quot;${currentRecipe.prepTime} min&quot;&#10;        holder.recipeIcon.setImageResource(R.drawable.ic_timer)&#10;        holder.btnRemoveFavorite.setOnClickListener {&#10;            onRemoveClick(currentRecipe)&#10;        }&#10;        holder.itemView.setOnClickListener {&#10;            onClick(currentRecipe) // Trigger the callback with the clicked recipe&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = recipes.size&#10;&#10;    fun updateRecipes(newRecipes: MutableList&lt;Recipe&gt;) {&#10;        this.recipes = newRecipes&#10;        notifyDataSetChanged() // RecyclerView aktualisieren&#10;    }&#10;&#10;    fun removeRecipe(recipe: Recipe) {&#10;        val position = recipes.indexOf(recipe)&#10;        if (position != -1) {&#10;            recipes.removeAt(position)&#10;            notifyItemRemoved(position)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.databinding.NewRecipeItemBinding&#10;import com.app.mealplanner.model.Recipe&#10;import java.io.File&#10;import com.bumptech.glide.Glide&#10;&#10;class FavoritesRecipeAdapter(&#10;    private var recipes: MutableList&lt;Recipe&gt;,&#10;    private val onSwipe: (String) -&gt; Unit,&#10;    private val onRemoveClick: (Recipe) -&gt; Unit,&#10;    private val onClick: (Recipe) -&gt; Unit,&#10;    private val onLongClick: (Recipe) -&gt; Unit // Add onLongClick callback&#10;) : RecyclerView.Adapter&lt;FavoritesRecipeAdapter.FavoritesRecipeViewHolder&gt;() {&#10;&#10;    class FavoritesRecipeViewHolder(private val binding: NewRecipeItemBinding) : RecyclerView.ViewHolder(binding.root) {&#10;        val recipeImage: ImageView = binding.recipeImage&#10;        val recipeTitle: TextView = binding.recipeTitle&#10;        val recipeTime: TextView = binding.recipeTime&#10;        val recipeIcon: ImageView = binding.recipeIcon&#10;        val btnRemoveFavorite: ImageView = binding.btnRemoveFavorite&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): FavoritesRecipeViewHolder {&#10;        val binding = NewRecipeItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)&#10;        return FavoritesRecipeViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: FavoritesRecipeViewHolder, position: Int) {&#10;        val currentRecipe = recipes[position]&#10;        holder.recipeTitle.text = currentRecipe.name&#10;&#10;        val imagePath = currentRecipe.image&#10;        val imageFile = if (!imagePath.isNullOrEmpty() &amp;&amp; !File(imagePath).isAbsolute) File(holder.itemView.context.filesDir, imagePath) else if (!imagePath.isNullOrEmpty()) File(imagePath) else null&#10;        if (imageFile != null &amp;&amp; imageFile.exists()) {&#10;            Glide.with(holder.itemView.context)&#10;                .load(imageFile)&#10;                .placeholder(android.R.drawable.ic_menu_gallery)&#10;                .error(android.R.drawable.ic_dialog_alert)&#10;                .into(holder.recipeImage)&#10;        } else {&#10;            holder.recipeImage.setImageResource(android.R.drawable.ic_menu_gallery)&#10;        }&#10;&#10;        holder.recipeTime.text = &quot;${currentRecipe.prepTime} min&quot;&#10;        holder.recipeIcon.setImageResource(R.drawable.ic_timer)&#10;        holder.btnRemoveFavorite.setOnClickListener {&#10;            onRemoveClick(currentRecipe)&#10;        }&#10;        holder.itemView.setOnClickListener {&#10;            onClick(currentRecipe) // Trigger the callback with the clicked recipe&#10;        }&#10;        holder.itemView.setOnLongClickListener {&#10;            onLongClick(currentRecipe) // Trigger long click callback&#10;            true&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = recipes.size&#10;&#10;    fun updateRecipes(newRecipes: MutableList&lt;Recipe&gt;) {&#10;        this.recipes = newRecipes&#10;        notifyDataSetChanged() // RecyclerView aktualisieren&#10;    }&#10;&#10;    fun removeRecipe(recipe: Recipe) {&#10;        val position = recipes.indexOf(recipe)&#10;        if (position != -1) {&#10;            recipes.removeAt(position)&#10;            notifyItemRemoved(position)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/ImageCropActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/ImageCropActivity.kt" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.graphics.Canvas&#10;import android.graphics.Paint&#10;import android.graphics.PorterDuff&#10;import android.graphics.PorterDuffXfermode&#10;import android.graphics.Rect&#10;import android.graphics.RectF&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.MotionEvent&#10;import android.view.View&#10;import android.widget.Button&#10;import android.widget.ImageView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import java.io.ByteArrayOutputStream&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import kotlin.math.abs&#10;import kotlin.math.max&#10;import kotlin.math.min&#10;&#10;class ImageCropActivity : AppCompatActivity() {&#10;    &#10;    private lateinit var imageView: ImageView&#10;    private lateinit var cropOverlay: CropOverlayView&#10;    private lateinit var btnCrop: Button&#10;    private lateinit var btnCancel: Button&#10;    &#10;    private var originalBitmap: Bitmap? = null&#10;    private var imageUri: Uri? = null&#10;    &#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_image_crop)&#10;        &#10;        imageView = findViewById(R.id.imageView)&#10;        cropOverlay = findViewById(R.id.cropOverlay)&#10;        btnCrop = findViewById(R.id.btnCrop)&#10;        btnCancel = findViewById(R.id.btnCancel)&#10;        &#10;        // Get image URI from intent&#10;        imageUri = intent.getParcelableExtra(&quot;imageUri&quot;)&#10;        if (imageUri == null) {&#10;            Toast.makeText(this, &quot;Fehler beim Laden des Bildes&quot;, Toast.LENGTH_SHORT).show()&#10;            setResult(Activity.RESULT_CANCELED)&#10;            finish()&#10;            return&#10;        }&#10;        &#10;        loadImage()&#10;        &#10;        btnCrop.setOnClickListener {&#10;            cropImage()&#10;        }&#10;        &#10;        btnCancel.setOnClickListener {&#10;            setResult(Activity.RESULT_CANCELED)&#10;            finish()&#10;        }&#10;    }&#10;    &#10;    private fun loadImage() {&#10;        try {&#10;            val inputStream = contentResolver.openInputStream(imageUri!!)&#10;            originalBitmap = BitmapFactory.decodeStream(inputStream)&#10;            inputStream?.close()&#10;            &#10;            if (originalBitmap != null) {&#10;                imageView.setImageBitmap(originalBitmap)&#10;                cropOverlay.setBitmap(originalBitmap!!)&#10;            } else {&#10;                Toast.makeText(this, &quot;Fehler beim Laden des Bildes&quot;, Toast.LENGTH_SHORT).show()&#10;                setResult(Activity.RESULT_CANCELED)&#10;                finish()&#10;            }&#10;        } catch (e: Exception) {&#10;            Toast.makeText(this, &quot;Fehler beim Laden des Bildes: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            setResult(Activity.RESULT_CANCELED)&#10;            finish()&#10;        }&#10;    }&#10;    &#10;    private fun cropImage() {&#10;        val bitmap = originalBitmap ?: return&#10;        val cropRect = cropOverlay.getCropRect()&#10;        &#10;        try {&#10;            // Calculate scale factors&#10;            val imageViewWidth = imageView.width.toFloat()&#10;            val imageViewHeight = imageView.height.toFloat()&#10;            val bitmapWidth = bitmap.width.toFloat()&#10;            val bitmapHeight = bitmap.height.toFloat()&#10;            &#10;            val scaleX = bitmapWidth / imageViewWidth&#10;            val scaleY = bitmapHeight / imageViewHeight&#10;            &#10;            // Apply scale to crop rectangle&#10;            val scaledLeft = (cropRect.left * scaleX).toInt()&#10;            val scaledTop = (cropRect.top * scaleY).toInt()&#10;            val scaledWidth = ((cropRect.right - cropRect.left) * scaleX).toInt()&#10;            val scaledHeight = ((cropRect.bottom - cropRect.top) * scaleY).toInt()&#10;            &#10;            // Ensure crop rectangle is within bitmap bounds&#10;            val left = max(0, scaledLeft)&#10;            val top = max(0, scaledTop)&#10;            val width = min(scaledWidth, bitmap.width - left)&#10;            val height = min(scaledHeight, bitmap.height - top)&#10;            &#10;            if (width &gt; 0 &amp;&amp; height &gt; 0) {&#10;                val croppedBitmap = Bitmap.createBitmap(bitmap, left, top, width, height)&#10;                saveCroppedImage(croppedBitmap)&#10;            } else {&#10;                Toast.makeText(this, &quot;Ungültiger Zuschnittbereich&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        } catch (e: Exception) {&#10;            Toast.makeText(this, &quot;Fehler beim Zuschneiden: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;    &#10;    private fun saveCroppedImage(croppedBitmap: Bitmap) {&#10;        try {&#10;            val tempFile = File(cacheDir, &quot;cropped_${System.currentTimeMillis()}.jpg&quot;)&#10;            val outputStream = FileOutputStream(tempFile)&#10;            croppedBitmap.compress(Bitmap.CompressFormat.JPEG, 90, outputStream)&#10;            outputStream.flush()&#10;            outputStream.close()&#10;            &#10;            val resultIntent = Intent()&#10;            resultIntent.data = Uri.fromFile(tempFile)&#10;            setResult(Activity.RESULT_OK, resultIntent)&#10;            finish()&#10;        } catch (e: Exception) {&#10;            Toast.makeText(this, &quot;Fehler beim Speichern: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipeAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipeAdapter.kt" />
              <option name="originalContent" value="package com.app.mealplanner&#10;&#10;import IngredientsAdapter&#10;import android.text.Html&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.databinding.RecipeItemBinding&#10;import com.app.mealplanner.model.Recipe&#10;import com.bumptech.glide.Glide&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import java.io.File&#10;&#10;class RecipeAdapter(private var recipes: MutableList&lt;Recipe&gt;,&#10;                    private val onSwipe: (String) -&gt; Unit) :&#10;    RecyclerView.Adapter&lt;RecipeAdapter.RecipeViewHolder&gt;() {&#10;&#10;    class RecipeViewHolder(private val binding: RecipeItemBinding) : RecyclerView.ViewHolder(binding.root) {&#10;        val nameTextView: TextView = binding.recipeName&#10;        val recipeImage: ImageView = binding.recipeImage&#10;        //val ingredientsList: TextView = binding.ingredientsList&#10;        val preparationList: TextView = binding.preparationList&#10;        val recipeDescription: TextView = binding.recipeDescription&#10;        val servings: TextView = binding.servings&#10;        val preparationTime: TextView = binding.preparationTime&#10;        //val notes: TextView = binding.notes&#10;        val ingredientsRecyclerView = binding.ingredientsRecyclerView // Expose RecyclerView&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecipeViewHolder {&#10;        val binding = RecipeItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)&#10;        return RecipeViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: RecipeViewHolder, position: Int) {&#10;        val currentRecipe = recipes[position]&#10;        holder.nameTextView.text = currentRecipe.name&#10;&#10;        val ingredientsAdapter = IngredientsAdapter(&#10;            currentRecipe.ingredients?.toMutableList() ?: mutableListOf(),&#10;            R.color.AcardTextColor,&#10;            onDelete = { _ -&gt; },&#10;            onStartDrag = { _ -&gt; },&#10;            showEditIcons = false&#10;        )&#10;        val gridLayoutManager = GridLayoutManager(holder.itemView.context, if ((currentRecipe.ingredients?.size ?: 0) &gt; 5) 2 else 1)&#10;        holder.ingredientsRecyclerView.layoutManager = gridLayoutManager&#10;        holder.ingredientsRecyclerView.adapter = ingredientsAdapter&#10;&#10;        val imagePath = currentRecipe.image&#10;        val imageFile = if (!imagePath.isNullOrEmpty() &amp;&amp; !File(imagePath).isAbsolute) File(holder.itemView.context.filesDir, imagePath) else if (!imagePath.isNullOrEmpty()) File(imagePath) else null&#10;        if (imageFile != null &amp;&amp; imageFile.exists()) {&#10;            Glide.with(holder.itemView.context)&#10;                .load(imageFile)&#10;                .placeholder(android.R.drawable.ic_menu_gallery)&#10;                .error(android.R.drawable.ic_dialog_alert)&#10;                .into(holder.recipeImage)&#10;        } else {&#10;            holder.recipeImage.setImageResource(android.R.drawable.ic_menu_gallery)&#10;        }&#10;&#10;        holder.preparationList.text = currentRecipe.preparations&#10;            ?.mapIndexed { index, preparation -&gt; &quot;${index + 1}. $preparation&quot; }&#10;            ?.joinToString(&quot;\n&quot;) ?: &quot;&quot;&#10;        holder.servings.text = Html.fromHtml(&quot;&lt;b&gt;Portionen:&lt;/b&gt; ${currentRecipe.servings ?: &quot;&lt;b&gt;Portionen:&lt;/b&gt; N/A&quot;}&quot;)&#10;        holder.preparationTime.text = Html.fromHtml(&quot;&lt;b&gt;Zubereitungszeit:&lt;/b&gt; ${currentRecipe.prepTime ?: &quot;&lt;b&gt;Zubereitungszeit:&lt;/b&gt; N/A&quot;}&quot;)&#10;        holder.recipeDescription.text = currentRecipe.description ?: &quot;Keine Beschreibung verfügbar&quot;&#10;        /*if (currentRecipe.notes.isNullOrEmpty()) {&#10;            holder.notes.visibility = View.GONE&#10;            holder.itemView.findViewById&lt;TextView&gt;(R.id.notesLabel).visibility = View.GONE&#10;        } else {&#10;            holder.notes.visibility = View.VISIBLE&#10;            holder.itemView.findViewById&lt;TextView&gt;(R.id.notesLabel).visibility = View.VISIBLE&#10;            holder.notes.text = currentRecipe.notes&#10;        }*/&#10;    }&#10;&#10;    override fun getItemCount(): Int = recipes.size&#10;&#10;    fun removeRecipe(position: Int) {&#10;        recipes.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;&#10;    fun addRecipe(recipe: Recipe) {&#10;        recipes.add(recipe)&#10;        notifyItemInserted(recipes.size - 1)&#10;    }&#10;&#10;    fun updateRecipes(newRecipes: MutableList&lt;Recipe&gt;) {&#10;        recipes = newRecipes&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    fun removeRecipeAt(position: Int) {&#10;        recipes.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;&#10;    fun getRecipes(): MutableList&lt;Recipe&gt; {&#10;        return recipes&#10;    }&#10;&#10;    fun onItemSwiped(position: Int) {&#10;        val recipeId = recipes[position].id.toString()&#10;        onSwipe(recipeId)&#10;        recipes.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import IngredientsAdapter&#10;import android.text.Html&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.databinding.RecipeItemBinding&#10;import com.app.mealplanner.model.Recipe&#10;import com.bumptech.glide.Glide&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import java.io.File&#10;&#10;class RecipeAdapter(private var recipes: MutableList&lt;Recipe&gt;,&#10;                    private val onSwipe: (String) -&gt; Unit,&#10;                    private val onLongClick: ((Recipe) -&gt; Unit)? = null) :&#10;    RecyclerView.Adapter&lt;RecipeAdapter.RecipeViewHolder&gt;() {&#10;&#10;    class RecipeViewHolder(private val binding: RecipeItemBinding) : RecyclerView.ViewHolder(binding.root) {&#10;        val nameTextView: TextView = binding.recipeName&#10;        val recipeImage: ImageView = binding.recipeImage&#10;        //val ingredientsList: TextView = binding.ingredientsList&#10;        val preparationList: TextView = binding.preparationList&#10;        val recipeDescription: TextView = binding.recipeDescription&#10;        val servings: TextView = binding.servings&#10;        val preparationTime: TextView = binding.preparationTime&#10;        //val notes: TextView = binding.notes&#10;        val ingredientsRecyclerView = binding.ingredientsRecyclerView // Expose RecyclerView&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecipeViewHolder {&#10;        val binding = RecipeItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)&#10;        return RecipeViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: RecipeViewHolder, position: Int) {&#10;        val currentRecipe = recipes[position]&#10;        holder.nameTextView.text = currentRecipe.name&#10;&#10;        val ingredientsAdapter = IngredientsAdapter(&#10;            currentRecipe.ingredients?.toMutableList() ?: mutableListOf(),&#10;            R.color.AcardTextColor,&#10;            onDelete = { _ -&gt; },&#10;            onStartDrag = { _ -&gt; },&#10;            showEditIcons = false&#10;        )&#10;        val gridLayoutManager = GridLayoutManager(holder.itemView.context, if ((currentRecipe.ingredients?.size ?: 0) &gt; 5) 2 else 1)&#10;        holder.ingredientsRecyclerView.layoutManager = gridLayoutManager&#10;        holder.ingredientsRecyclerView.adapter = ingredientsAdapter&#10;&#10;        val imagePath = currentRecipe.image&#10;        val imageFile = if (!imagePath.isNullOrEmpty() &amp;&amp; !File(imagePath).isAbsolute) File(holder.itemView.context.filesDir, imagePath) else if (!imagePath.isNullOrEmpty()) File(imagePath) else null&#10;        if (imageFile != null &amp;&amp; imageFile.exists()) {&#10;            Glide.with(holder.itemView.context)&#10;                .load(imageFile)&#10;                .placeholder(android.R.drawable.ic_menu_gallery)&#10;                .error(android.R.drawable.ic_dialog_alert)&#10;                .into(holder.recipeImage)&#10;        } else {&#10;            holder.recipeImage.setImageResource(android.R.drawable.ic_menu_gallery)&#10;        }&#10;&#10;        holder.preparationList.text = currentRecipe.preparations&#10;            ?.mapIndexed { index, preparation -&gt; &quot;${index + 1}. $preparation&quot; }&#10;            ?.joinToString(&quot;\n&quot;) ?: &quot;&quot;&#10;        holder.servings.text = Html.fromHtml(&quot;&lt;b&gt;Portionen:&lt;/b&gt; ${currentRecipe.servings ?: &quot;&lt;b&gt;Portionen:&lt;/b&gt; N/A&quot;}&quot;)&#10;        holder.preparationTime.text = Html.fromHtml(&quot;&lt;b&gt;Zubereitungszeit:&lt;/b&gt; ${currentRecipe.prepTime ?: &quot;&lt;b&gt;Zubereitungszeit:&lt;/b&gt; N/A&quot;}&quot;)&#10;        holder.recipeDescription.text = currentRecipe.description ?: &quot;Keine Beschreibung verfügbar&quot;&#10;        /*if (currentRecipe.notes.isNullOrEmpty()) {&#10;            holder.notes.visibility = View.GONE&#10;            holder.itemView.findViewById&lt;TextView&gt;(R.id.notesLabel).visibility = View.GONE&#10;        } else {&#10;            holder.notes.visibility = View.VISIBLE&#10;            holder.itemView.findViewById&lt;TextView&gt;(R.id.notesLabel).visibility = View.VISIBLE&#10;            holder.notes.text = currentRecipe.notes&#10;        }*/&#10;&#10;        // Add long click listener if provided&#10;        onLongClick?.let { longClickListener -&gt;&#10;            holder.itemView.setOnLongClickListener {&#10;                longClickListener(currentRecipe)&#10;                true&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = recipes.size&#10;&#10;    fun removeRecipe(position: Int) {&#10;        recipes.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;&#10;    fun addRecipe(recipe: Recipe) {&#10;        recipes.add(recipe)&#10;        notifyItemInserted(recipes.size - 1)&#10;    }&#10;&#10;    fun updateRecipes(newRecipes: MutableList&lt;Recipe&gt;) {&#10;        recipes = newRecipes&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    fun removeRecipeAt(position: Int) {&#10;        recipes.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;&#10;    fun getRecipes(): MutableList&lt;Recipe&gt; {&#10;        return recipes&#10;    }&#10;&#10;    fun onItemSwiped(position: Int) {&#10;        val recipeId = recipes[position].id.toString()&#10;        onSwipe(recipeId)&#10;        recipes.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipeOptionsDialogFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipeOptionsDialogFragment.kt" />
              <option name="originalContent" value="package com.app.mealplanner&#10;&#10;import android.app.AlertDialog&#10;import android.app.Dialog&#10;import android.os.Bundle&#10;import androidx.fragment.app.DialogFragment&#10;import com.app.mealplanner.model.Recipe&#10;&#10;class RecipeOptionsDialogFragment(&#10;    private val recipe: Recipe,&#10;    private val onEdit: (Recipe) -&gt; Unit,&#10;    private val onDelete: (Recipe) -&gt; Unit&#10;) : DialogFragment() {&#10;&#10;    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {&#10;        val options = arrayOf(&quot;Bearbeiten&quot;, &quot;Löschen&quot;)&#10;&#10;        return AlertDialog.Builder(requireContext())&#10;            .setTitle(recipe.name)&#10;            .setItems(options) { _, which -&gt;&#10;                when (which) {&#10;                    0 -&gt; onEdit(recipe) // Bearbeiten&#10;                    1 -&gt; confirmDelete() // Löschen mit Bestätigung&#10;                }&#10;            }&#10;            .setNegativeButton(&quot;Abbrechen&quot;, null)&#10;            .create()&#10;    }&#10;&#10;    private fun confirmDelete() {&#10;        AlertDialog.Builder(requireContext())&#10;            .setTitle(&quot;Rezept löschen&quot;)&#10;            .setMessage(&quot;Möchten Sie das Rezept \&quot;${recipe.name}\&quot; wirklich löschen?&quot;)&#10;            .setPositiveButton(&quot;Löschen&quot;) { _, _ -&gt;&#10;                onDelete(recipe)&#10;            }&#10;            .setNegativeButton(&quot;Abbrechen&quot;, null)&#10;            .show()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.app.AlertDialog&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import com.google.android.material.bottomsheet.BottomSheetDialogFragment&#10;import com.app.mealplanner.databinding.DialogRecipeOptionsBinding&#10;import com.app.mealplanner.model.Recipe&#10;&#10;class RecipeOptionsDialogFragment(&#10;    private val recipe: Recipe,&#10;    private val onEdit: (Recipe) -&gt; Unit,&#10;    private val onDelete: (Recipe) -&gt; Unit&#10;) : BottomSheetDialogFragment() {&#10;&#10;    private var _binding: DialogRecipeOptionsBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        _binding = DialogRecipeOptionsBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        // Set recipe title&#10;        binding.recipeTitle.text = recipe.name&#10;&#10;        binding.btnEdit.setOnClickListener {&#10;            dismiss()&#10;            onEdit(recipe)&#10;        }&#10;&#10;        binding.btnDelete.setOnClickListener {&#10;            dismiss()&#10;            confirmDelete()&#10;        }&#10;    }&#10;&#10;    private fun confirmDelete() {&#10;        AlertDialog.Builder(requireContext())&#10;            .setTitle(&quot;Rezept löschen&quot;)&#10;            .setMessage(&quot;Möchten Sie das Rezept \&quot;${recipe.name}\&quot; wirklich löschen?&quot;)&#10;            .setPositiveButton(&quot;Löschen&quot;) { _, _ -&gt;&#10;                onDelete(recipe)&#10;            }&#10;            .setNegativeButton(&quot;Abbrechen&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipesFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipesFragment.kt" />
              <option name="originalContent" value="package com.app.mealplanner&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.ItemTouchHelper&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;&#10;&#10;class RecipesFragment : Fragment(R.layout.fragment_recipes) {&#10;&#10;    private lateinit var adapter: RecipeAdapter&#10;&#10;    companion object {&#10;        private var sessionRecipes: MutableList&lt;Recipe&gt;? = null // Speichert die Reihenfolge der Rezepte während der Session&#10;        private val swipedRecipes = mutableListOf&lt;Int&gt;() // Speichert dauerhaft während der App-Sitzung&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        copyRecipesToExternalStorage()&#10;        mergeRecipesFromAssetsAndInternalStorage()&#10;&#10;        val recyclerView: RecyclerView = view.findViewById(R.id.recyclerViewRecipes)&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        adapter = RecipeAdapter(mutableListOf&lt;Recipe&gt;()) { recipeId -&gt;&#10;            val recipe = loadRecipes().find { it.id.toString() == recipeId }&#10;            if (recipe != null) {&#10;                onRecipeSwiped(recipe)&#10;            }&#10;        }&#10;        recyclerView.adapter = adapter&#10;&#10;        // Rezepte nur beim ersten Aufruf mischen&#10;        if (sessionRecipes == null) {&#10;            sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;        }&#10;&#10;        val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;        adapter.updateRecipes(filteredRecipes)&#10;&#10;        // Floating Action Button&#10;        val fabAddRecipe: View = view.findViewById(R.id.fabAddRecipe)&#10;        fabAddRecipe.setOnClickListener {&#10;            showAddRecipeMenu()&#10;        }&#10;&#10;        // Add swipe functionality&#10;        val itemTouchHelper = ItemTouchHelper(object :&#10;            ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                return false // No move functionality needed&#10;            }&#10;&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {&#10;                val position = viewHolder.adapterPosition&#10;                val recipe = adapter.getRecipes()[position]&#10;&#10;                if (direction == ItemTouchHelper.LEFT) {&#10;                    // Nach links wischen: Nur für die Session ausblenden&#10;                    swipedRecipes.add(recipe.id)&#10;                    val updatedRecipes = filterRecipes(sessionRecipes!!)&#10;                    adapter.updateRecipes(updatedRecipes)&#10;                } else if (direction == ItemTouchHelper.RIGHT) {&#10;                    // Nach rechts wischen: Zu den Favoriten hinzufügen&#10;                    onRecipeSwiped(recipe)&#10;                }&#10;            }&#10;        })&#10;        itemTouchHelper.attachToRecyclerView(recyclerView)&#10;    }&#10;&#10;    private fun showAddRecipeMenu() {&#10;        val menuDialog = AddRecipeMenuDialogFragment(&#10;            onManual = {&#10;                showAddRecipeDialog()&#10;            },&#10;            onInstagram = {&#10;                ImportInstagramDialogFragment().show(parentFragmentManager, &quot;ImportInstagramDialog&quot;)&#10;            },&#10;            onWebsite = {&#10;                ImportWebsiteDialogFragment().show(parentFragmentManager, &quot;ImportWebsiteDialog&quot;)&#10;            }&#10;        )&#10;        menuDialog.show(parentFragmentManager, &quot;AddRecipeMenuDialog&quot;)&#10;    }&#10;&#10;    private fun showAddRecipeDialog() {&#10;        val dialog = AddRecipeDialogFragment()&#10;        dialog.setOnRecipeAddedListener(object : AddRecipeDialogFragment.OnRecipeAddedListener {&#10;            override fun onRecipeAdded(recipe: Recipe) {&#10;                Log.d(&quot;RecipesFragment&quot;, &quot;New recipe added: ${recipe.name} with ID: ${recipe.id}&quot;)&#10;&#10;                // Session-Rezepte initialisieren falls noch nicht geschehen&#10;                if (sessionRecipes == null) {&#10;                    sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;                    Log.d(&quot;RecipesFragment&quot;, &quot;Session recipes initialized with ${sessionRecipes!!.size} recipes&quot;)&#10;                }&#10;&#10;                // Neues Rezept an den Anfang der Session-Liste setzen&#10;                sessionRecipes!!.add(0, recipe)&#10;                Log.d(&quot;RecipesFragment&quot;, &quot;Recipe added to sessionRecipes. New size: ${sessionRecipes!!.size}&quot;)&#10;&#10;                // Gefilterte Rezepte aktualisieren und anzeigen&#10;                val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;                Log.d(&quot;RecipesFragment&quot;, &quot;Filtered recipes size: ${filteredRecipes.size}&quot;)&#10;&#10;                adapter.updateRecipes(filteredRecipes)&#10;                Log.d(&quot;RecipesFragment&quot;, &quot;Adapter updated with ${filteredRecipes.size} recipes&quot;)&#10;&#10;                // Zur obersten Position scrollen, um das neue Rezept zu zeigen&#10;                val recyclerView: RecyclerView = requireView().findViewById(R.id.recyclerViewRecipes)&#10;                recyclerView.scrollToPosition(0)&#10;                Log.d(&quot;RecipesFragment&quot;, &quot;Scrolled to position 0&quot;)&#10;            }&#10;        })&#10;        dialog.show(parentFragmentManager, &quot;AddRecipeDialog&quot;)&#10;    }&#10;&#10;    private fun loadRecipes(): MutableList&lt;Recipe&gt; {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        return if (recipesFile.exists()) {&#10;            try {&#10;                val json = recipesFile.readText()&#10;                val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;                val recipes: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;&#10;                // Entferne die Ersetzung des Bildpfads durch den absoluten Pfad!&#10;                recipes.forEach { recipe -&gt;&#10;                    if (recipe.image != null) {&#10;                        val imageFile = File(requireContext().filesDir, recipe.image)&#10;                        if (!imageFile.exists()) {&#10;                            recipe.image = null // Reset if the image file is missing&#10;                        }&#10;                    }&#10;                }&#10;&#10;                recipes&#10;            } catch (e: Exception) {&#10;                e.printStackTrace()&#10;                mutableListOf()&#10;            }&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    private fun loadFavorites(): MutableList&lt;Recipe&gt; {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        return if (favoritesFile.exists()) {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    private fun filterRecipes(recipes: MutableList&lt;Recipe&gt;): MutableList&lt;Recipe&gt; {&#10;        val favoriteIds = loadFavorites().map { it.id }&#10;        return recipes.filter { it.id !in swipedRecipes &amp;&amp; it.id !in favoriteIds }.toMutableList()&#10;    }&#10;&#10;    private fun onRecipeSwiped(recipe: Recipe) {&#10;        swipedRecipes.add(recipe.id) // Hide recipe for the session&#10;        val updatedRecipes = filterRecipes(sessionRecipes ?: loadRecipes())&#10;        adapter.updateRecipes(updatedRecipes)&#10;&#10;        // Add the swiped recipe to favorites&#10;        val favorites = loadFavorites()&#10;        if (!favorites.any { it.id == recipe.id }) {&#10;            favorites.add(recipe)&#10;            saveFavorites(favorites)&#10;        }&#10;    }&#10;&#10;    private fun saveFavorites(favorites: MutableList&lt;Recipe&gt;) {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        val json = Gson().toJson(favorites)&#10;        favoritesFile.writeText(json)&#10;    }&#10;&#10;    fun addFavorite(recipe: Recipe) {&#10;        val favorites = loadFavorites()&#10;        if (!favorites.any { it.id == recipe.id }) {&#10;            favorites.add(recipe)&#10;            saveFavorites(favorites) // Save updated favorites&#10;        }&#10;    }&#10;&#10;    fun removeFavorite(recipe: Recipe) {&#10;        val favorites = loadFavorites()&#10;        if (favorites.any { it.id == recipe.id }) {&#10;            favorites.removeIf { it.id == recipe.id }&#10;            saveFavorites(favorites) // Save updated favorites&#10;        }&#10;    }&#10;&#10;    private fun mergeRecipesFromAssetsAndInternalStorage() {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val imagesDir = File(requireContext().filesDir, &quot;images&quot;)&#10;&#10;        // Ensure the images directory exists&#10;        if (!imagesDir.exists()) {&#10;            imagesDir.mkdir()&#10;        }&#10;&#10;        // Copy recipes from assets&#10;        val assetRecipes: MutableList&lt;Recipe&gt; = try {&#10;            val json = requireContext().assets.open(&quot;recipes.json&quot;).bufferedReader().use { it.readText() }&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            mutableListOf()&#10;        }&#10;&#10;        // Copy images from assets to internal storage&#10;        try {&#10;            requireContext().assets.list(&quot;images&quot;)?.forEach { imageName -&gt;&#10;                val inputStream = requireContext().assets.open(&quot;images/$imageName&quot;)&#10;                val outputFile = File(imagesDir, imageName)&#10;                if (!outputFile.exists()) {&#10;                    inputStream.use { input -&gt;&#10;                        outputFile.outputStream().use { output -&gt;&#10;                            input.copyTo(output)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;        }&#10;&#10;        // Check if the internal recipes file exists&#10;        if (!recipesFile.exists()) {&#10;            // Save the asset recipes to internal storage if the file doesn't exist&#10;            recipesFile.writeText(Gson().toJson(assetRecipes))&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;Internal recipes.json created from assets.&quot;)&#10;            return&#10;        }&#10;&#10;        // Load recipes from internal storage&#10;        val internalRecipes: MutableList&lt;Recipe&gt; = try {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            mutableListOf()&#10;        }&#10;&#10;        // Merge recipes, avoiding duplicates by `id`&#10;        val mergedRecipes = (internalRecipes + assetRecipes).distinctBy { it.id }.toMutableList()&#10;&#10;        // Save merged recipes back to internal storage&#10;        recipesFile.writeText(Gson().toJson(mergedRecipes))&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Internal recipes.json updated with merged recipes.&quot;)&#10;    }&#10;&#10;    private fun copyRecipesToExternalStorage() {&#10;        val internalFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val externalFile = File(requireContext().getExternalFilesDir(null), &quot;recipes.json&quot;)&#10;        if (internalFile.exists()) {&#10;            internalFile.copyTo(externalFile, overwrite = true)&#10;            Log.d(&#10;                &quot;RecipesFragment&quot;,&#10;                &quot;recipes.json copied to external storage: ${externalFile.absolutePath}&quot;&#10;            )&#10;        } else {&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;recipes.json file does not exist in internal storage.&quot;)&#10;        }&#10;    }&#10;&#10;    fun addNewRecipeToTop(recipe: Recipe) {&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;addNewRecipeToTop called with recipe: ${recipe.name} ID: ${recipe.id}&quot;)&#10;&#10;        // Session-Rezepte initialisieren falls noch nicht geschehen&#10;        if (sessionRecipes == null) {&#10;            sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;Session recipes initialized with ${sessionRecipes!!.size} recipes&quot;)&#10;        }&#10;&#10;        // Neues Rezept an den Anfang der Session-Liste setzen&#10;        sessionRecipes!!.add(0, recipe)&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Recipe added to sessionRecipes. New size: ${sessionRecipes!!.size}&quot;)&#10;&#10;        // Gefilterte Rezepte aktualisieren und anzeigen&#10;        val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Filtered recipes size: ${filteredRecipes.size}&quot;)&#10;&#10;        adapter.updateRecipes(filteredRecipes)&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Adapter updated with ${filteredRecipes.size} recipes&quot;)&#10;&#10;        // Zur obersten Position scrollen, um das neue Rezept zu zeigen&#10;        val recyclerView: RecyclerView = requireView().findViewById(R.id.recyclerViewRecipes)&#10;        recyclerView.scrollToPosition(0)&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Scrolled to position 0&quot;)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.ItemTouchHelper&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;&#10;&#10;class RecipesFragment : Fragment(R.layout.fragment_recipes) {&#10;&#10;    private lateinit var adapter: RecipeAdapter&#10;&#10;    companion object {&#10;        private var sessionRecipes: MutableList&lt;Recipe&gt;? = null // Speichert die Reihenfolge der Rezepte während der Session&#10;        private val swipedRecipes = mutableListOf&lt;Int&gt;() // Speichert dauerhaft während der App-Sitzung&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        copyRecipesToExternalStorage()&#10;        mergeRecipesFromAssetsAndInternalStorage()&#10;&#10;        val recyclerView: RecyclerView = view.findViewById(R.id.recyclerViewRecipes)&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        adapter = RecipeAdapter(&#10;            mutableListOf&lt;Recipe&gt;(),&#10;            onSwipe = { recipeId -&gt;&#10;                val recipe = loadRecipes().find { it.id.toString() == recipeId }&#10;                if (recipe != null) {&#10;                    onRecipeSwiped(recipe)&#10;                }&#10;            },&#10;            onLongClick = { recipe -&gt; showRecipeOptions(recipe) } // Add long click handler&#10;        )&#10;        recyclerView.adapter = adapter&#10;&#10;        // Rezepte nur beim ersten Aufruf mischen&#10;        if (sessionRecipes == null) {&#10;            sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;        }&#10;&#10;        val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;        adapter.updateRecipes(filteredRecipes)&#10;&#10;        // Floating Action Button&#10;        val fabAddRecipe: View = view.findViewById(R.id.fabAddRecipe)&#10;        fabAddRecipe.setOnClickListener {&#10;            showAddRecipeMenu()&#10;        }&#10;&#10;        // Add swipe functionality&#10;        val itemTouchHelper = ItemTouchHelper(object :&#10;            ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                return false // No move functionality needed&#10;            }&#10;&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {&#10;                val position = viewHolder.adapterPosition&#10;                val recipe = adapter.getRecipes()[position]&#10;&#10;                if (direction == ItemTouchHelper.LEFT) {&#10;                    // Nach links wischen: Nur für die Session ausblenden&#10;                    swipedRecipes.add(recipe.id)&#10;                    val updatedRecipes = filterRecipes(sessionRecipes!!)&#10;                    adapter.updateRecipes(updatedRecipes)&#10;                } else if (direction == ItemTouchHelper.RIGHT) {&#10;                    // Nach rechts wischen: Zu den Favoriten hinzufügen&#10;                    onRecipeSwiped(recipe)&#10;                }&#10;            }&#10;        })&#10;        itemTouchHelper.attachToRecyclerView(recyclerView)&#10;    }&#10;&#10;    private fun showAddRecipeMenu() {&#10;        val menuDialog = AddRecipeMenuDialogFragment(&#10;            onManual = {&#10;                showAddRecipeDialog()&#10;            },&#10;            onInstagram = {&#10;                ImportInstagramDialogFragment().show(parentFragmentManager, &quot;ImportInstagramDialog&quot;)&#10;            },&#10;            onWebsite = {&#10;                ImportWebsiteDialogFragment().show(parentFragmentManager, &quot;ImportWebsiteDialog&quot;)&#10;            }&#10;        )&#10;        menuDialog.show(parentFragmentManager, &quot;AddRecipeMenuDialog&quot;)&#10;    }&#10;&#10;    private fun showAddRecipeDialog() {&#10;        val dialog = AddRecipeDialogFragment()&#10;        dialog.setOnRecipeAddedListener(object : AddRecipeDialogFragment.OnRecipeAddedListener {&#10;            override fun onRecipeAdded(recipe: Recipe) {&#10;                Log.d(&quot;RecipesFragment&quot;, &quot;New recipe added: ${recipe.name} with ID: ${recipe.id}&quot;)&#10;&#10;                // Session-Rezepte initialisieren falls noch nicht geschehen&#10;                if (sessionRecipes == null) {&#10;                    sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;                    Log.d(&quot;RecipesFragment&quot;, &quot;Session recipes initialized with ${sessionRecipes!!.size} recipes&quot;)&#10;                }&#10;&#10;                // Neues Rezept an den Anfang der Session-Liste setzen&#10;                sessionRecipes!!.add(0, recipe)&#10;                Log.d(&quot;RecipesFragment&quot;, &quot;Recipe added to sessionRecipes. New size: ${sessionRecipes!!.size}&quot;)&#10;&#10;                // Gefilterte Rezepte aktualisieren und anzeigen&#10;                val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;                Log.d(&quot;RecipesFragment&quot;, &quot;Filtered recipes size: ${filteredRecipes.size}&quot;)&#10;&#10;                adapter.updateRecipes(filteredRecipes)&#10;                Log.d(&quot;RecipesFragment&quot;, &quot;Adapter updated with ${filteredRecipes.size} recipes&quot;)&#10;&#10;                // Zur obersten Position scrollen, um das neue Rezept zu zeigen&#10;                val recyclerView: RecyclerView = requireView().findViewById(R.id.recyclerViewRecipes)&#10;                recyclerView.scrollToPosition(0)&#10;                Log.d(&quot;RecipesFragment&quot;, &quot;Scrolled to position 0&quot;)&#10;            }&#10;        })&#10;        dialog.show(parentFragmentManager, &quot;AddRecipeDialog&quot;)&#10;    }&#10;&#10;    private fun loadRecipes(): MutableList&lt;Recipe&gt; {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        return if (recipesFile.exists()) {&#10;            try {&#10;                val json = recipesFile.readText()&#10;                val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;                val recipes: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;&#10;                // Entferne die Ersetzung des Bildpfads durch den absoluten Pfad!&#10;                recipes.forEach { recipe -&gt;&#10;                    if (recipe.image != null) {&#10;                        val imageFile = File(requireContext().filesDir, recipe.image)&#10;                        if (!imageFile.exists()) {&#10;                            recipe.image = null // Reset if the image file is missing&#10;                        }&#10;                    }&#10;                }&#10;&#10;                recipes&#10;            } catch (e: Exception) {&#10;                e.printStackTrace()&#10;                mutableListOf()&#10;            }&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    private fun loadFavorites(): MutableList&lt;Recipe&gt; {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        return if (favoritesFile.exists()) {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    private fun filterRecipes(recipes: MutableList&lt;Recipe&gt;): MutableList&lt;Recipe&gt; {&#10;        val favoriteIds = loadFavorites().map { it.id }&#10;        return recipes.filter { it.id !in swipedRecipes &amp;&amp; it.id !in favoriteIds }.toMutableList()&#10;    }&#10;&#10;    private fun onRecipeSwiped(recipe: Recipe) {&#10;        swipedRecipes.add(recipe.id) // Hide recipe for the session&#10;        val updatedRecipes = filterRecipes(sessionRecipes ?: loadRecipes())&#10;        adapter.updateRecipes(updatedRecipes)&#10;&#10;        // Add the swiped recipe to favorites&#10;        val favorites = loadFavorites()&#10;        if (!favorites.any { it.id == recipe.id }) {&#10;            favorites.add(recipe)&#10;            saveFavorites(favorites)&#10;        }&#10;    }&#10;&#10;    private fun saveFavorites(favorites: MutableList&lt;Recipe&gt;) {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        val json = Gson().toJson(favorites)&#10;        favoritesFile.writeText(json)&#10;    }&#10;&#10;    fun addFavorite(recipe: Recipe) {&#10;        val favorites = loadFavorites()&#10;        if (!favorites.any { it.id == recipe.id }) {&#10;            favorites.add(recipe)&#10;            saveFavorites(favorites) // Save updated favorites&#10;        }&#10;    }&#10;&#10;    fun removeFavorite(recipe: Recipe) {&#10;        val favorites = loadFavorites()&#10;        if (favorites.any { it.id == recipe.id }) {&#10;            favorites.removeIf { it.id == recipe.id }&#10;            saveFavorites(favorites) // Save updated favorites&#10;        }&#10;    }&#10;&#10;    private fun mergeRecipesFromAssetsAndInternalStorage() {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val imagesDir = File(requireContext().filesDir, &quot;images&quot;)&#10;&#10;        // Ensure the images directory exists&#10;        if (!imagesDir.exists()) {&#10;            imagesDir.mkdir()&#10;        }&#10;&#10;        // Copy recipes from assets&#10;        val assetRecipes: MutableList&lt;Recipe&gt; = try {&#10;            val json = requireContext().assets.open(&quot;recipes.json&quot;).bufferedReader().use { it.readText() }&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            mutableListOf()&#10;        }&#10;&#10;        // Copy images from assets to internal storage&#10;        try {&#10;            requireContext().assets.list(&quot;images&quot;)?.forEach { imageName -&gt;&#10;                val inputStream = requireContext().assets.open(&quot;images/$imageName&quot;)&#10;                val outputFile = File(imagesDir, imageName)&#10;                if (!outputFile.exists()) {&#10;                    inputStream.use { input -&gt;&#10;                        outputFile.outputStream().use { output -&gt;&#10;                            input.copyTo(output)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;        }&#10;&#10;        // Check if the internal recipes file exists&#10;        if (!recipesFile.exists()) {&#10;            // Save the asset recipes to internal storage if the file doesn't exist&#10;            recipesFile.writeText(Gson().toJson(assetRecipes))&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;Internal recipes.json created from assets.&quot;)&#10;            return&#10;        }&#10;&#10;        // Load recipes from internal storage&#10;        val internalRecipes: MutableList&lt;Recipe&gt; = try {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            mutableListOf()&#10;        }&#10;&#10;        // Merge recipes, avoiding duplicates by `id`&#10;        val mergedRecipes = (internalRecipes + assetRecipes).distinctBy { it.id }.toMutableList()&#10;&#10;        // Save merged recipes back to internal storage&#10;        recipesFile.writeText(Gson().toJson(mergedRecipes))&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Internal recipes.json updated with merged recipes.&quot;)&#10;    }&#10;&#10;    private fun copyRecipesToExternalStorage() {&#10;        val internalFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val externalFile = File(requireContext().getExternalFilesDir(null), &quot;recipes.json&quot;)&#10;        if (internalFile.exists()) {&#10;            internalFile.copyTo(externalFile, overwrite = true)&#10;            Log.d(&#10;                &quot;RecipesFragment&quot;,&#10;                &quot;recipes.json copied to external storage: ${externalFile.absolutePath}&quot;&#10;            )&#10;        } else {&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;recipes.json file does not exist in internal storage.&quot;)&#10;        }&#10;    }&#10;&#10;    fun addNewRecipeToTop(recipe: Recipe) {&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;addNewRecipeToTop called with recipe: ${recipe.name} ID: ${recipe.id}&quot;)&#10;&#10;        // Session-Rezepte initialisieren falls noch nicht geschehen&#10;        if (sessionRecipes == null) {&#10;            sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;Session recipes initialized with ${sessionRecipes!!.size} recipes&quot;)&#10;        }&#10;&#10;        // Neues Rezept an den Anfang der Session-Liste setzen&#10;        sessionRecipes!!.add(0, recipe)&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Recipe added to sessionRecipes. New size: ${sessionRecipes!!.size}&quot;)&#10;&#10;        // Gefilterte Rezepte aktualisieren und anzeigen&#10;        val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Filtered recipes size: ${filteredRecipes.size}&quot;)&#10;&#10;        adapter.updateRecipes(filteredRecipes)&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Adapter updated with ${filteredRecipes.size} recipes&quot;)&#10;&#10;        // Zur obersten Position scrollen, um das neue Rezept zu zeigen&#10;        val recyclerView: RecyclerView = requireView().findViewById(R.id.recyclerViewRecipes)&#10;        recyclerView.scrollToPosition(0)&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Scrolled to position 0&quot;)&#10;    }&#10;&#10;    private fun showRecipeOptions(recipe: Recipe) {&#10;        val dialog = RecipeOptionsDialogFragment(&#10;            recipe = recipe,&#10;            onEdit = { recipeToEdit -&gt;&#10;                showEditRecipeDialog(recipeToEdit)&#10;            },&#10;            onDelete = { recipeToDelete -&gt;&#10;                deleteRecipe(recipeToDelete)&#10;            }&#10;        )&#10;        dialog.show(parentFragmentManager, &quot;RecipeOptionsDialog&quot;)&#10;    }&#10;&#10;    private fun showEditRecipeDialog(recipe: Recipe) {&#10;        val dialog = AddRecipeDialogFragment()&#10;        dialog.setRecipeToEdit(recipe) // Assume this method exists to pre-fill the dialog&#10;        dialog.setOnRecipeAddedListener(object : AddRecipeDialogFragment.OnRecipeAddedListener {&#10;            override fun onRecipeAdded(updatedRecipe: Recipe) {&#10;                updateRecipeInList(updatedRecipe)&#10;            }&#10;        })&#10;        dialog.show(parentFragmentManager, &quot;EditRecipeDialog&quot;)&#10;    }&#10;&#10;    private fun updateRecipeInList(updatedRecipe: Recipe) {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        if (recipesFile.exists()) {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            val recipes: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;&#10;            // Find and update the recipe&#10;            val index = recipes.indexOfFirst { it.id == updatedRecipe.id }&#10;            if (index != -1) {&#10;                recipes[index] = updatedRecipe&#10;                recipesFile.writeText(Gson().toJson(recipes))&#10;&#10;                // Update session recipes if they exist&#10;                sessionRecipes?.let { sessionList -&gt;&#10;                    val sessionIndex = sessionList.indexOfFirst { it.id == updatedRecipe.id }&#10;                    if (sessionIndex != -1) {&#10;                        sessionList[sessionIndex] = updatedRecipe&#10;                    }&#10;                }&#10;&#10;                // Update the UI&#10;                val filteredRecipes = filterRecipes(sessionRecipes ?: loadRecipes())&#10;                adapter.updateRecipes(filteredRecipes)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun deleteRecipe(recipe: Recipe) {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        if (recipesFile.exists()) {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            val recipes: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;&#10;            // Remove from recipes file&#10;            recipes.removeIf { it.id == recipe.id }&#10;            recipesFile.writeText(Gson().toJson(recipes))&#10;&#10;            // Remove from session recipes if they exist&#10;            sessionRecipes?.removeIf { it.id == recipe.id }&#10;&#10;            // Update the UI&#10;            val filteredRecipes = filterRecipes(sessionRecipes ?: loadRecipes())&#10;            adapter.updateRecipes(filteredRecipes)&#10;&#10;            // Also remove from favorites if it exists there&#10;            removeFavorite(recipe)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_delete.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_delete.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z&quot;/&gt;&#10;&lt;/vector&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_edit.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_edit.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M3,17.25V21h3.75L17.81,9.94l-3.75,-3.75L3,17.25zM20.71,7.04c0.39,-0.39 0.39,-1.02 0,-1.41l-2.34,-2.34c-0.39,-0.39 -1.02,-0.39 -1.41,0l-1.83,1.83 3.75,3.75l1.83,-1.83z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/rounded_red_button.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/rounded_red_button.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#F44336&quot; /&gt;&#10;    &lt;corners android:radius=&quot;24dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_image_crop.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_image_crop.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;#000000&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/imageView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_above=&quot;@+id/buttonContainer&quot;&#10;        android:scaleType=&quot;centerInside&quot; /&gt;&#10;&#10;    &lt;com.app.mealplanner.CropOverlayView&#10;        android:id=&quot;@+id/cropOverlay&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_above=&quot;@+id/buttonContainer&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/buttonContainer&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_alignParentBottom=&quot;true&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:background=&quot;#CC000000&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnCancel&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            android:text=&quot;Abbrechen&quot;&#10;            android:textColor=&quot;#fff&quot;&#10;            android:background=&quot;@drawable/rounded_red_button&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnCrop&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:text=&quot;Zuschneiden&quot;&#10;            android:textColor=&quot;#fff&quot;&#10;            android:background=&quot;@drawable/rounded_orange_button&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/RelativeLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_recipe_options.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_recipe_options.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@android:color/transparent&quot;&#10;    android:padding=&quot;24dp&quot;&#10;    android:gravity=&quot;center&quot;&gt;&#10;&#10;    &lt;!-- Titel mit Rezeptname --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/recipeTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Rezept Optionen&quot;&#10;        android:textColor=&quot;@color/AcardTextColor&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:fontFamily=&quot;sans-serif-medium&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;    &lt;!-- Bearbeiten Button --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/btnEdit&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;48dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:layout_marginBottom=&quot;20dp&quot;&#10;        android:background=&quot;@drawable/rounded_orange_button&quot;&#10;        android:paddingStart=&quot;32dp&quot;&#10;        android:paddingEnd=&quot;32dp&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;24dp&quot;&#10;            android:layout_height=&quot;24dp&quot;&#10;            android:src=&quot;@drawable/ic_edit&quot;&#10;            android:layout_marginEnd=&quot;12dp&quot;&#10;            app:tint=&quot;#fff&quot;&#10;            xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Bearbeiten&quot;&#10;            android:textColor=&quot;#fff&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:fontFamily=&quot;sans-serif-medium&quot;&#10;            android:gravity=&quot;center&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Löschen Button --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/btnDelete&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;48dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:background=&quot;@drawable/rounded_red_button&quot;&#10;        android:paddingStart=&quot;32dp&quot;&#10;        android:paddingEnd=&quot;32dp&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;24dp&quot;&#10;            android:layout_height=&quot;24dp&quot;&#10;            android:src=&quot;@drawable/ic_delete&quot;&#10;            android:layout_marginEnd=&quot;12dp&quot;&#10;            app:tint=&quot;#fff&quot;&#10;            xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Löschen&quot;&#10;            android:textColor=&quot;#fff&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:fontFamily=&quot;sans-serif-medium&quot;&#10;            android:gravity=&quot;center&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# MealPlanner&#10;&#10;MealPlanner ist eine moderne Android-App, mit der du deine Lieblingsrezepte einfach verwalten, planen und teilen kannst. Die App bietet eine intuitive Benutzeroberfläche zum Hinzufügen, Bearbeiten und Anzeigen von Rezepten – inklusive Zutaten, Zubereitungsschritten, Bildern, Portionsangabe und Notizen.&#10;&#10;## Features&#10;&#10;- **Rezepte hinzufügen und bearbeiten:** Erstelle neue Rezepte mit Titel, Beschreibung, Bild, Zutaten, Zubereitungsschritten, Portionen, Zubereitungszeit und Notizen.&#10;- **Dynamische Zutaten- und Zubereitungsliste:** Füge Zutaten und Schritte flexibel hinzu, verschiebe sie per Drag &amp; Drop und lösche sie bei Bedarf.&#10;- **Rezept-Detailansicht:** Zeigt alle Informationen zu einem Rezept übersichtlich an – inklusive Portionsgröße und Notizen.&#10;- **Favoriten:** Markiere Rezepte als Favoriten und greife schnell darauf zu.&#10;- **Bildergalerie:** Lade eigene Fotos zu deinen Rezepten hoch.&#10;- **Intuitive Bedienung:** Die App ist für Smartphones optimiert und bietet ein modernes, klares Design.&#10;&#10;## Installation&#10;&#10;1. Klone das Repository:&#10;   ```&#10;   git clone &lt;repo-url&gt;&#10;   ```&#10;2. Öffne das Projekt in Android Studio.&#10;3. Baue und starte die App auf deinem Gerät oder Emulator.&#10;&#10;## Screenshots&#10;![Startbildschirm](screenshots/screenshot1.png)&#10;![Rezept hinzufügen](screenshots/screenshot2.png)&#10;![Favoriten](screenshots/screenshot3.png)&#10;![Rezept Details](screenshots/screenshot4.png)&#10;&#10;## Projektstruktur&#10;&#10;- **app/src/main/java/com/app/mealplanner/**  – Hauptlogik, Fragments, Adapter und Models&#10;- **app/src/main/res/layout/**  – XML-Layouts für die verschiedenen Ansichten&#10;- **app/src/main/res/drawable/**  – Icons und Hintergründe&#10;- **app/src/main/res/values/**  – Farben, Strings und Styles&#10;&#10;## Wie funktioniert der Code?&#10;&#10;Die App ist modular aufgebaut und nutzt moderne Android-Architekturprinzipien:&#10;&#10;- **Fragments:** Die Hauptansichten (z.B. Rezeptübersicht, Rezeptdetails, Dialog zum Hinzufügen) sind als Fragments umgesetzt und werden dynamisch angezeigt.&#10;- **Adapter:** Zutaten und Zubereitungsschritte werden über RecyclerView-Adapter verwaltet. Die Adapter unterstützen Drag &amp; Drop und das Löschen von Einträgen.&#10;- **Model-Klassen:** Rezepte werden als eigene Model-Klasse (Recipe) gespeichert. Die Daten werden als JSON-Dateien im internen Speicher abgelegt und beim Start geladen.&#10;- **Dialoge:** Neue Rezepte werden über einen Dialog (AddRecipeDialogFragment) hinzugefügt. Die Eingabefelder sind dynamisch und die Listen werden direkt aktualisiert.&#10;- **Favoriten:** Favorisierte Rezepte werden in einer eigenen Datei gespeichert und können schnell angezeigt werden.&#10;- **Bilder:** Bilder werden im internen Speicher abgelegt und als relativer Pfad im Rezept gespeichert.&#10;- **UI/UX:** Die App verwendet ein modernes, responsives Layout mit Material Design Komponenten. Der &quot;Rezept hinzufügen&quot;-Button bleibt immer sichtbar und wird bei geöffneter Tastatur ausgeblendet.&#10;&#10;Die Kommunikation zwischen den Komponenten erfolgt über Listener und direkte Datenübergabe. Die App ist so gestaltet, dass sie einfach erweitert und angepasst werden kann.&#10;&#10;## Lizenz&#10;&#10;Dieses Projekt steht unter der MIT-Lizenz.&#10;" />
              <option name="updatedContent" value="# MealPlanner&#10;&#10;MealPlanner ist eine moderne Android-App, mit der du deine Lieblingsrezepte einfach verwalten, planen und teilen kannst. Die App bietet eine intuitive Benutzeroberfläche zum Hinzufügen, Bearbeiten und Anzeigen von Rezepten – inklusive Zutaten, Zubereitungsschritten, Bildern, Portionsangabe und Notizen.&#10;&#10;## Features&#10;&#10;- **Rezepte hinzufügen und bearbeiten:** Erstelle neue Rezepte mit Titel, Beschreibung, Bild, Zutaten, Zubereitungsschritten, Portionen, Zubereitungszeit und Notizen.&#10;- **Dynamische Zutaten- und Zubereitungsliste:** Füge Zutaten und Schritte flexibel hinzu, verschiebe sie per Drag &amp; Drop und lösche sie bei Bedarf.&#10;- **Rezept-Detailansicht:** Zeigt alle Informationen zu einem Rezept übersichtlich an – inklusive Portionsgröße und Notizen.&#10;- **Favoriten:** Markiere Rezepte als Favoriten und greife schnell darauf zu.&#10;- **Bildergalerie:** Lade eigene Fotos zu deinen Rezepten hoch.&#10;- **Intuitive Bedienung:** Die App ist für Smartphones optimiert und bietet ein modernes, klares Design.&#10;&#10;## Installation&#10;&#10;1. Klone das Repository:&#10;   ```&#10;   git clone &lt;repo-url&gt;&#10;   ```&#10;2. Öffne das Projekt in Android Studio.&#10;3. Baue und starte die App auf deinem Gerät oder Emulator.&#10;&#10;## Screenshots&#10;&lt;img src=&quot;screenshots/screenshot1.png&quot; alt=&quot;Startbildschirm&quot; width=&quot;300&quot;/&gt;&#10;&lt;img src=&quot;screenshots/screenshot2.png&quot; alt=&quot;Rezept hinzufügen&quot; width=&quot;300&quot;/&gt;&#10;&lt;img src=&quot;screenshots/screenshot3.png&quot; alt=&quot;Favoriten&quot; width=&quot;300&quot;/&gt;&#10;&lt;img src=&quot;screenshots/screenshot4.png&quot; alt=&quot;Rezept Details&quot; width=&quot;300&quot;/&gt;&#10;&#10;## Projektstruktur&#10;&#10;- **app/src/main/java/com/app/mealplanner/**  – Hauptlogik, Fragments, Adapter und Models&#10;- **app/src/main/res/layout/**  – XML-Layouts für die verschiedenen Ansichten&#10;- **app/src/main/res/drawable/**  – Icons und Hintergründe&#10;- **app/src/main/res/values/**  – Farben, Strings und Styles&#10;&#10;## Wie funktioniert der Code?&#10;&#10;Die App ist modular aufgebaut und nutzt moderne Android-Architekturprinzipien:&#10;&#10;- **Fragments:** Die Hauptansichten (z.B. Rezeptübersicht, Rezeptdetails, Dialog zum Hinzufügen) sind als Fragments umgesetzt und werden dynamisch angezeigt.&#10;- **Adapter:** Zutaten und Zubereitungsschritte werden über RecyclerView-Adapter verwaltet. Die Adapter unterstützen Drag &amp; Drop und das Löschen von Einträgen.&#10;- **Model-Klassen:** Rezepte werden als eigene Model-Klasse (Recipe) gespeichert. Die Daten werden als JSON-Dateien im internen Speicher abgelegt und beim Start geladen.&#10;- **Dialoge:** Neue Rezepte werden über einen Dialog (AddRecipeDialogFragment) hinzugefügt. Die Eingabefelder sind dynamisch und die Listen werden direkt aktualisiert.&#10;- **Favoriten:** Favorisierte Rezepte werden in einer eigenen Datei gespeichert und können schnell angezeigt werden.&#10;- **Bilder:** Bilder werden im internen Speicher abgelegt und als relativer Pfad im Rezept gespeichert.&#10;- **UI/UX:** Die App verwendet ein modernes, responsives Layout mit Material Design Komponenten. Der &quot;Rezept hinzufügen&quot;-Button bleibt immer sichtbar und wird bei geöffneter Tastatur ausgeblendet.&#10;&#10;Die Kommunikation zwischen den Komponenten erfolgt über Listener und direkte Datenübergabe. Die App ist so gestaltet, dass sie einfach erweitert und angepasst werden kann.&#10;&#10;## Lizenz&#10;&#10;Dieses Projekt steht unter der MIT-Lizenz." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/assets/recipes.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/assets/recipes.json" />
              <option name="updatedContent" value="[&#10;  {&#10;    &quot;id&quot;: 1,&#10;    &quot;name&quot;: &quot;Gulasch mit Spätzle&quot;,&#10;    &quot;description&quot;: &quot;Ein herzhaftes Gericht mit Rindergulasch, Karotten und Spätzle.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Rindergulasch&quot;,&#10;      &quot;Karotten&quot;,&#10;      &quot;Staudensellerie&quot;,&#10;      &quot;Zwiebel&quot;,&#10;      &quot;Paprika&quot;,&#10;      &quot;Knoblauch&quot;,&#10;      &quot;Rotwein&quot;,&#10;      &quot;Rinderbrühe&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Fleisch von außen anbräunen und wieder rausnehmen&quot;,&#10;      &quot;Zwiebel, Knoblauch, Karotten, Paprika und Sellerie kleinschneiden und anbraten&quot;,&#10;      &quot;Ablöschen mit Rotwein und Rinderbrühe dazugeben&quot;,&#10;      &quot;Fleisch wieder dazugeben und mind. 3 Stunden auf niedriger Temp. köcheln lassen&quot;,&#10;      &quot;Spätzle selbst machen oder nach Packungsanleitung zubereiten&quot;,&#10;      &quot;Gulasch mit Spätzle servieren&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/1_Gulasch_mit_Sp_tzle.jpg&quot;,&#10;    &quot;servings&quot;: 6,&#10;    &quot;prepTime&quot;: &quot;4:00&quot;,&#10;    &quot;notes&quot;: &quot;Je länger das Gulasch köchelt, desto besser wird es. Am besten am Vortag zubereiten und über Nacht ziehen lassen.&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 2,&#10;    &quot;name&quot;: &quot;Fried Rice&quot;,&#10;    &quot;description&quot;: &quot;Ein asiatisches Geicht mit gebratenem Reis, Gemüse und Sojasauce.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Thaireis vom Vortag&quot;,&#10;      &quot;Frühlingszwiebel&quot;,&#10;      &quot;Karotten&quot;,&#10;      &quot;Paprika&quot;,&#10;      &quot;Erbsen&quot;,&#10;      &quot;Sojasauce&quot;,&#10;      &quot;Sesamöl&quot;,&#10;      &quot;Eier&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Gemüse klein schneiden&quot;,&#10;      &quot;Eier in einer Pfanne braten und beiseite stellen&quot;,&#10;      &quot;Gemüse in einer Pfanne anbraten und den Reis dazugeben&quot;,&#10;      &quot;Mit Sojasauce und Sesamöl würzen&quot;,&#10;      &quot;Eier dazugeben und alles gut vermischen&quot;,&#10;      &quot;Mit Frühlingszwiebeln garnieren und servieren&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/2_Fried_Rice.jpg&quot;,&#10;    &quot;servings&quot;: 2,&#10;    &quot;prepTime&quot;: &quot;0:20&quot;,&#10;    &quot;notes&quot;: &quot;&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 3,&#10;    &quot;name&quot;: &quot;Teriyaki Hähnchen mit Reis und Brokkoli&quot;,&#10;    &quot;description&quot;: &quot;Ein asiatisches Gericht mit Hähnchen, Brokkoli und Teriyaki-Soße.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Hähnchen&quot;,&#10;      &quot;Thaireis&quot;,&#10;      &quot;Brokkoli&quot;,&#10;      &quot;Sojasauce&quot;,&#10;      &quot;Sesamöl&quot;,&#10;      &quot;Brauner Zucker&quot;,&#10;      &quot;Knoblauch&quot;,&#10;      &quot;Ingwer&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Reis und Brokkoli kochen&quot;,&#10;      &quot;Sojasoße, Sesamöl, Zucker, Knoblauch und Ingwer in einer Schüssel vermischen&quot;,&#10;      &quot;Hähnchen in einer Pfanne anbraten&quot;,&#10;      &quot;Teriyaki-Soße dazugeben und köcheln lassen bis sie andickt&quot;,&#10;      &quot;Hähnchen mit Reis und Brokkoli servieren&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/3_Teriyaki_H_hnchen_mit_Reis_und_Brokkoli.jpg&quot;,&#10;    &quot;servings&quot;: 2,&#10;    &quot;prepTime&quot;: &quot;0:40&quot;,&#10;    &quot;notes&quot;: &quot;Verwenden Sie frischen Ingwer für mehr Geschmack.&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 4,&#10;    &quot;name&quot;: &quot;Salami Pizza&quot;,&#10;    &quot;description&quot;: &quot;Eine leckere Pizza mit Salami, Käse und Tomatensoße.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Pizza-Teig&quot;,&#10;      &quot;Salami&quot;,&#10;      &quot;Gouda&quot;,&#10;      &quot;Tomatensoße&quot;,&#10;      &quot;Oregano&quot;,&#10;      &quot;Kräuter der Provence&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Pizzateig ausrollen&quot;,&#10;      &quot;Tomatensoße mit Kräutern vermischen und auf den Teig streichen&quot;,&#10;      &quot;Salami und Käse darauf verteilen&quot;,&#10;      &quot;Im Ofen bei 220 Grad ca. 15-20 Minuten backen&quot;,&#10;      &quot;Mit frischem Basilikum garnieren und servieren&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/4_Salami_Pizza.jpg&quot;,&#10;    &quot;servings&quot;: 4,&#10;    &quot;prepTime&quot;: &quot;0:50&quot;,&#10;    &quot;notes&quot;: &quot;&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 5,&#10;    &quot;name&quot;: &quot;Apfel-Streusel Kuchen&quot;,&#10;    &quot;description&quot;: &quot;Ein leckerer Apfelkuchen mit Streuseln.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Weizenmehl&quot;,&#10;      &quot;Backpulver&quot;,&#10;      &quot;Zucker&quot;,&#10;      &quot;Butter&quot;,&#10;      &quot;Eier&quot;,&#10;      &quot;Äpfel&quot;,&#10;      &quot;Zimt&quot;,&#10;      &quot;Zitronensaft&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Den Boden der 26 cm Springform mit Backpapier auslegen, Ränder leicht fetten und mit Mehl bestäuben.&quot;,&#10;      &quot;Alle Zutaten zu einem Streuselteig (gerührten Mürbteig) verkneten. Ca. 15 Minuten eingewickelt kühl stellen. Etwa zwei Drittel für Boden und Rand abnehmen, daraus eine Kugel formen und diese etwas größer als Backformgröße ausrollen.&quot;,&#10;      &quot;Ofen auf 180 Grad Ober- und Unterhitze vorheizen&quot;,&#10;      &quot;Äpfel schälen, putzen, in Würfel schneiden. Mit Zucker, Saft und Zimt mischen. Die Apfel-Mischung auf dem Boden verteilen. Restliche Streusel drüber geben.&quot;,&#10;      &quot;Kuchen ca. 55 Minuten backen, eventuell gegen Ende abdecken, damit er nicht zu dunkel wird.&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/5_Apfel-Streusel_Kuchen.jpg&quot;,&#10;    &quot;servings&quot;: 10,&#10;    &quot;prepTime&quot;: &quot;1:30&quot;,&#10;    &quot;notes&quot;: &quot;&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 6,&#10;    &quot;name&quot;: &quot;Kartoffelgratin mit Blumenkohl&quot;,&#10;    &quot;description&quot;: &quot;Ein herzafter Auflauf mit Kartoffeln und Blumenkohl.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Kartoffeln&quot;,&#10;      &quot;Blumenkohl&quot;,&#10;      &quot;Zwiebel&quot;,&#10;      &quot;Knoblauch&quot;,&#10;      &quot;Sahne&quot;,&#10;      &quot;Käse&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Blumenkohl in Röschen teilen und in Salzwasser blanchieren&quot;,&#10;      &quot;Kartoffeln in feine Scheiben schneiden und in eine Auflaufform schichten&quot;,&#10;      &quot;Zwiebel und Knoblauch anbraten und mit der Sahne leicht aufkochen lassen&quot;,&#10;      &quot;Die Sahne über die Kartoffeln gießen und mit Käse bestreuen&quot;,&#10;      &quot;Im Ofen bei 180 Grad ca. 45 Minuten backen, bis die Kartoffeln gar sind&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/6_Kartoffelgratin_mit_Blumenkohl.jpg&quot;,&#10;    &quot;servings&quot;: 6,&#10;    &quot;prepTime&quot;: &quot;1:30&quot;,&#10;    &quot;notes&quot;: &quot;&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 7,&#10;    &quot;name&quot;: &quot;Erdbeerkuchen mit Vanillepudding&quot;,&#10;    &quot;description&quot;: &quot;Ein fruchtiger und weicher Kuchen mit Erdbeeren und Vanillepudding.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Mehl&quot;,&#10;      &quot;Eier&quot;,&#10;      &quot;Zucker&quot;,&#10;      &quot;Salz&quot;,&#10;      &quot;Butter&quot;,&#10;      &quot;Backpulver&quot;,&#10;      &quot;Milch&quot;,&#10;      &quot;Vanillepuddingpulver&quot;,&#10;      &quot;Erdbeeren&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Den Backofen auf 175° Grad Ober-/Unterhitze vorheizen und die Backform sorgfältig mit Butter einfetten. &quot;,&#10;      &quot;Mit einem Handmixer die Eier und den Zucker für 3-4 Minuten schaumig rühren, bis die Masse dick und weiß geworden ist.&quot;,&#10;      &quot;Das Mehl mit dem Backpulver und dem Salz mischen. Die Mehlmischung zur Eiermasse zufügen und ganz kurz unterrühren, bis sich die Zutaten gerade so verbunden haben und ein homogener Teig entstanden ist.&quot;,&#10;      &quot;Den Teig in die Form füllen und den Biskuitboden für 20 Minuten backen.&quot;,&#10;      &quot;Den Boden nach dem Backen sofort auf einem Kuchengitter stürzen und abkühlen lassen. Anschließend bis zur weiteren Verwendung luftdicht abdecken, da er schnell austrocknet.&quot;,&#10;      &quot;Den Vanillepudding nach Packungsanleitung zubereiten.&quot;,&#10;      &quot;Die Erdbeeren waschen, kleinschneiden und leicht mit Zucker bestreuen&quot;,&#10;      &quot;Anschließsend den Vanillepudding auf den Biskuitboden verteilen und die Erdbeeren darauf verteilen.&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/7_Erdbeerkuchen_mit_Vanillepudding.jpg&quot;,&#10;    &quot;servings&quot;: 1,&#10;    &quot;prepTime&quot;: &quot;1:00&quot;,&#10;    &quot;notes&quot;: &quot;&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 8,&#10;    &quot;name&quot;: &quot;Türkische Pasta&quot;,&#10;    &quot;description&quot;: &quot;Eine wärmende und tröstliche Suppe aus Tomaten, Zwiebeln und Knoblauch.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Nudeln&quot;,&#10;      &quot;Rinderhackfleisch&quot;,&#10;      &quot;Zwiebeln&quot;,&#10;      &quot;Cherry-Tomaten&quot;,&#10;      &quot;Joghurt&quot;,&#10;      &quot;Knoblauch&quot;,&#10;      &quot;Butter&quot;,&#10;      &quot;Paprikagewürz&quot;,&#10;      &quot;Frische Petersilie&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Joghurt mit Knoblauch vermischen und ziehen lassen&quot;,&#10;      &quot;Rinderhackfleisch scharf anbraten und würzen&quot;,&#10;      &quot;Zwiebeln dazu geben&quot;,&#10;      &quot;In der Zwischenzeit Nudeln kochen&quot;,&#10;      &quot;Butter schmelzen und Paprikagewürz dazu geben&quot;,&#10;      &quot;Nudeln mit Hackfleisch, Joghurt, Cherrytomaten, Butter und Petersilie anrichten&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/8_T_rkische_Pasta.jpg&quot;,&#10;    &quot;servings&quot;: 2,&#10;    &quot;prepTime&quot;: &quot;0:45&quot;,&#10;    &quot;notes&quot;: &quot;&quot;&#10;  }&#10;]&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/AddRecipeDialogFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/AddRecipeDialogFragment.kt" />
              <option name="originalContent" value="import android.app.Activity&#10;import android.content.Intent&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.ImageView&#10;import android.widget.LinearLayout&#10;import android.widget.Toast&#10;import androidx.fragment.app.DialogFragment&#10;import androidx.recyclerview.widget.ItemTouchHelper&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.android.material.bottomsheet.BottomSheetDialogFragment&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.InputStream&#10;&#10;class AddRecipeDialogFragment : DialogFragment() {&#10;&#10;    private var selectedImagePath: String? = null&#10;    private var imageUri: Uri? = null&#10;&#10;    interface OnRecipeAddedListener {&#10;        fun onRecipeAdded(recipe: Recipe)&#10;    }&#10;&#10;    private var listener: OnRecipeAddedListener? = null&#10;&#10;    fun setOnRecipeAddedListener(listener: OnRecipeAddedListener) {&#10;        this.listener = listener&#10;    }&#10;&#10;    private val ingredients = mutableListOf&lt;String&gt;()&#10;    private lateinit var ingredientsAdapter: IngredientsAdapter&#10;&#10;    private val preparations = mutableListOf&lt;String&gt;()&#10;    private lateinit var preparationsAdapter: PreparationsAdapter&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.dialog_add_recipe, container, false)&#10;    }&#10;&#10;    override fun onStart() {&#10;        super.onStart()&#10;        dialog?.window?.setLayout(&#10;            ViewGroup.LayoutParams.MATCH_PARENT,&#10;            ViewGroup.LayoutParams.MATCH_PARENT&#10;        )&#10;        dialog?.window?.setBackgroundDrawableResource(android.R.color.transparent) // Transparent background&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        val nameInput: EditText = view.findViewById(R.id.inputRecipeTitle)&#10;        val preparationInput: EditText = view.findViewById(R.id.inputDescription)&#10;        val newIngredientInput: EditText = view.findViewById(R.id.inputNewIngredient)&#10;        val servingsInput: EditText = view.findViewById(R.id.inputServings)&#10;        val prepHoursInput: EditText = view.findViewById(R.id.inputPrepHours)&#10;        val prepMinutesInput: EditText = view.findViewById(R.id.inputPrepMinutes)&#10;        val notesInput: EditText = view.findViewById(R.id.inputNotes)&#10;        val saveButton: Button = view.findViewById(R.id.buttonAddRecipe)&#10;        val ingredientsRecyclerView: RecyclerView = view.findViewById(R.id.ingredientsRecyclerView)&#10;        val newPreparationInput: EditText = view.findViewById(R.id.inputNewInstruction)&#10;        val preparationsRecyclerView: RecyclerView = view.findViewById(R.id.instructionsRecyclerView)&#10;&#10;&#10;        val backButton: View = view.findViewById(R.id.backButton) // Replace with the actual ID of the back symbol&#10;        backButton.setOnClickListener {&#10;            dismiss() // Close the dialog&#10;        }&#10;&#10;        val uploadButton = view.findViewById&lt;View&gt;(R.id.buttonUploadImage)&#10;        val selectedImageView = view.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;        val uploadPlaceholder = view.findViewById&lt;View&gt;(R.id.uploadPlaceholder)&#10;        uploadButton.setOnClickListener {&#10;            openImagePicker()&#10;        }&#10;&#10;        // Set up RecyclerView&#10;        val ingredientTouchHelper = ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(&#10;            ItemTouchHelper.UP or ItemTouchHelper.DOWN, 0) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                val from = viewHolder.adapterPosition&#10;                val to = target.adapterPosition&#10;                ingredientsAdapter.onItemMove(from, to)&#10;                return true&#10;            }&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {}&#10;        })&#10;        ingredientTouchHelper.attachToRecyclerView(ingredientsRecyclerView)&#10;&#10;        val preparationTouchHelper = ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(&#10;            ItemTouchHelper.UP or ItemTouchHelper.DOWN, 0) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                val from = viewHolder.adapterPosition&#10;                val to = target.adapterPosition&#10;                preparationsAdapter.onItemMove(from, to)&#10;                return true&#10;            }&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {}&#10;        })&#10;        preparationTouchHelper.attachToRecyclerView(preparationsRecyclerView)&#10;&#10;        ingredientsAdapter = IngredientsAdapter(&#10;            ingredients,&#10;            android.R.color.black,&#10;            onDelete = { pos -&gt;&#10;                ingredients.removeAt(pos)&#10;                ingredientsAdapter.notifyItemRemoved(pos)&#10;            },&#10;            onStartDrag = { viewHolder -&gt;&#10;                ingredientTouchHelper.startDrag(viewHolder)&#10;            }&#10;        )&#10;        ingredientsRecyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        ingredientsRecyclerView.adapter = ingredientsAdapter&#10;&#10;        preparationsAdapter = PreparationsAdapter(&#10;            preparations,&#10;            android.R.color.black,&#10;            onDelete = { pos -&gt;&#10;                preparations.removeAt(pos)&#10;                preparationsAdapter.notifyItemRemoved(pos)&#10;            },&#10;            onStartDrag = { viewHolder -&gt;&#10;                preparationTouchHelper.startDrag(viewHolder)&#10;            }&#10;        )&#10;        preparationsRecyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        preparationsRecyclerView.adapter = preparationsAdapter&#10;&#10;        // Add ingredient on Enter key press&#10;        newIngredientInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                val ingredientText = newIngredientInput.text.toString().trim()&#10;                if (ingredientText.isNotEmpty()) {&#10;                    ingredients.add(ingredientText) // Add ingredient to the list&#10;                    ingredientsAdapter.notifyDataSetChanged() // Update RecyclerView&#10;                    ingredientsRecyclerView.scrollToPosition(ingredients.size - 1) // Scroll to the last item&#10;                    newIngredientInput.text.clear() // Clear input field&#10;                }&#10;                true // Event handled&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        newPreparationInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                val preparationText = newPreparationInput.text.toString().trim()&#10;                if (preparationText.isNotEmpty()) {&#10;                    preparations.add(preparationText) // Add preparation step to the list&#10;                    preparationsAdapter.notifyDataSetChanged() // Update RecyclerView&#10;                    preparationsRecyclerView.scrollToPosition(preparations.size - 1) // Scroll to the last item&#10;                    newPreparationInput.text.clear() // Clear input field&#10;                }&#10;                true // Event handled&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        saveButton.setOnClickListener {&#10;            val name = nameInput.text.toString()&#10;            val description = preparationInput.text.toString() // Capture the description&#10;            val servings = servingsInput.text.toString().toIntOrNull() ?: 0&#10;            val prepTime = &quot;${prepHoursInput.text}:${prepMinutesInput.text}&quot;&#10;            val notes = notesInput.text.toString()&#10;&#10;            var imagePath: String? = null&#10;            if (imageUri != null) {&#10;                imagePath = saveImageToInternalStorageAndReturnPath(imageUri!!, name)&#10;            }&#10;&#10;            if (name.isNotEmpty() &amp;&amp; ingredients.isNotEmpty() &amp;&amp; preparations.isNotEmpty()) {&#10;                val newRecipe = Recipe(&#10;                    id = System.currentTimeMillis().toInt(),&#10;                    name = name,&#10;                    description = description, // Save the description&#10;                    ingredients = ingredients,&#10;                    preparations = preparations,&#10;                    image = imagePath,&#10;                    servings = servings,&#10;                    prepTime = prepTime,&#10;                    notes = notes&#10;                )&#10;                saveRecipe(newRecipe)&#10;                listener?.onRecipeAdded(newRecipe)&#10;                dismiss()&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    private fun saveRecipe(recipe: Recipe) {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val recipes: MutableList&lt;Recipe&gt; = if (recipesFile.exists()) {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;&#10;        // Generiere eine neue ID basierend auf der höchsten existierenden ID&#10;        val newId = (recipes.maxOfOrNull { it.id } ?: 0) + 1&#10;        val recipeWithId = recipe.copy(id = newId)&#10;&#10;        if (imageUri != null) {&#10;            saveImageToInternalStorage(imageUri!!, recipeWithId.id, recipeWithId.name)&#10;            recipeWithId.image = selectedImagePath // Aktualisiere den Bildpfad im Rezept&#10;        }&#10;&#10;        recipes.add(recipeWithId)&#10;        recipesFile.writeText(Gson().toJson(recipes))&#10;&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == REQUEST_IMAGE_PICK &amp;&amp; resultCode == Activity.RESULT_OK) {&#10;            imageUri = data?.data&#10;            val selectedImageView = view?.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;            val uploadPlaceholder = view?.findViewById&lt;View&gt;(R.id.uploadPlaceholder)&#10;            if (imageUri != null &amp;&amp; selectedImageView != null &amp;&amp; uploadPlaceholder != null) {&#10;                selectedImageView.setImageURI(imageUri)&#10;                selectedImageView.visibility = View.VISIBLE&#10;                uploadPlaceholder.visibility = View.GONE&#10;                Toast.makeText(requireContext(), &quot;Image selected successfully&quot;, Toast.LENGTH_SHORT).show()&#10;            } else {&#10;                Toast.makeText(requireContext(), &quot;Image selection failed&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveImageToInternalStorage(imageUri: Uri, recipeId: Int, recipeName: String) {&#10;        try {&#10;            val inputStream: InputStream? = requireContext().contentResolver.openInputStream(imageUri)&#10;            val bitmap = BitmapFactory.decodeStream(inputStream)&#10;&#10;            val imageDir = File(requireContext().filesDir, &quot;image&quot;)&#10;            if (!imageDir.exists()) {&#10;                imageDir.mkdir()&#10;            }&#10;&#10;            val sanitizedRecipeName = recipeName.replace(&quot;[^a-zA-Z0-9]&quot;.toRegex(), &quot;_&quot;)&#10;            selectedImagePath = &quot;${imageDir.absolutePath}/${recipeId}_${sanitizedRecipeName}.jpg&quot;&#10;            val imageFile = File(imageDir, &quot;${recipeId}_${sanitizedRecipeName}.jpg&quot;)&#10;&#10;            val outputStream = FileOutputStream(imageFile)&#10;            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream)&#10;            outputStream.flush()&#10;            outputStream.close()&#10;&#10;            selectedImagePath = imageFile.absolutePath&#10;            Toast.makeText(requireContext(), &quot;Image saved successfully&quot;, Toast.LENGTH_SHORT).show()&#10;        } catch (e: Exception) {&#10;            Toast.makeText(requireContext(), &quot;Failed to save image: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun saveImageToInternalStorageAndReturnPath(imageUri: Uri, recipeName: String): String? {&#10;        return try {&#10;            val inputStream: InputStream? = requireContext().contentResolver.openInputStream(imageUri)&#10;            val bitmap = BitmapFactory.decodeStream(inputStream)&#10;            val imageDir = File(requireContext().filesDir, &quot;image&quot;)&#10;            if (!imageDir.exists()) {&#10;                imageDir.mkdir()&#10;            }&#10;            val sanitizedRecipeName = recipeName.replace(&quot;[^a-zA-Z0-9]&quot;.toRegex(), &quot;_&quot;)&#10;            val fileName = &quot;${System.currentTimeMillis()}_${sanitizedRecipeName}.jpg&quot;&#10;            val imageFile = File(imageDir, fileName)&#10;            val outputStream = FileOutputStream(imageFile)&#10;            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream)&#10;            outputStream.flush()&#10;            outputStream.close()&#10;            imageFile.absolutePath&#10;        } catch (e: Exception) {&#10;            Toast.makeText(requireContext(), &quot;Failed to save image: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            null&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        private const val REQUEST_IMAGE_PICK = 1001&#10;    }&#10;&#10;    private fun openImagePicker() {&#10;        val intent = Intent(Intent.ACTION_PICK)&#10;        intent.type = &quot;image/*&quot;&#10;        startActivityForResult(intent, REQUEST_IMAGE_PICK)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import android.app.Activity&#10;import android.content.Intent&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.ImageView&#10;import android.widget.LinearLayout&#10;import android.widget.Toast&#10;import androidx.fragment.app.DialogFragment&#10;import androidx.recyclerview.widget.ItemTouchHelper&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.android.material.bottomsheet.BottomSheetDialogFragment&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.InputStream&#10;&#10;class AddRecipeDialogFragment : DialogFragment() {&#10;&#10;    private var selectedImagePath: String? = null&#10;    private var imageUri: Uri? = null&#10;&#10;    interface OnRecipeAddedListener {&#10;        fun onRecipeAdded(recipe: Recipe)&#10;    }&#10;&#10;    private var listener: OnRecipeAddedListener? = null&#10;&#10;    fun setOnRecipeAddedListener(listener: OnRecipeAddedListener) {&#10;        this.listener = listener&#10;    }&#10;&#10;    private val ingredients = mutableListOf&lt;String&gt;()&#10;    private lateinit var ingredientsAdapter: IngredientsAdapter&#10;&#10;    private val preparations = mutableListOf&lt;String&gt;()&#10;    private lateinit var preparationsAdapter: PreparationsAdapter&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.dialog_add_recipe, container, false)&#10;    }&#10;&#10;    override fun onStart() {&#10;        super.onStart()&#10;        dialog?.window?.setLayout(&#10;            ViewGroup.LayoutParams.MATCH_PARENT,&#10;            ViewGroup.LayoutParams.MATCH_PARENT&#10;        )&#10;        dialog?.window?.setBackgroundDrawableResource(android.R.color.transparent) // Transparent background&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        val nameInput: EditText = view.findViewById(R.id.inputRecipeTitle)&#10;        val preparationInput: EditText = view.findViewById(R.id.inputDescription)&#10;        val newIngredientInput: EditText = view.findViewById(R.id.inputNewIngredient)&#10;        val servingsInput: EditText = view.findViewById(R.id.inputServings)&#10;        val prepHoursInput: EditText = view.findViewById(R.id.inputPrepHours)&#10;        val prepMinutesInput: EditText = view.findViewById(R.id.inputPrepMinutes)&#10;        val notesInput: EditText = view.findViewById(R.id.inputNotes)&#10;        val saveButton: Button = view.findViewById(R.id.buttonAddRecipe)&#10;        val ingredientsRecyclerView: RecyclerView = view.findViewById(R.id.ingredientsRecyclerView)&#10;        val newPreparationInput: EditText = view.findViewById(R.id.inputNewInstruction)&#10;        val preparationsRecyclerView: RecyclerView = view.findViewById(R.id.instructionsRecyclerView)&#10;&#10;&#10;        val backButton: View = view.findViewById(R.id.backButton) // Replace with the actual ID of the back symbol&#10;        backButton.setOnClickListener {&#10;            dismiss() // Close the dialog&#10;        }&#10;&#10;        val uploadButton = view.findViewById&lt;View&gt;(R.id.buttonUploadImage)&#10;        val selectedImageView = view.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;        val uploadPlaceholder = view.findViewById&lt;View&gt;(R.id.uploadPlaceholder)&#10;        uploadButton.setOnClickListener {&#10;            openImagePicker()&#10;        }&#10;&#10;        // Set up RecyclerView&#10;        val ingredientTouchHelper = ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(&#10;            ItemTouchHelper.UP or ItemTouchHelper.DOWN, 0) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                val from = viewHolder.adapterPosition&#10;                val to = target.adapterPosition&#10;                ingredientsAdapter.onItemMove(from, to)&#10;                return true&#10;            }&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {}&#10;        })&#10;        ingredientTouchHelper.attachToRecyclerView(ingredientsRecyclerView)&#10;&#10;        val preparationTouchHelper = ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(&#10;            ItemTouchHelper.UP or ItemTouchHelper.DOWN, 0) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                val from = viewHolder.adapterPosition&#10;                val to = target.adapterPosition&#10;                preparationsAdapter.onItemMove(from, to)&#10;                return true&#10;            }&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {}&#10;        })&#10;        preparationTouchHelper.attachToRecyclerView(preparationsRecyclerView)&#10;&#10;        ingredientsAdapter = IngredientsAdapter(&#10;            ingredients,&#10;            android.R.color.black,&#10;            onDelete = { pos -&gt;&#10;                ingredients.removeAt(pos)&#10;                ingredientsAdapter.notifyItemRemoved(pos)&#10;            },&#10;            onStartDrag = { viewHolder -&gt;&#10;                ingredientTouchHelper.startDrag(viewHolder)&#10;            }&#10;        )&#10;        ingredientsRecyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        ingredientsRecyclerView.adapter = ingredientsAdapter&#10;&#10;        preparationsAdapter = PreparationsAdapter(&#10;            preparations,&#10;            android.R.color.black,&#10;            onDelete = { pos -&gt;&#10;                preparations.removeAt(pos)&#10;                preparationsAdapter.notifyItemRemoved(pos)&#10;            },&#10;            onStartDrag = { viewHolder -&gt;&#10;                preparationTouchHelper.startDrag(viewHolder)&#10;            }&#10;        )&#10;        preparationsRecyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        preparationsRecyclerView.adapter = preparationsAdapter&#10;&#10;        // Add ingredient on Enter key press&#10;        newIngredientInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                val ingredientText = newIngredientInput.text.toString().trim()&#10;                if (ingredientText.isNotEmpty()) {&#10;                    ingredients.add(ingredientText) // Add ingredient to the list&#10;                    ingredientsAdapter.notifyDataSetChanged() // Update RecyclerView&#10;                    ingredientsRecyclerView.scrollToPosition(ingredients.size - 1) // Scroll to the last item&#10;                    newIngredientInput.text.clear() // Clear input field&#10;                }&#10;                true // Event handled&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        newPreparationInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                val preparationText = newPreparationInput.text.toString().trim()&#10;                if (preparationText.isNotEmpty()) {&#10;                    preparations.add(preparationText) // Add preparation step to the list&#10;                    preparationsAdapter.notifyDataSetChanged() // Update RecyclerView&#10;                    preparationsRecyclerView.scrollToPosition(preparations.size - 1) // Scroll to the last item&#10;                    newPreparationInput.text.clear() // Clear input field&#10;                }&#10;                true // Event handled&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        saveButton.setOnClickListener {&#10;            val name = nameInput.text.toString()&#10;            val description = preparationInput.text.toString() // Capture the description&#10;            val servings = servingsInput.text.toString().toIntOrNull() ?: 0&#10;            val prepTime = &quot;${prepHoursInput.text}:${prepMinutesInput.text}&quot;&#10;            val notes = notesInput.text.toString()&#10;&#10;            var imagePath: String? = null&#10;            if (imageUri != null) {&#10;                imagePath = saveImageToInternalStorageAndReturnPath(imageUri!!, name)&#10;            }&#10;&#10;            if (name.isNotEmpty() &amp;&amp; ingredients.isNotEmpty() &amp;&amp; preparations.isNotEmpty()) {&#10;                val newRecipe = Recipe(&#10;                    id = System.currentTimeMillis().toInt(),&#10;                    name = name,&#10;                    description = description, // Save the description&#10;                    ingredients = ingredients,&#10;                    preparations = preparations,&#10;                    image = imagePath,&#10;                    servings = servings,&#10;                    prepTime = prepTime,&#10;                    notes = notes&#10;                )&#10;                saveRecipe(newRecipe)&#10;                listener?.onRecipeAdded(newRecipe)&#10;                dismiss()&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    private fun saveRecipe(recipe: Recipe) {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val recipes: MutableList&lt;Recipe&gt; = if (recipesFile.exists()) {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;&#10;        // Generiere eine neue ID basierend auf der höchsten existierenden ID&#10;        val newId = (recipes.maxOfOrNull { it.id } ?: 0) + 1&#10;        val recipeWithId = recipe.copy(id = newId)&#10;&#10;        if (imageUri != null) {&#10;            saveImageToInternalStorage(imageUri!!, recipeWithId.id, recipeWithId.name)&#10;            recipeWithId.image = selectedImagePath // Aktualisiere den Bildpfad im Rezept&#10;        }&#10;&#10;        recipes.add(recipeWithId)&#10;        recipesFile.writeText(Gson().toJson(recipes))&#10;&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == REQUEST_IMAGE_PICK &amp;&amp; resultCode == Activity.RESULT_OK) {&#10;            imageUri = data?.data&#10;            val selectedImageView = view?.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;            val uploadPlaceholder = view?.findViewById&lt;View&gt;(R.id.uploadPlaceholder)&#10;            if (imageUri != null &amp;&amp; selectedImageView != null &amp;&amp; uploadPlaceholder != null) {&#10;                selectedImageView.setImageURI(imageUri)&#10;                selectedImageView.visibility = View.VISIBLE&#10;                uploadPlaceholder.visibility = View.GONE&#10;                Toast.makeText(requireContext(), &quot;Image selected successfully&quot;, Toast.LENGTH_SHORT).show()&#10;            } else {&#10;                Toast.makeText(requireContext(), &quot;Image selection failed&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveImageToInternalStorage(imageUri: Uri, recipeId: Int, recipeName: String) {&#10;        try {&#10;            val inputStream: InputStream? = requireContext().contentResolver.openInputStream(imageUri)&#10;            val bitmap = BitmapFactory.decodeStream(inputStream)&#10;&#10;            val imageDir = File(requireContext().filesDir, &quot;image&quot;)&#10;            if (!imageDir.exists()) {&#10;                imageDir.mkdir()&#10;            }&#10;&#10;            val sanitizedRecipeName = recipeName.replace(&quot;[^a-zA-Z0-9]&quot;.toRegex(), &quot;_&quot;)&#10;            selectedImagePath = &quot;${imageDir.absolutePath}/${recipeId}_${sanitizedRecipeName}.jpg&quot;&#10;            val imageFile = File(imageDir, &quot;${recipeId}_${sanitizedRecipeName}.jpg&quot;)&#10;&#10;            val outputStream = FileOutputStream(imageFile)&#10;            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream)&#10;            outputStream.flush()&#10;            outputStream.close()&#10;&#10;            selectedImagePath = imageFile.absolutePath&#10;            Toast.makeText(requireContext(), &quot;Image saved successfully&quot;, Toast.LENGTH_SHORT).show()&#10;        } catch (e: Exception) {&#10;            Toast.makeText(requireContext(), &quot;Failed to save image: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun saveImageToInternalStorageAndReturnPath(imageUri: Uri, recipeName: String): String? {&#10;        return try {&#10;            val inputStream: InputStream? = requireContext().contentResolver.openInputStream(imageUri)&#10;            val bitmap = BitmapFactory.decodeStream(inputStream)&#10;            val imageDir = File(requireContext().filesDir, &quot;image&quot;)&#10;            if (!imageDir.exists()) {&#10;                imageDir.mkdir()&#10;            }&#10;            val sanitizedRecipeName = recipeName.replace(&quot;[^a-zA-Z0-9]&quot;.toRegex(), &quot;_&quot;)&#10;            val fileName = &quot;${System.currentTimeMillis()}_${sanitizedRecipeName}.jpg&quot;&#10;            val imageFile = File(imageDir, fileName)&#10;            val outputStream = FileOutputStream(imageFile)&#10;            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream)&#10;            outputStream.flush()&#10;            outputStream.close()&#10;            // Nur relativen Pfad speichern&#10;            &quot;image/$fileName&quot;&#10;        } catch (e: Exception) {&#10;            Toast.makeText(requireContext(), &quot;Failed to save image: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            null&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        private const val REQUEST_IMAGE_PICK = 1001&#10;    }&#10;&#10;    private fun openImagePicker() {&#10;        val intent = Intent(Intent.ACTION_PICK)&#10;        intent.type = &quot;image/*&quot;&#10;        startActivityForResult(intent, REQUEST_IMAGE_PICK)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/AddRecipeMenuDialogFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/AddRecipeMenuDialogFragment.kt" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.app.Dialog&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import com.google.android.material.bottomsheet.BottomSheetDialogFragment&#10;import com.app.mealplanner.databinding.DialogAddRecipeMenuBinding&#10;&#10;class AddRecipeMenuDialogFragment(&#10;    private val onManual: () -&gt; Unit,&#10;    private val onInstagram: () -&gt; Unit,&#10;    private val onWebsite: () -&gt; Unit&#10;) : BottomSheetDialogFragment() {&#10;    private var _binding: DialogAddRecipeMenuBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        _binding = DialogAddRecipeMenuBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        binding.fabManual.setOnClickListener {&#10;            dismiss()&#10;            onManual()&#10;        }&#10;        binding.fabInstagram.setOnClickListener {&#10;            dismiss()&#10;            onInstagram()&#10;        }&#10;        binding.fabWebsite.setOnClickListener {&#10;            dismiss()&#10;            onWebsite()&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/FavoritesRecipeAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/FavoritesRecipeAdapter.kt" />
              <option name="originalContent" value="package com.app.mealplanner&#10;&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.databinding.NewRecipeItemBinding&#10;import com.app.mealplanner.model.Recipe&#10;import java.io.File&#10;import com.bumptech.glide.Glide&#10;&#10;class FavoritesRecipeAdapter(&#10;    private var recipes: MutableList&lt;Recipe&gt;,&#10;    private val onSwipe: (String) -&gt; Unit,&#10;    private val onRemoveClick: (Recipe) -&gt; Unit,&#10;    private val onClick: (Recipe) -&gt; Unit // Add onClick callback&#10;) : RecyclerView.Adapter&lt;FavoritesRecipeAdapter.FavoritesRecipeViewHolder&gt;() {&#10;&#10;    class FavoritesRecipeViewHolder(private val binding: NewRecipeItemBinding) : RecyclerView.ViewHolder(binding.root) {&#10;        val recipeImage: ImageView = binding.recipeImage&#10;        val recipeTitle: TextView = binding.recipeTitle&#10;        val recipeTime: TextView = binding.recipeTime&#10;        val recipeIcon: ImageView = binding.recipeIcon&#10;        val btnRemoveFavorite: ImageView = binding.btnRemoveFavorite&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): FavoritesRecipeViewHolder {&#10;        val binding = NewRecipeItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)&#10;        return FavoritesRecipeViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: FavoritesRecipeViewHolder, position: Int) {&#10;        val currentRecipe = recipes[position]&#10;        holder.recipeTitle.text = currentRecipe.name&#10;&#10;        if (currentRecipe.image != null) {&#10;                .into(holder.recipeImage)&#10;                .load(File(currentRecipe.image))&#10;&#10;        holder.recipeTime.text = &quot;${currentRecipe.prepTime} min&quot;&#10;        holder.recipeIcon.setImageResource(R.drawable.ic_timer)&#10;        holder.btnRemoveFavorite.setOnClickListener {&#10;            onRemoveClick(currentRecipe)&#10;        }&#10;        holder.itemView.setOnClickListener {&#10;            onClick(currentRecipe) // Trigger the callback with the clicked recipe&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = recipes.size&#10;&#10;    fun updateRecipes(newRecipes: MutableList&lt;Recipe&gt;) {&#10;        this.recipes = newRecipes&#10;        notifyDataSetChanged() // RecyclerView aktualisieren&#10;    }&#10;&#10;    fun removeRecipe(recipe: Recipe) {&#10;        val position = recipes.indexOf(recipe)&#10;        if (position != -1) {&#10;            recipes.removeAt(position)&#10;            notifyItemRemoved(position)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.databinding.NewRecipeItemBinding&#10;import com.app.mealplanner.model.Recipe&#10;import java.io.File&#10;import com.bumptech.glide.Glide&#10;&#10;class FavoritesRecipeAdapter(&#10;    private var recipes: MutableList&lt;Recipe&gt;,&#10;    private val onSwipe: (String) -&gt; Unit,&#10;    private val onRemoveClick: (Recipe) -&gt; Unit,&#10;    private val onClick: (Recipe) -&gt; Unit // Add onClick callback&#10;) : RecyclerView.Adapter&lt;FavoritesRecipeAdapter.FavoritesRecipeViewHolder&gt;() {&#10;&#10;    class FavoritesRecipeViewHolder(private val binding: NewRecipeItemBinding) : RecyclerView.ViewHolder(binding.root) {&#10;        val recipeImage: ImageView = binding.recipeImage&#10;        val recipeTitle: TextView = binding.recipeTitle&#10;        val recipeTime: TextView = binding.recipeTime&#10;        val recipeIcon: ImageView = binding.recipeIcon&#10;        val btnRemoveFavorite: ImageView = binding.btnRemoveFavorite&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): FavoritesRecipeViewHolder {&#10;        val binding = NewRecipeItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)&#10;        return FavoritesRecipeViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: FavoritesRecipeViewHolder, position: Int) {&#10;        val currentRecipe = recipes[position]&#10;        holder.recipeTitle.text = currentRecipe.name&#10;&#10;        val imagePath = currentRecipe.image&#10;        val imageFile = if (!imagePath.isNullOrEmpty() &amp;&amp; !File(imagePath).isAbsolute) File(holder.itemView.context.filesDir, imagePath) else if (!imagePath.isNullOrEmpty()) File(imagePath) else null&#10;        if (imageFile != null &amp;&amp; imageFile.exists()) {&#10;            Glide.with(holder.itemView.context)&#10;                .load(imageFile)&#10;                .placeholder(android.R.drawable.ic_menu_gallery)&#10;                .error(android.R.drawable.ic_dialog_alert)&#10;                .into(holder.recipeImage)&#10;        } else {&#10;            holder.recipeImage.setImageResource(android.R.drawable.ic_menu_gallery)&#10;        }&#10;&#10;        holder.recipeTime.text = &quot;${currentRecipe.prepTime} min&quot;&#10;        holder.recipeIcon.setImageResource(R.drawable.ic_timer)&#10;        holder.btnRemoveFavorite.setOnClickListener {&#10;            onRemoveClick(currentRecipe)&#10;        }&#10;        holder.itemView.setOnClickListener {&#10;            onClick(currentRecipe) // Trigger the callback with the clicked recipe&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = recipes.size&#10;&#10;    fun updateRecipes(newRecipes: MutableList&lt;Recipe&gt;) {&#10;        this.recipes = newRecipes&#10;        notifyDataSetChanged() // RecyclerView aktualisieren&#10;    }&#10;&#10;    fun removeRecipe(recipe: Recipe) {&#10;        val position = recipes.indexOf(recipe)&#10;        if (position != -1) {&#10;            recipes.removeAt(position)&#10;            notifyItemRemoved(position)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/ImportInstagramDialogFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/ImportInstagramDialogFragment.kt" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.app.Dialog&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import com.google.android.material.bottomsheet.BottomSheetDialogFragment&#10;import com.app.mealplanner.databinding.DialogImportInstagramBinding&#10;&#10;class ImportInstagramDialogFragment : BottomSheetDialogFragment() {&#10;    private var _binding: DialogImportInstagramBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        _binding = DialogImportInstagramBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/ImportWebsiteDialogFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/ImportWebsiteDialogFragment.kt" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.app.Dialog&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import com.google.android.material.bottomsheet.BottomSheetDialogFragment&#10;import com.app.mealplanner.databinding.DialogImportWebsiteBinding&#10;&#10;class ImportWebsiteDialogFragment : BottomSheetDialogFragment() {&#10;    private var _binding: DialogImportWebsiteBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        _binding = DialogImportWebsiteBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/IngredientsAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/IngredientsAdapter.kt" />
              <option name="originalContent" value="import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.MotionEvent&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.core.content.ContextCompat&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;&#10;class IngredientsAdapter(&#10;    private val ingredients: MutableList&lt;String&gt;,&#10;    private val textColorResId: Int,&#10;    private val onDelete: (Int) -&gt; Unit,&#10;    private val onStartDrag: (RecyclerView.ViewHolder) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;IngredientsAdapter.ViewHolder&gt;() {&#10;&#10;    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val textView: TextView = itemView.findViewById(R.id.ingredientText)&#10;        val deleteButton: ImageView = itemView.findViewById(R.id.deleteIngredient)&#10;        val dragHandle: ImageView = itemView.findViewById(R.id.dragHandle)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_ingredient, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val ingredient = ingredients[position]&#10;        holder.textView.text = &quot;● ${ingredient}&quot;&#10;        holder.textView.setTextColor(&#10;            ContextCompat.getColor(holder.itemView.context, textColorResId)&#10;        )&#10;        holder.deleteButton.visibility = View.VISIBLE&#10;        holder.dragHandle.visibility = View.VISIBLE&#10;        holder.deleteButton.setOnClickListener {&#10;            onDelete(holder.adapterPosition)&#10;        }&#10;        holder.dragHandle.setOnTouchListener { _, event -&gt;&#10;            if (event.action == MotionEvent.ACTION_DOWN) {&#10;                onStartDrag(holder)&#10;            }&#10;            false&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = ingredients.size&#10;&#10;    fun onItemMove(fromPosition: Int, toPosition: Int) {&#10;        val item = ingredients.removeAt(fromPosition)&#10;        ingredients.add(toPosition, item)&#10;        notifyItemMoved(fromPosition, toPosition)&#10;    }&#10;&#10;    fun onItemDismiss(position: Int) {&#10;        ingredients.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;}" />
              <option name="updatedContent" value="import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.MotionEvent&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.core.content.ContextCompat&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;&#10;class IngredientsAdapter(&#10;    private val ingredients: MutableList&lt;String&gt;,&#10;    private val textColorResId: Int,&#10;    private val onDelete: (Int) -&gt; Unit = {},&#10;    private val onStartDrag: (RecyclerView.ViewHolder) -&gt; Unit = {},&#10;    private val showEditIcons: Boolean = true&#10;) : RecyclerView.Adapter&lt;IngredientsAdapter.ViewHolder&gt;() {&#10;&#10;    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val textView: TextView = itemView.findViewById(R.id.ingredientText)&#10;        val deleteButton: ImageView = itemView.findViewById(R.id.deleteIngredient)&#10;        val dragHandle: ImageView = itemView.findViewById(R.id.dragHandle)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_ingredient, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val ingredient = ingredients[position]&#10;        holder.textView.text = &quot;● ${ingredient}&quot;&#10;        holder.textView.setTextColor(&#10;            ContextCompat.getColor(holder.itemView.context, textColorResId)&#10;        )&#10;        if (showEditIcons) {&#10;            holder.deleteButton.visibility = View.VISIBLE&#10;            holder.dragHandle.visibility = View.VISIBLE&#10;            holder.deleteButton.setOnClickListener {&#10;                onDelete(holder.adapterPosition)&#10;            }&#10;            holder.dragHandle.setOnTouchListener { _, event -&gt;&#10;                if (event.action == MotionEvent.ACTION_DOWN) {&#10;                    onStartDrag(holder)&#10;                }&#10;                false&#10;            }&#10;        } else {&#10;            holder.deleteButton.visibility = View.GONE&#10;            holder.dragHandle.visibility = View.GONE&#10;            holder.deleteButton.setOnClickListener(null)&#10;            holder.dragHandle.setOnTouchListener(null)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = ingredients.size&#10;&#10;    fun onItemMove(fromPosition: Int, toPosition: Int) {&#10;        val item = ingredients.removeAt(fromPosition)&#10;        ingredients.add(toPosition, item)&#10;        notifyItemMoved(fromPosition, toPosition)&#10;    }&#10;&#10;    fun onItemDismiss(position: Int) {&#10;        ingredients.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/PreparationsAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/PreparationsAdapter.kt" />
              <option name="originalContent" value="import android.text.Html&#10;import android.view.LayoutInflater&#10;import android.view.MotionEvent&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.core.content.ContextCompat&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;&#10;class PreparationsAdapter(&#10;    private val preparations: MutableList&lt;String&gt;,&#10;    private val textColorResId: Int,&#10;    private val onDelete: (Int) -&gt; Unit,&#10;    private val onStartDrag: (RecyclerView.ViewHolder) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;PreparationsAdapter.ViewHolder&gt;() {&#10;&#10;    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val textView: TextView = itemView.findViewById(R.id.preparationText)&#10;        val deleteButton: ImageView = itemView.findViewById(R.id.deletePreparation)&#10;        val dragHandle: ImageView = itemView.findViewById(R.id.dragHandle)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_preparation, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val preparation = preparations[position]&#10;        holder.textView.text = Html.fromHtml(&quot;&lt;b&gt;${position + 1}.&lt;/b&gt; $preparation&quot;, Html.FROM_HTML_MODE_LEGACY)&#10;        holder.textView.setTextColor(&#10;            ContextCompat.getColor(holder.itemView.context, textColorResId)&#10;        )&#10;        holder.deleteButton.visibility = View.VISIBLE&#10;        holder.dragHandle.visibility = View.VISIBLE&#10;        holder.deleteButton.setOnClickListener {&#10;            onDelete(holder.adapterPosition)&#10;        }&#10;        holder.dragHandle.setOnTouchListener { _, event -&gt;&#10;            if (event.action == MotionEvent.ACTION_DOWN) {&#10;                onStartDrag(holder)&#10;            }&#10;            false&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = preparations.size&#10;&#10;    fun onItemMove(fromPosition: Int, toPosition: Int) {&#10;        val item = preparations.removeAt(fromPosition)&#10;        preparations.add(toPosition, item)&#10;        notifyItemMoved(fromPosition, toPosition)&#10;    }&#10;&#10;    fun onItemDismiss(position: Int) {&#10;        preparations.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;}" />
              <option name="updatedContent" value="import android.text.Html&#10;import android.view.LayoutInflater&#10;import android.view.MotionEvent&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.core.content.ContextCompat&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;&#10;class PreparationsAdapter(&#10;    private val preparations: MutableList&lt;String&gt;,&#10;    private val textColorResId: Int,&#10;    private val onDelete: (Int) -&gt; Unit = {},&#10;    private val onStartDrag: (RecyclerView.ViewHolder) -&gt; Unit = {},&#10;    private val showEditIcons: Boolean = true&#10;) : RecyclerView.Adapter&lt;PreparationsAdapter.ViewHolder&gt;() {&#10;&#10;    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val textView: TextView = itemView.findViewById(R.id.preparationText)&#10;        val deleteButton: ImageView = itemView.findViewById(R.id.deletePreparation)&#10;        val dragHandle: ImageView = itemView.findViewById(R.id.dragHandle)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_preparation, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val preparation = preparations[position]&#10;        holder.textView.text = Html.fromHtml(&quot;&lt;b&gt;${position + 1}.&lt;/b&gt; $preparation&quot;, Html.FROM_HTML_MODE_LEGACY)&#10;        holder.textView.setTextColor(&#10;            ContextCompat.getColor(holder.itemView.context, textColorResId)&#10;        )&#10;        if (showEditIcons) {&#10;            holder.deleteButton.visibility = View.VISIBLE&#10;            holder.dragHandle.visibility = View.VISIBLE&#10;            holder.deleteButton.setOnClickListener {&#10;                onDelete(holder.adapterPosition)&#10;            }&#10;            holder.dragHandle.setOnTouchListener { _, event -&gt;&#10;                if (event.action == MotionEvent.ACTION_DOWN) {&#10;                    onStartDrag(holder)&#10;                }&#10;                false&#10;            }&#10;        } else {&#10;            holder.deleteButton.visibility = View.GONE&#10;            holder.dragHandle.visibility = View.GONE&#10;            holder.deleteButton.setOnClickListener(null)&#10;            holder.dragHandle.setOnTouchListener(null)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount(): Int = preparations.size&#10;&#10;    fun onItemMove(fromPosition: Int, toPosition: Int) {&#10;        val item = preparations.removeAt(fromPosition)&#10;        preparations.add(toPosition, item)&#10;        notifyItemMoved(fromPosition, toPosition)&#10;    }&#10;&#10;    fun onItemDismiss(position: Int) {&#10;        preparations.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipeAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipeAdapter.kt" />
              <option name="originalContent" value="package com.app.mealplanner&#10;&#10;import IngredientsAdapter&#10;import android.text.Html&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.databinding.RecipeItemBinding&#10;import com.app.mealplanner.model.Recipe&#10;import com.bumptech.glide.Glide&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import java.io.File&#10;&#10;class RecipeAdapter(private var recipes: MutableList&lt;Recipe&gt;,&#10;                    private val onSwipe: (String) -&gt; Unit) :&#10;    RecyclerView.Adapter&lt;RecipeAdapter.RecipeViewHolder&gt;() {&#10;&#10;    class RecipeViewHolder(private val binding: RecipeItemBinding) : RecyclerView.ViewHolder(binding.root) {&#10;        val nameTextView: TextView = binding.recipeName&#10;        val recipeImage: ImageView = binding.recipeImage&#10;        //val ingredientsList: TextView = binding.ingredientsList&#10;        val preparationList: TextView = binding.preparationList&#10;        val recipeDescription: TextView = binding.recipeDescription&#10;        val servings: TextView = binding.servings&#10;        val preparationTime: TextView = binding.preparationTime&#10;        //val notes: TextView = binding.notes&#10;        val ingredientsRecyclerView = binding.ingredientsRecyclerView // Expose RecyclerView&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecipeViewHolder {&#10;        val binding = RecipeItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)&#10;        return RecipeViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: RecipeViewHolder, position: Int) {&#10;        val currentRecipe = recipes[position]&#10;        holder.nameTextView.text = currentRecipe.name&#10;&#10;        val ingredientsAdapter = IngredientsAdapter(&#10;            currentRecipe.ingredients?.toMutableList() ?: mutableListOf(),&#10;            R.color.AcardTextColor,&#10;            onDelete = { _ -&gt; },&#10;            onStartDrag = { _ -&gt; },&#10;            showEditIcons = false&#10;        )&#10;        val gridLayoutManager = GridLayoutManager(holder.itemView.context, if ((currentRecipe.ingredients?.size ?: 0) &gt; 5) 2 else 1)&#10;        holder.ingredientsRecyclerView.layoutManager = gridLayoutManager&#10;        holder.ingredientsRecyclerView.adapter = ingredientsAdapter&#10;&#10;        val imagePath = currentRecipe.image&#10;        val imageFile = if (!imagePath.isNullOrEmpty()) File(holder.itemView.context.filesDir, imagePath) else null&#10;        if (imageFile != null &amp;&amp; imageFile.exists()) {&#10;            Glide.with(holder.itemView.context)&#10;                .load(imageFile)&#10;                .placeholder(android.R.drawable.ic_menu_gallery)&#10;                .error(android.R.drawable.ic_dialog_alert)&#10;                .into(holder.recipeImage)&#10;        } else {&#10;            holder.recipeImage.setImageResource(android.R.drawable.ic_menu_gallery)&#10;        }&#10;&#10;        holder.preparationList.text = currentRecipe.preparations&#10;            ?.mapIndexed { index, preparation -&gt; &quot;${index + 1}. $preparation&quot; }&#10;            ?.joinToString(&quot;\n&quot;) ?: &quot;&quot;&#10;        holder.servings.text = Html.fromHtml(&quot;&lt;b&gt;Portionen:&lt;/b&gt; ${currentRecipe.servings ?: &quot;&lt;b&gt;Portionen:&lt;/b&gt; N/A&quot;}&quot;)&#10;        holder.preparationTime.text = Html.fromHtml(&quot;&lt;b&gt;Zubereitungszeit:&lt;/b&gt; ${currentRecipe.prepTime ?: &quot;&lt;b&gt;Zubereitungszeit:&lt;/b&gt; N/A&quot;}&quot;)&#10;        holder.recipeDescription.text = currentRecipe.description ?: &quot;Keine Beschreibung verfügbar&quot;&#10;        /*if (currentRecipe.notes.isNullOrEmpty()) {&#10;            holder.notes.visibility = View.GONE&#10;            holder.itemView.findViewById&lt;TextView&gt;(R.id.notesLabel).visibility = View.GONE&#10;        } else {&#10;            holder.notes.visibility = View.VISIBLE&#10;            holder.itemView.findViewById&lt;TextView&gt;(R.id.notesLabel).visibility = View.VISIBLE&#10;            holder.notes.text = currentRecipe.notes&#10;        }*/&#10;    }&#10;&#10;    override fun getItemCount(): Int = recipes.size&#10;&#10;    fun removeRecipe(position: Int) {&#10;        recipes.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;&#10;    fun addRecipe(recipe: Recipe) {&#10;        recipes.add(recipe)&#10;        notifyItemInserted(recipes.size - 1)&#10;    }&#10;&#10;    fun updateRecipes(newRecipes: MutableList&lt;Recipe&gt;) {&#10;        recipes = newRecipes&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    fun removeRecipeAt(position: Int) {&#10;        recipes.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;&#10;    fun getRecipes(): MutableList&lt;Recipe&gt; {&#10;        return recipes&#10;    }&#10;&#10;    fun onItemSwiped(position: Int) {&#10;        val recipeId = recipes[position].id.toString()&#10;        onSwipe(recipeId)&#10;        recipes.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import IngredientsAdapter&#10;import android.text.Html&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.databinding.RecipeItemBinding&#10;import com.app.mealplanner.model.Recipe&#10;import com.bumptech.glide.Glide&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import java.io.File&#10;&#10;class RecipeAdapter(private var recipes: MutableList&lt;Recipe&gt;,&#10;                    private val onSwipe: (String) -&gt; Unit) :&#10;    RecyclerView.Adapter&lt;RecipeAdapter.RecipeViewHolder&gt;() {&#10;&#10;    class RecipeViewHolder(private val binding: RecipeItemBinding) : RecyclerView.ViewHolder(binding.root) {&#10;        val nameTextView: TextView = binding.recipeName&#10;        val recipeImage: ImageView = binding.recipeImage&#10;        //val ingredientsList: TextView = binding.ingredientsList&#10;        val preparationList: TextView = binding.preparationList&#10;        val recipeDescription: TextView = binding.recipeDescription&#10;        val servings: TextView = binding.servings&#10;        val preparationTime: TextView = binding.preparationTime&#10;        //val notes: TextView = binding.notes&#10;        val ingredientsRecyclerView = binding.ingredientsRecyclerView // Expose RecyclerView&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecipeViewHolder {&#10;        val binding = RecipeItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)&#10;        return RecipeViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: RecipeViewHolder, position: Int) {&#10;        val currentRecipe = recipes[position]&#10;        holder.nameTextView.text = currentRecipe.name&#10;&#10;        val ingredientsAdapter = IngredientsAdapter(&#10;            currentRecipe.ingredients?.toMutableList() ?: mutableListOf(),&#10;            R.color.AcardTextColor,&#10;            onDelete = { _ -&gt; },&#10;            onStartDrag = { _ -&gt; },&#10;            showEditIcons = false&#10;        )&#10;        val gridLayoutManager = GridLayoutManager(holder.itemView.context, if ((currentRecipe.ingredients?.size ?: 0) &gt; 5) 2 else 1)&#10;        holder.ingredientsRecyclerView.layoutManager = gridLayoutManager&#10;        holder.ingredientsRecyclerView.adapter = ingredientsAdapter&#10;&#10;        val imagePath = currentRecipe.image&#10;        val imageFile = if (!imagePath.isNullOrEmpty() &amp;&amp; !File(imagePath).isAbsolute) File(holder.itemView.context.filesDir, imagePath) else if (!imagePath.isNullOrEmpty()) File(imagePath) else null&#10;        if (imageFile != null &amp;&amp; imageFile.exists()) {&#10;            Glide.with(holder.itemView.context)&#10;                .load(imageFile)&#10;                .placeholder(android.R.drawable.ic_menu_gallery)&#10;                .error(android.R.drawable.ic_dialog_alert)&#10;                .into(holder.recipeImage)&#10;        } else {&#10;            holder.recipeImage.setImageResource(android.R.drawable.ic_menu_gallery)&#10;        }&#10;&#10;        holder.preparationList.text = currentRecipe.preparations&#10;            ?.mapIndexed { index, preparation -&gt; &quot;${index + 1}. $preparation&quot; }&#10;            ?.joinToString(&quot;\n&quot;) ?: &quot;&quot;&#10;        holder.servings.text = Html.fromHtml(&quot;&lt;b&gt;Portionen:&lt;/b&gt; ${currentRecipe.servings ?: &quot;&lt;b&gt;Portionen:&lt;/b&gt; N/A&quot;}&quot;)&#10;        holder.preparationTime.text = Html.fromHtml(&quot;&lt;b&gt;Zubereitungszeit:&lt;/b&gt; ${currentRecipe.prepTime ?: &quot;&lt;b&gt;Zubereitungszeit:&lt;/b&gt; N/A&quot;}&quot;)&#10;        holder.recipeDescription.text = currentRecipe.description ?: &quot;Keine Beschreibung verfügbar&quot;&#10;        /*if (currentRecipe.notes.isNullOrEmpty()) {&#10;            holder.notes.visibility = View.GONE&#10;            holder.itemView.findViewById&lt;TextView&gt;(R.id.notesLabel).visibility = View.GONE&#10;        } else {&#10;            holder.notes.visibility = View.VISIBLE&#10;            holder.itemView.findViewById&lt;TextView&gt;(R.id.notesLabel).visibility = View.VISIBLE&#10;            holder.notes.text = currentRecipe.notes&#10;        }*/&#10;    }&#10;&#10;    override fun getItemCount(): Int = recipes.size&#10;&#10;    fun removeRecipe(position: Int) {&#10;        recipes.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;&#10;    fun addRecipe(recipe: Recipe) {&#10;        recipes.add(recipe)&#10;        notifyItemInserted(recipes.size - 1)&#10;    }&#10;&#10;    fun updateRecipes(newRecipes: MutableList&lt;Recipe&gt;) {&#10;        recipes = newRecipes&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    fun removeRecipeAt(position: Int) {&#10;        recipes.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;&#10;    fun getRecipes(): MutableList&lt;Recipe&gt; {&#10;        return recipes&#10;    }&#10;&#10;    fun onItemSwiped(position: Int) {&#10;        val recipeId = recipes[position].id.toString()&#10;        onSwipe(recipeId)&#10;        recipes.removeAt(position)&#10;        notifyItemRemoved(position)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipeDetailFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipeDetailFragment.kt" />
              <option name="originalContent" value="import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.ImageButton&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;import com.app.mealplanner.model.Recipe&#10;import com.bumptech.glide.Glide&#10;&#10;class RecipeDetailFragment : Fragment() {&#10;&#10;    companion object {&#10;        private const val ARG_RECIPE = &quot;recipe&quot;&#10;&#10;        fun newInstance(recipe: Recipe): RecipeDetailFragment {&#10;            val fragment = RecipeDetailFragment()&#10;            val args = Bundle()&#10;            args.putSerializable(ARG_RECIPE, recipe)&#10;            fragment.arguments = args&#10;            return fragment&#10;        }&#10;    }&#10;&#10;    private var recipe: Recipe? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        recipe = arguments?.getSerializable(ARG_RECIPE) as? Recipe&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_recipe_detail, container, false)&#10;&#10;        val closeButton: View = view.findViewById(R.id.close_button)&#10;        closeButton.setOnClickListener {&#10;            parentFragmentManager.popBackStack()&#10;        }&#10;&#10;        val titleTextView: TextView = view.findViewById(R.id.recipe_title)&#10;        val descriptionTextView: TextView = view.findViewById(R.id.recipe_description)&#10;        val recipeImageView: ImageView = view.findViewById(R.id.recipe_image) // Recipe image view&#10;&#10;        recipe?.let {&#10;            titleTextView.text = it.name&#10;            descriptionTextView.text = it.description&#10;&#10;            // Load the recipe image using Glide&#10;            if (!it.image.isNullOrEmpty()) {&#10;                Glide.with(this)&#10;                    .load(it.image)&#10;                    .placeholder(android.R.drawable.ic_menu_gallery) // Placeholder while loading&#10;                    .error(android.R.drawable.ic_dialog_alert) // Fallback if loading fails&#10;                    .into(recipeImageView)&#10;            } else {&#10;                recipeImageView.setImageResource(android.R.drawable.ic_menu_gallery) // Default image&#10;            }&#10;        }&#10;&#10;        val ingredientsButton: Button = view.findViewById(R.id.ingredients_button)&#10;        val instructionsButton: Button = view.findViewById(R.id.instructions_button)&#10;        val nutritionsButton: Button = view.findViewById(R.id.nutrition_button)&#10;&#10;        ingredientsButton.setOnClickListener {&#10;            loadContent(R.layout.recipe_detail_ingredients)&#10;        }&#10;&#10;        instructionsButton.setOnClickListener {&#10;            loadContent(R.layout.recipe_detail_instructions)&#10;        }&#10;&#10;        nutritionsButton.setOnClickListener {&#10;            loadContent(R.layout.recipe_detail_nutritions)&#10;        }&#10;&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        loadContent(R.layout.recipe_detail_ingredients) // Automatically load ingredients&#10;    }&#10;&#10;    private fun loadContent(layoutResId: Int) {&#10;        val contentContainer = requireView().findViewById&lt;ViewGroup&gt;(R.id.content_container)&#10;        contentContainer.removeAllViews()&#10;        LayoutInflater.from(context).inflate(layoutResId, contentContainer, true)&#10;&#10;        when (layoutResId) {&#10;            R.layout.recipe_detail_ingredients -&gt; {&#10;                val recyclerView = contentContainer.findViewById&lt;RecyclerView&gt;(R.id.ingredients_recycler_view)&#10;                recyclerView?.adapter = IngredientsAdapter(recipe?.ingredients ?: emptyList(), android.R.color.black)&#10;                recyclerView?.layoutManager = LinearLayoutManager(requireContext())&#10;            }&#10;            R.layout.recipe_detail_instructions -&gt; {&#10;                val recyclerView = contentContainer.findViewById&lt;RecyclerView&gt;(R.id.instructions_recycler_view)&#10;                recyclerView?.adapter = PreparationsAdapter(recipe?.preparations ?: emptyList(), android.R.color.black)&#10;                recyclerView?.layoutManager = LinearLayoutManager(requireContext())&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.ImageButton&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;import com.app.mealplanner.model.Recipe&#10;import com.bumptech.glide.Glide&#10;&#10;class RecipeDetailFragment : Fragment() {&#10;&#10;    companion object {&#10;        private const val ARG_RECIPE = &quot;recipe&quot;&#10;&#10;        fun newInstance(recipe: Recipe): RecipeDetailFragment {&#10;            val fragment = RecipeDetailFragment()&#10;            val args = Bundle()&#10;            args.putSerializable(ARG_RECIPE, recipe)&#10;            fragment.arguments = args&#10;            return fragment&#10;        }&#10;    }&#10;&#10;    private var recipe: Recipe? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        recipe = arguments?.getSerializable(ARG_RECIPE) as? Recipe&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_recipe_detail, container, false)&#10;&#10;        val closeButton: View = view.findViewById(R.id.close_button)&#10;        closeButton.setOnClickListener {&#10;            parentFragmentManager.popBackStack()&#10;        }&#10;&#10;        val titleTextView: TextView = view.findViewById(R.id.recipe_title)&#10;        val descriptionTextView: TextView = view.findViewById(R.id.recipe_description)&#10;        val recipeImageView: ImageView = view.findViewById(R.id.recipe_image) // Recipe image view&#10;        val recipePrepTime: TextView = view.findViewById(R.id.recipe_prep_time)&#10;&#10;        recipe?.let {&#10;            titleTextView.text = it.name&#10;            descriptionTextView.text = it.description&#10;&#10;            // Load the recipe image using Glide&#10;            if (!it.image.isNullOrEmpty()) {&#10;                Glide.with(this)&#10;                    .load(it.image)&#10;                    .placeholder(android.R.drawable.ic_menu_gallery) // Placeholder while loading&#10;                    .error(android.R.drawable.ic_dialog_alert) // Fallback if loading fails&#10;                    .into(recipeImageView)&#10;            } else {&#10;                recipeImageView.setImageResource(android.R.drawable.ic_menu_gallery) // Default image&#10;            }&#10;            recipePrepTime.text = &quot;Zubereitung: ${it.prepTime}&quot;&#10;        }&#10;&#10;        val ingredientsButton: Button = view.findViewById(R.id.ingredients_button)&#10;        val instructionsButton: Button = view.findViewById(R.id.instructions_button)&#10;        val nutritionsButton: Button = view.findViewById(R.id.nutrition_button)&#10;&#10;        ingredientsButton.setOnClickListener {&#10;            loadContent(R.layout.recipe_detail_ingredients)&#10;        }&#10;&#10;        instructionsButton.setOnClickListener {&#10;            loadContent(R.layout.recipe_detail_instructions)&#10;        }&#10;&#10;        nutritionsButton.setOnClickListener {&#10;            loadContent(R.layout.recipe_detail_nutritions)&#10;        }&#10;&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        loadContent(R.layout.recipe_detail_ingredients) // Automatically load ingredients&#10;    }&#10;&#10;    private fun loadContent(layoutResId: Int) {&#10;        val contentContainer = requireView().findViewById&lt;ViewGroup&gt;(R.id.content_container)&#10;        contentContainer.removeAllViews()&#10;        LayoutInflater.from(context).inflate(layoutResId, contentContainer, true)&#10;&#10;        when (layoutResId) {&#10;            R.layout.recipe_detail_ingredients -&gt; {&#10;                val recyclerView = contentContainer.findViewById&lt;RecyclerView&gt;(R.id.ingredients_recycler_view)&#10;                recyclerView?.adapter = IngredientsAdapter(recipe?.ingredients ?: emptyList(), android.R.color.black)&#10;                recyclerView?.layoutManager = LinearLayoutManager(requireContext())&#10;            }&#10;            R.layout.recipe_detail_instructions -&gt; {&#10;                val recyclerView = contentContainer.findViewById&lt;RecyclerView&gt;(R.id.instructions_recycler_view)&#10;                recyclerView?.adapter = PreparationsAdapter(recipe?.preparations ?: emptyList(), android.R.color.black)&#10;                recyclerView?.layoutManager = LinearLayoutManager(requireContext())&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipesFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipesFragment.kt" />
              <option name="originalContent" value="package com.app.mealplanner&#10;&#10;import AddRecipeDialogFragment&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.ItemTouchHelper&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;&#10;&#10;class RecipesFragment : Fragment(R.layout.fragment_recipes) {&#10;&#10;    private lateinit var adapter: RecipeAdapter&#10;&#10;    companion object {&#10;        private var sessionRecipes: MutableList&lt;Recipe&gt;? = null // Speichert die Reihenfolge der Rezepte während der Session&#10;        private val swipedRecipes = mutableListOf&lt;Int&gt;() // Speichert dauerhaft während der App-Sitzung&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        copyRecipesToExternalStorage()&#10;        mergeRecipesFromAssetsAndInternalStorage()&#10;&#10;        val recyclerView: RecyclerView = view.findViewById(R.id.recyclerViewRecipes)&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        adapter = RecipeAdapter(mutableListOf&lt;Recipe&gt;()) { recipeId -&gt;&#10;            val recipe = loadRecipes().find { it.id.toString() == recipeId }&#10;            if (recipe != null) {&#10;                onRecipeSwiped(recipe)&#10;            }&#10;        }&#10;        recyclerView.adapter = adapter&#10;&#10;        // Rezepte nur beim ersten Aufruf mischen&#10;        if (sessionRecipes == null) {&#10;            sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;        }&#10;&#10;        val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;        adapter.updateRecipes(filteredRecipes)&#10;&#10;        // Floating Action Button&#10;        val fabAddRecipe: View = view.findViewById(R.id.fabAddRecipe)&#10;        fabAddRecipe.setOnClickListener {&#10;            showAddRecipeMenu()&#10;        }&#10;&#10;        // Add swipe functionality&#10;        val itemTouchHelper = ItemTouchHelper(object :&#10;            ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                return false // No move functionality needed&#10;            }&#10;&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {&#10;                val position = viewHolder.adapterPosition&#10;                val recipe = adapter.getRecipes()[position]&#10;&#10;                if (direction == ItemTouchHelper.LEFT) {&#10;                    // Nach links wischen: Nur für die Session ausblenden&#10;                    swipedRecipes.add(recipe.id)&#10;                    val updatedRecipes = filterRecipes(loadRecipes())&#10;                    adapter.updateRecipes(updatedRecipes)&#10;                } else if (direction == ItemTouchHelper.RIGHT) {&#10;                    // Nach rechts wischen: Zu den Favoriten hinzufügen&#10;                    onRecipeSwiped(recipe)&#10;                }&#10;            }&#10;        })&#10;        itemTouchHelper.attachToRecyclerView(recyclerView)&#10;    }&#10;&#10;    private fun showAddRecipeDialog() {&#10;        val dialog = AddRecipeDialogFragment()&#10;        dialog.setOnRecipeAddedListener(object : AddRecipeDialogFragment.OnRecipeAddedListener {&#10;            override fun onRecipeAdded(recipe: Recipe) {&#10;                if (sessionRecipes == null) {&#10;                    sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;                }&#10;                sessionRecipes!!.add(0, recipe) // Neues Rezept an den Anfang der Session-Liste setzen&#10;                val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;                adapter.updateRecipes(filteredRecipes) // RecyclerView aktualisieren&#10;            }&#10;        })&#10;        dialog.show(parentFragmentManager, &quot;AddRecipeDialog&quot;)&#10;    }&#10;&#10;    private fun loadRecipes(): MutableList&lt;Recipe&gt; {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        return if (recipesFile.exists()) {&#10;            try {&#10;                val json = recipesFile.readText()&#10;                val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;                val recipes: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;&#10;                // Update image paths to point to internal storage&#10;                recipes.forEach { recipe -&gt;&#10;                    if (recipe.image != null) {&#10;                        val imageFile = File(requireContext().filesDir, recipe.image)&#10;                        if (imageFile.exists()) {&#10;                            recipe.image = imageFile.absolutePath&#10;                        } else {&#10;                            recipe.image = null // Reset if the image file is missing&#10;                        }&#10;                    }&#10;                }&#10;&#10;                recipes&#10;            } catch (e: Exception) {&#10;                e.printStackTrace()&#10;                mutableListOf()&#10;            }&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    private fun loadFavorites(): MutableList&lt;Recipe&gt; {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        return if (favoritesFile.exists()) {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    private fun filterRecipes(recipes: MutableList&lt;Recipe&gt;): MutableList&lt;Recipe&gt; {&#10;        val favoriteIds = loadFavorites().map { it.id }&#10;        return recipes.filter { it.id !in swipedRecipes &amp;&amp; it.id !in favoriteIds }.toMutableList()&#10;    }&#10;&#10;    private fun onRecipeSwiped(recipe: Recipe) {&#10;        swipedRecipes.add(recipe.id) // Hide recipe for the session&#10;        val updatedRecipes = filterRecipes(loadRecipes())&#10;        adapter.updateRecipes(updatedRecipes)&#10;&#10;        // Add the swiped recipe to favorites&#10;        val favorites = loadFavorites()&#10;        if (!favorites.any { it.id == recipe.id }) {&#10;            favorites.add(recipe)&#10;            saveFavorites(favorites)&#10;        }&#10;    }&#10;&#10;    private fun saveFavorites(favorites: MutableList&lt;Recipe&gt;) {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        val json = Gson().toJson(favorites)&#10;        favoritesFile.writeText(json)&#10;    }&#10;&#10;    fun addFavorite(recipe: Recipe) {&#10;        val favorites = loadFavorites()&#10;        if (!favorites.any { it.id == recipe.id }) {&#10;            favorites.add(recipe)&#10;            saveFavorites(favorites) // Save updated favorites&#10;        }&#10;    }&#10;&#10;    fun removeFavorite(recipe: Recipe) {&#10;        val favorites = loadFavorites()&#10;        if (favorites.any { it.id == recipe.id }) {&#10;            favorites.removeIf { it.id == recipe.id }&#10;            saveFavorites(favorites) // Save updated favorites&#10;        }&#10;    }&#10;&#10;    private fun mergeRecipesFromAssetsAndInternalStorage() {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val imagesDir = File(requireContext().filesDir, &quot;images&quot;)&#10;&#10;        // Ensure the images directory exists&#10;        if (!imagesDir.exists()) {&#10;            imagesDir.mkdir()&#10;        }&#10;&#10;        // Copy recipes from assets&#10;        val assetRecipes: MutableList&lt;Recipe&gt; = try {&#10;            val json = requireContext().assets.open(&quot;recipes.json&quot;).bufferedReader().use { it.readText() }&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            mutableListOf()&#10;        }&#10;&#10;        // Copy images from assets to internal storage&#10;        try {&#10;            requireContext().assets.list(&quot;images&quot;)?.forEach { imageName -&gt;&#10;                val inputStream = requireContext().assets.open(&quot;images/$imageName&quot;)&#10;                val outputFile = File(imagesDir, imageName)&#10;                if (!outputFile.exists()) {&#10;                    inputStream.use { input -&gt;&#10;                        outputFile.outputStream().use { output -&gt;&#10;                            input.copyTo(output)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;        }&#10;&#10;        // Check if the internal recipes file exists&#10;        if (!recipesFile.exists()) {&#10;            // Save the asset recipes to internal storage if the file doesn't exist&#10;            recipesFile.writeText(Gson().toJson(assetRecipes))&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;Internal recipes.json created from assets.&quot;)&#10;            return&#10;        }&#10;&#10;        // Load recipes from internal storage&#10;        val internalRecipes: MutableList&lt;Recipe&gt; = try {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            mutableListOf()&#10;        }&#10;&#10;        // Merge recipes, avoiding duplicates by `id`&#10;        val mergedRecipes = (internalRecipes + assetRecipes).distinctBy { it.id }.toMutableList()&#10;&#10;        // Save merged recipes back to internal storage&#10;        recipesFile.writeText(Gson().toJson(mergedRecipes))&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Internal recipes.json updated with merged recipes.&quot;)&#10;    }&#10;&#10;    private fun copyRecipesToExternalStorage() {&#10;        val internalFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val externalFile = File(requireContext().getExternalFilesDir(null), &quot;recipes.json&quot;)&#10;        if (internalFile.exists()) {&#10;            internalFile.copyTo(externalFile, overwrite = true)&#10;            Log.d(&#10;                &quot;RecipesFragment&quot;,&#10;                &quot;recipes.json copied to external storage: ${externalFile.absolutePath}&quot;&#10;            )&#10;        } else {&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;recipes.json file does not exist in internal storage.&quot;)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import AddRecipeDialogFragment&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.ItemTouchHelper&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;&#10;&#10;class RecipesFragment : Fragment(R.layout.fragment_recipes) {&#10;&#10;    private lateinit var adapter: RecipeAdapter&#10;&#10;    companion object {&#10;        private var sessionRecipes: MutableList&lt;Recipe&gt;? = null // Speichert die Reihenfolge der Rezepte während der Session&#10;        private val swipedRecipes = mutableListOf&lt;Int&gt;() // Speichert dauerhaft während der App-Sitzung&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        copyRecipesToExternalStorage()&#10;        mergeRecipesFromAssetsAndInternalStorage()&#10;&#10;        val recyclerView: RecyclerView = view.findViewById(R.id.recyclerViewRecipes)&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        adapter = RecipeAdapter(mutableListOf&lt;Recipe&gt;()) { recipeId -&gt;&#10;            val recipe = loadRecipes().find { it.id.toString() == recipeId }&#10;            if (recipe != null) {&#10;                onRecipeSwiped(recipe)&#10;            }&#10;        }&#10;        recyclerView.adapter = adapter&#10;&#10;        // Rezepte nur beim ersten Aufruf mischen&#10;        if (sessionRecipes == null) {&#10;            sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;        }&#10;&#10;        val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;        adapter.updateRecipes(filteredRecipes)&#10;&#10;        // Floating Action Button&#10;        val fabAddRecipe: View = view.findViewById(R.id.fabAddRecipe)&#10;        fabAddRecipe.setOnClickListener {&#10;            showAddRecipeMenu()&#10;        }&#10;&#10;        // Add swipe functionality&#10;        val itemTouchHelper = ItemTouchHelper(object :&#10;            ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                return false // No move functionality needed&#10;            }&#10;&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {&#10;                val position = viewHolder.adapterPosition&#10;                val recipe = adapter.getRecipes()[position]&#10;&#10;                if (direction == ItemTouchHelper.LEFT) {&#10;                    // Nach links wischen: Nur für die Session ausblenden&#10;                    swipedRecipes.add(recipe.id)&#10;                    val updatedRecipes = filterRecipes(loadRecipes())&#10;                    adapter.updateRecipes(updatedRecipes)&#10;                } else if (direction == ItemTouchHelper.RIGHT) {&#10;                    // Nach rechts wischen: Zu den Favoriten hinzufügen&#10;                    onRecipeSwiped(recipe)&#10;                }&#10;            }&#10;        })&#10;        itemTouchHelper.attachToRecyclerView(recyclerView)&#10;    }&#10;&#10;    private fun showAddRecipeMenu() {&#10;        val menuDialog = AddRecipeMenuDialogFragment(&#10;            onManual = {&#10;                showAddRecipeDialog()&#10;            },&#10;            onInstagram = {&#10;                ImportInstagramDialogFragment().show(parentFragmentManager, &quot;ImportInstagramDialog&quot;)&#10;            },&#10;            onWebsite = {&#10;                ImportWebsiteDialogFragment().show(parentFragmentManager, &quot;ImportWebsiteDialog&quot;)&#10;            }&#10;        )&#10;        menuDialog.show(parentFragmentManager, &quot;AddRecipeMenuDialog&quot;)&#10;    }&#10;&#10;    private fun showAddRecipeDialog() {&#10;        val dialog = AddRecipeDialogFragment()&#10;        dialog.setOnRecipeAddedListener(object : AddRecipeDialogFragment.OnRecipeAddedListener {&#10;            override fun onRecipeAdded(recipe: Recipe) {&#10;                if (sessionRecipes == null) {&#10;                    sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;                }&#10;                sessionRecipes!!.add(0, recipe) // Neues Rezept an den Anfang der Session-Liste setzen&#10;                val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;                adapter.updateRecipes(filteredRecipes) // RecyclerView aktualisieren&#10;            }&#10;        })&#10;        dialog.show(parentFragmentManager, &quot;AddRecipeDialog&quot;)&#10;    }&#10;&#10;    private fun loadRecipes(): MutableList&lt;Recipe&gt; {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        return if (recipesFile.exists()) {&#10;            try {&#10;                val json = recipesFile.readText()&#10;                val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;                val recipes: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;&#10;                // Update image paths to point to internal storage&#10;                recipes.forEach { recipe -&gt;&#10;                    if (recipe.image != null) {&#10;                        val imageFile = File(requireContext().filesDir, recipe.image)&#10;                        if (imageFile.exists()) {&#10;                            recipe.image = imageFile.absolutePath&#10;                        } else {&#10;                            recipe.image = null // Reset if the image file is missing&#10;                        }&#10;                    }&#10;                }&#10;&#10;                recipes&#10;            } catch (e: Exception) {&#10;                e.printStackTrace()&#10;                mutableListOf()&#10;            }&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    private fun loadFavorites(): MutableList&lt;Recipe&gt; {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        return if (favoritesFile.exists()) {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    private fun filterRecipes(recipes: MutableList&lt;Recipe&gt;): MutableList&lt;Recipe&gt; {&#10;        val favoriteIds = loadFavorites().map { it.id }&#10;        return recipes.filter { it.id !in swipedRecipes &amp;&amp; it.id !in favoriteIds }.toMutableList()&#10;    }&#10;&#10;    private fun onRecipeSwiped(recipe: Recipe) {&#10;        swipedRecipes.add(recipe.id) // Hide recipe for the session&#10;        val updatedRecipes = filterRecipes(loadRecipes())&#10;        adapter.updateRecipes(updatedRecipes)&#10;&#10;        // Add the swiped recipe to favorites&#10;        val favorites = loadFavorites()&#10;        if (!favorites.any { it.id == recipe.id }) {&#10;            favorites.add(recipe)&#10;            saveFavorites(favorites)&#10;        }&#10;    }&#10;&#10;    private fun saveFavorites(favorites: MutableList&lt;Recipe&gt;) {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        val json = Gson().toJson(favorites)&#10;        favoritesFile.writeText(json)&#10;    }&#10;&#10;    fun addFavorite(recipe: Recipe) {&#10;        val favorites = loadFavorites()&#10;        if (!favorites.any { it.id == recipe.id }) {&#10;            favorites.add(recipe)&#10;            saveFavorites(favorites) // Save updated favorites&#10;        }&#10;    }&#10;&#10;    fun removeFavorite(recipe: Recipe) {&#10;        val favorites = loadFavorites()&#10;        if (favorites.any { it.id == recipe.id }) {&#10;            favorites.removeIf { it.id == recipe.id }&#10;            saveFavorites(favorites) // Save updated favorites&#10;        }&#10;    }&#10;&#10;    private fun mergeRecipesFromAssetsAndInternalStorage() {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val imagesDir = File(requireContext().filesDir, &quot;images&quot;)&#10;&#10;        // Ensure the images directory exists&#10;        if (!imagesDir.exists()) {&#10;            imagesDir.mkdir()&#10;        }&#10;&#10;        // Copy recipes from assets&#10;        val assetRecipes: MutableList&lt;Recipe&gt; = try {&#10;            val json = requireContext().assets.open(&quot;recipes.json&quot;).bufferedReader().use { it.readText() }&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            mutableListOf()&#10;        }&#10;&#10;        // Copy images from assets to internal storage&#10;        try {&#10;            requireContext().assets.list(&quot;images&quot;)?.forEach { imageName -&gt;&#10;                val inputStream = requireContext().assets.open(&quot;images/$imageName&quot;)&#10;                val outputFile = File(imagesDir, imageName)&#10;                if (!outputFile.exists()) {&#10;                    inputStream.use { input -&gt;&#10;                        outputFile.outputStream().use { output -&gt;&#10;                            input.copyTo(output)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;        }&#10;&#10;        // Check if the internal recipes file exists&#10;        if (!recipesFile.exists()) {&#10;            // Save the asset recipes to internal storage if the file doesn't exist&#10;            recipesFile.writeText(Gson().toJson(assetRecipes))&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;Internal recipes.json created from assets.&quot;)&#10;            return&#10;        }&#10;&#10;        // Load recipes from internal storage&#10;        val internalRecipes: MutableList&lt;Recipe&gt; = try {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            mutableListOf()&#10;        }&#10;&#10;        // Merge recipes, avoiding duplicates by `id`&#10;        val mergedRecipes = (internalRecipes + assetRecipes).distinctBy { it.id }.toMutableList()&#10;&#10;        // Save merged recipes back to internal storage&#10;        recipesFile.writeText(Gson().toJson(mergedRecipes))&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Internal recipes.json updated with merged recipes.&quot;)&#10;    }&#10;&#10;    private fun copyRecipesToExternalStorage() {&#10;        val internalFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val externalFile = File(requireContext().getExternalFilesDir(null), &quot;recipes.json&quot;)&#10;        if (internalFile.exists()) {&#10;            internalFile.copyTo(externalFile, overwrite = true)&#10;            Log.d(&#10;                &quot;RecipesFragment&quot;,&#10;                &quot;recipes.json copied to external storage: ${externalFile.absolutePath}&quot;&#10;            )&#10;        } else {&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;recipes.json file does not exist in internal storage.&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/network/CHATGPTApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/network/CHATGPTApiService.kt" />
              <option name="originalContent" value="package com.app.mealplanner.network&#10;&#10;import android.content.Context&#10;import com.app.mealplanner.BuildConfig&#10;import okhttp3.MediaType.Companion.toMediaTypeOrNull&#10;import okhttp3.OkHttpClient&#10;import okhttp3.Request&#10;import okhttp3.RequestBody&#10;import org.json.JSONObject&#10;&#10;class CHATGPTApiService(private val context: Context) {&#10;    private val client = OkHttpClient()&#10;&#10;&#10;    val JSON_FORMAT = &quot;{\n&quot; +&#10;            &quot;  \&quot;id\&quot;: 0,\n&quot; +&#10;            &quot;  \&quot;name\&quot;: \&quot;\&quot;,\n&quot; +&#10;            &quot;  \&quot;description\&quot;: \&quot;\&quot;,\n&quot; +&#10;            &quot;  \&quot;ingredients\&quot;: [],\n&quot; +&#10;            &quot;  \&quot;preparations\&quot;: [],\n&quot; +&#10;            &quot;  \&quot;image\&quot;: \&quot;\&quot;,\n&quot; +&#10;            &quot;  \&quot;servings\&quot;: 0,\n&quot; +&#10;            &quot;  \&quot;prepTime\&quot;: \&quot;\&quot;,\n&quot; +&#10;            &quot;  \&quot;notes\&quot;: \&quot;\&quot;\n&quot; +&#10;            &quot;}&quot;&#10;&#10;    fun extractRecipeFromUrl(url: String): String? {&#10;        val apiKey = BuildConfig.CHATGPT_API_KEY&#10;        val endpoint = &quot;https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$apiKey&quot;&#10;        val prompt = &quot;Extrahiere das Rezept aus folgendem Link: $url. Gib nur das Rezept als JSON in folgendem Format $JSON_FORMAT zurück.&quot;&#10;        val json = JSONObject()&#10;        val contents = JSONObject()&#10;        val partsArray = org.json.JSONArray()&#10;        partsArray.put(JSONObject().put(&quot;text&quot;, prompt))&#10;        contents.put(&quot;parts&quot;, partsArray)&#10;        val contentsArray = org.json.JSONArray()&#10;        contentsArray.put(contents)&#10;        json.put(&quot;contents&quot;, contentsArray)&#10;        val body = RequestBody.create(&quot;application/json&quot;.toMediaTypeOrNull(), json.toString())&#10;        val request = Request.Builder()&#10;            .url(endpoint)&#10;            .post(body)&#10;            .build()&#10;        client.newCall(request).execute().use { response -&gt;&#10;            if (!response.isSuccessful) {&#10;                android.util.Log.e(&quot;GeminiApiService&quot;, &quot;API call failed: ${response.code}&quot;)&#10;                return null&#10;            }&#10;            val responseBody = response.body?.string() ?: return null&#10;            android.util.Log.d(&quot;GeminiApiService&quot;, &quot;API response: $responseBody&quot;)&#10;            val responseJson = JSONObject(responseBody)&#10;            val result = responseJson.optJSONArray(&quot;candidates&quot;)?.optJSONObject(0)?.optJSONObject(&quot;content&quot;)?.optJSONArray(&quot;parts&quot;)?.optJSONObject(0)?.optString(&quot;text&quot;)&#10;            if (result == null) {&#10;                android.util.Log.e(&quot;GeminiApiService&quot;, &quot;No recipe text found in response JSON&quot;)&#10;            }&#10;            return result&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.app.mealplanner.network&#10;&#10;import android.content.Context&#10;import com.app.mealplanner.BuildConfig&#10;import okhttp3.MediaType.Companion.toMediaTypeOrNull&#10;import okhttp3.OkHttpClient&#10;import okhttp3.Request&#10;import okhttp3.RequestBody&#10;import org.json.JSONObject&#10;&#10;class CHATGPTApiService(private val context: Context) {&#10;    private val client = OkHttpClient()&#10;&#10;&#10;    val JSON_FORMAT = &quot;{\n&quot; +&#10;            &quot;  \&quot;id\&quot;: 0,\n&quot; +&#10;            &quot;  \&quot;name\&quot;: \&quot;\&quot;,\n&quot; +&#10;            &quot;  \&quot;description\&quot;: \&quot;\&quot;,\n&quot; +&#10;            &quot;  \&quot;ingredients\&quot;: [],\n&quot; +&#10;            &quot;  \&quot;preparations\&quot;: [],\n&quot; +&#10;            &quot;  \&quot;image\&quot;: \&quot;\&quot;,\n&quot; +&#10;            &quot;  \&quot;servings\&quot;: 0,\n&quot; +&#10;            &quot;  \&quot;prepTime\&quot;: \&quot;\&quot;,\n&quot; +&#10;            &quot;  \&quot;notes\&quot;: \&quot;\&quot;\n&quot; +&#10;            &quot;}&quot;&#10;&#10;    fun extractRecipeFromUrl(url: String): String? {&#10;        val apiKey = BuildConfig.CHATGPT_API_KEY&#10;        val endpoint = &quot;https://api.openai.com/v1/chat/completions&quot;&#10;        val prompt = &quot;Extrahiere das Rezept aus folgendem Link: $url. Gib nur das Rezept als JSON in folgendem Format $JSON_FORMAT zurück.&quot;&#10;        val json = JSONObject()&#10;        json.put(&quot;model&quot;, &quot;gpt-3.5-turbo&quot;)&#10;        val messagesArray = org.json.JSONArray()&#10;        val userMessage = JSONObject()&#10;        userMessage.put(&quot;role&quot;, &quot;user&quot;)&#10;        userMessage.put(&quot;content&quot;, prompt)&#10;        messagesArray.put(userMessage)&#10;        json.put(&quot;messages&quot;, messagesArray)&#10;        val body = RequestBody.create(&quot;application/json&quot;.toMediaTypeOrNull(), json.toString())&#10;        val request = Request.Builder()&#10;            .url(endpoint)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $apiKey&quot;)&#10;            .post(body)&#10;            .build()&#10;        client.newCall(request).execute().use { response -&gt;&#10;            if (!response.isSuccessful) {&#10;                android.util.Log.e(&quot;CHATGPTApiService&quot;, &quot;API call failed: ${response.code}&quot;)&#10;                return null&#10;            }&#10;            val responseBody = response.body?.string() ?: return null&#10;            android.util.Log.d(&quot;CHATGPTApiService&quot;, &quot;API response: $responseBody&quot;)&#10;            val responseJson = JSONObject(responseBody)&#10;            val result = responseJson.optJSONArray(&quot;choices&quot;)?.optJSONObject(0)?.optJSONObject(&quot;message&quot;)?.optString(&quot;content&quot;)&#10;            if (result == null) {&#10;                android.util.Log.e(&quot;CHATGPTApiService&quot;, &quot;No recipe text found in response JSON&quot;)&#10;            }&#10;            return result&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/network/GeminiApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/network/GeminiApiService.kt" />
              <option name="updatedContent" value="package com.app.mealplanner.network&#10;&#10;import android.content.Context&#10;import okhttp3.MediaType.Companion.toMediaTypeOrNull&#10;import okhttp3.OkHttpClient&#10;import okhttp3.Request&#10;import okhttp3.RequestBody&#10;import org.json.JSONObject&#10;&#10;class GeminiApiService(private val context: Context) {&#10;    private val client = OkHttpClient()&#10;&#10;    private fun getApiKey(): String {&#10;        val properties = context.assets.open(&quot;local.properties&quot;).bufferedReader().use { it.readText() }&#10;        val regex = Regex(&quot;GEMINI_API_KEY=(.*)&quot;)&#10;        return regex.find(properties)?.groupValues?.get(1) ?: &quot;&quot;&#10;    }&#10;&#10;    fun extractRecipeFromUrl(url: String): String? {&#10;        val apiKey = getApiKey()&#10;        val endpoint = &quot;https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$apiKey&quot;&#10;        val prompt = &quot;Extrahiere das Rezept aus folgendem Link: $url. Gib nur das Rezept als Text zurück.&quot;&#10;        val json = JSONObject()&#10;        val contents = JSONObject()&#10;        contents.put(&quot;parts&quot;, listOf(mapOf(&quot;text&quot; to prompt)))&#10;        json.put(&quot;contents&quot;, listOf(contents))&#10;        val body = RequestBody.create(&quot;application/json&quot;.toMediaTypeOrNull(), json.toString())&#10;        val request = Request.Builder()&#10;            .url(endpoint)&#10;            .post(body)&#10;            .build()&#10;        client.newCall(request).execute().use { response -&gt;&#10;            if (!response.isSuccessful) return null&#10;            val responseBody = response.body?.string() ?: return null&#10;            val responseJson = JSONObject(responseBody)&#10;            return responseJson.optJSONArray(&quot;candidates&quot;)?.optJSONObject(0)?.optJSONObject(&quot;content&quot;)?.optJSONArray(&quot;parts&quot;)?.optJSONObject(0)?.optString(&quot;text&quot;)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/pill_button_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/pill_button_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#BDBDBD&quot; /&gt; &lt;!-- Mittelgrau --&gt;&#10;    &lt;corners android:radius=&quot;28dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/rounded_button_yellow.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/rounded_button_yellow.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/AprimaryColor&quot; /&gt;&#10;    &lt;corners android:radius=&quot;24dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/rounded_grey_button.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/rounded_grey_button.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#BDBDBD&quot; /&gt; &lt;!-- Mittelgrau --&gt;&#10;    &lt;corners android:radius=&quot;24dp&quot; /&gt; &lt;!-- Langgezogener Kreis --&gt;&#10;&lt;/shape&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#BDBDBD&quot; /&gt; &lt;!-- Mittelgrau --&gt;&#10;    &lt;corners android:radius=&quot;24dp&quot; /&gt; &lt;!-- Langgezogener Kreis --&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/rounded_orange_button.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/rounded_orange_button.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#FFB300&quot; /&gt; &lt;!-- Orange/Gelb (Amber 700) --&gt;&#10;    &lt;corners android:radius=&quot;24dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#FFB300&quot; /&gt; &lt;!-- Orange/Gelb (Amber 700) --&gt;&#10;    &lt;corners android:radius=&quot;24dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_add_recipe.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_add_recipe.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@android:color/white&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;0dp&quot;&#10;        android:elevation=&quot;0dp&quot;&gt;&#10;&#10;        &lt;!-- AppBar --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/appBar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:background=&quot;@android:color/white&quot;&#10;            android:elevation=&quot;4dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/backButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_revert&quot;&#10;                android:contentDescription=&quot;Back&quot;&#10;                android:padding=&quot;8dp&quot;&#10;                app:tint=&quot;@color/AcardTextColor&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Rezept hinzufügen&quot;&#10;                android:textColor=&quot;@color/AcardTextColor&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_gravity=&quot;center_vertical&quot;&#10;                android:layout_marginStart=&quot;16dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;ScrollView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:fillViewport=&quot;true&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:background=&quot;@android:color/white&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;!-- Titel --&gt;&#10;                &lt;EditText&#10;                    android:id=&quot;@+id/inputRecipeTitle&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Rezept Titel&quot;&#10;                    android:inputType=&quot;text&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:background=&quot;@android:color/transparent&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textColorHint=&quot;@android:color/darker_gray&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;/&gt;&#10;&#10;                &lt;!-- Bild Upload --&gt;&#10;                &lt;FrameLayout&#10;                    android:id=&quot;@+id/buttonUploadImage&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;200dp&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot;&#10;                    android:background=&quot;@drawable/image_placeholder&quot;&#10;                    android:clipToOutline=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/selectedImageView&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:scaleType=&quot;centerCrop&quot;&#10;                        android:visibility=&quot;gone&quot;&#10;                        android:contentDescription=&quot;Ausgewähltes Bild&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:id=&quot;@+id/uploadPlaceholder&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;ImageView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:src=&quot;@android:drawable/ic_menu_camera&quot;&#10;                            android:contentDescription=&quot;Bild auswählen&quot;&#10;                            app:tint=&quot;@color/AcardTextColor&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Bild hochladen&quot;&#10;                            android:textColor=&quot;@color/AcardTextColor&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/FrameLayout&gt;&#10;&#10;                &lt;!-- Beschreibung --&gt;&#10;                &lt;EditText&#10;                    android:id=&quot;@+id/inputDescription&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Beschreibung&quot;&#10;                    android:inputType=&quot;textMultiLine&quot;&#10;                    android:minLines=&quot;2&quot;&#10;                    android:gravity=&quot;top&quot;&#10;                    android:background=&quot;@android:color/transparent&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textColorHint=&quot;@android:color/darker_gray&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;!-- Zutaten --&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Zutaten&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;androidx.recyclerview.widget.RecyclerView&#10;                    android:id=&quot;@+id/ingredientsRecyclerView&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;150dp&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:background=&quot;@drawable/edit_text_background&quot; /&gt;&#10;&#10;                &lt;EditText&#10;                    android:id=&quot;@+id/inputNewIngredient&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Zutat hinzufügen&quot;&#10;                    android:inputType=&quot;text&quot;&#10;                    android:imeOptions=&quot;actionDone&quot;&#10;                    android:background=&quot;@drawable/edit_text_background&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textColorHint=&quot;@android:color/darker_gray&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;!-- Zubereitung --&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Zubereitung&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;androidx.recyclerview.widget.RecyclerView&#10;                    android:id=&quot;@+id/instructionsRecyclerView&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;150dp&quot;&#10;                    android:background=&quot;@drawable/edit_text_background&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;EditText&#10;                    android:id=&quot;@+id/inputNewInstruction&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Zubereitungsschritt hinzufügen&quot;&#10;                    android:inputType=&quot;text&quot;&#10;                    android:imeOptions=&quot;actionDone&quot;&#10;                    android:background=&quot;@drawable/edit_text_background&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                &lt;!-- Portionen --&gt;&#10;                &lt;EditText&#10;                    android:id=&quot;@+id/inputServings&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Portionen&quot;&#10;                    android:inputType=&quot;number&quot;&#10;                    android:background=&quot;@drawable/edit_text_background&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                &lt;!-- Zubereitungszeit --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;EditText&#10;                        android:id=&quot;@+id/inputPrepHours&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:hint=&quot;Stunden&quot;&#10;                        android:inputType=&quot;number&quot;&#10;                        android:background=&quot;@drawable/edit_text_background&quot;&#10;                        android:textColor=&quot;@color/AcardTextColor&quot; /&gt;&#10;&#10;                    &lt;EditText&#10;                        android:id=&quot;@+id/inputPrepMinutes&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:hint=&quot;Minuten&quot;&#10;                        android:inputType=&quot;number&quot;&#10;                        android:background=&quot;@drawable/edit_text_background&quot;&#10;                        android:layout_marginStart=&quot;8dp&quot;&#10;                        android:textColor=&quot;@color/AcardTextColor&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- Notizen --&gt;&#10;                &lt;EditText&#10;                    android:id=&quot;@+id/inputNotes&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Notizen (optional)&quot;&#10;                    android:inputType=&quot;textMultiLine&quot;&#10;                    android:minLines=&quot;2&quot;&#10;                    android:background=&quot;@drawable/edit_text_background&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                &lt;!-- Button --&gt;&#10;                &lt;Button&#10;                    android:id=&quot;@+id/buttonAddRecipe&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Rezept hinzufügen&quot;&#10;                    android:layout_marginTop=&quot;24dp&quot;&#10;                    android:backgroundTint=&quot;@color/AprimaryColor&quot;&#10;                    android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/ScrollView&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/FrameLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@android:color/white&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;0dp&quot;&#10;        android:elevation=&quot;0dp&quot;&gt;&#10;&#10;        &lt;!-- AppBar --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/appBar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:background=&quot;@android:color/white&quot;&#10;            android:elevation=&quot;4dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/backButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_revert&quot;&#10;                android:contentDescription=&quot;Back&quot;&#10;                android:padding=&quot;8dp&quot;&#10;                app:tint=&quot;@color/AcardTextColor&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Rezept hinzufügen&quot;&#10;                android:textColor=&quot;@color/AcardTextColor&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_gravity=&quot;center_vertical&quot;&#10;                android:layout_marginStart=&quot;16dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;ScrollView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:fillViewport=&quot;true&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:background=&quot;@android:color/white&quot;&#10;                android:padding=&quot;0dp&quot;&gt;&#10;&#10;                &lt;!-- Titel --&gt;&#10;                &lt;EditText&#10;                    android:id=&quot;@+id/inputRecipeTitle&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Rezept Titel&quot;&#10;                    android:inputType=&quot;text&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:background=&quot;@android:color/transparent&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textColorHint=&quot;@android:color/darker_gray&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;/&gt;&#10;&#10;                &lt;!-- Bild Upload --&gt;&#10;                &lt;FrameLayout&#10;                    android:id=&quot;@+id/buttonUploadImage&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;200dp&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot;&#10;                    android:background=&quot;@drawable/image_placeholder&quot;&#10;                    android:clipToOutline=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/selectedImageView&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:scaleType=&quot;centerCrop&quot;&#10;                        android:visibility=&quot;gone&quot;&#10;                        android:contentDescription=&quot;Ausgewähltes Bild&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:id=&quot;@+id/uploadPlaceholder&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;ImageView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:src=&quot;@android:drawable/ic_menu_camera&quot;&#10;                            android:contentDescription=&quot;Bild auswählen&quot;&#10;                            app:tint=&quot;@color/AcardTextColor&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Bild hochladen&quot;&#10;                            android:textColor=&quot;@color/AcardTextColor&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/FrameLayout&gt;&#10;&#10;                &lt;!-- Beschreibung --&gt;&#10;                &lt;EditText&#10;                    android:id=&quot;@+id/inputDescription&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Beschreibung&quot;&#10;                    android:inputType=&quot;textMultiLine&quot;&#10;                    android:minLines=&quot;2&quot;&#10;                    android:gravity=&quot;top&quot;&#10;                    android:background=&quot;@android:color/transparent&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textColorHint=&quot;@android:color/darker_gray&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;!-- Zutaten --&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Zutaten&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;androidx.recyclerview.widget.RecyclerView&#10;                    android:id=&quot;@+id/ingredientsRecyclerView&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;150dp&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:background=&quot;@drawable/edit_text_background&quot; /&gt;&#10;&#10;                &lt;EditText&#10;                    android:id=&quot;@+id/inputNewIngredient&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Zutat hinzufügen&quot;&#10;                    android:inputType=&quot;text&quot;&#10;                    android:imeOptions=&quot;actionDone&quot;&#10;                    android:background=&quot;@drawable/edit_text_background&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textColorHint=&quot;@android:color/darker_gray&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;!-- Zubereitung --&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Zubereitung&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;                &lt;androidx.recyclerview.widget.RecyclerView&#10;                    android:id=&quot;@+id/instructionsRecyclerView&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;150dp&quot;&#10;                    android:background=&quot;@drawable/edit_text_background&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;EditText&#10;                    android:id=&quot;@+id/inputNewInstruction&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Zubereitungsschritt hinzufügen&quot;&#10;                    android:inputType=&quot;text&quot;&#10;                    android:imeOptions=&quot;actionDone&quot;&#10;                    android:background=&quot;@drawable/edit_text_background&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                &lt;!-- Portionen --&gt;&#10;                &lt;EditText&#10;                    android:id=&quot;@+id/inputServings&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Portionen&quot;&#10;                    android:inputType=&quot;number&quot;&#10;                    android:background=&quot;@drawable/edit_text_background&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                &lt;!-- Zubereitungszeit --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;EditText&#10;                        android:id=&quot;@+id/inputPrepHours&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:hint=&quot;Stunden&quot;&#10;                        android:inputType=&quot;number&quot;&#10;                        android:background=&quot;@drawable/edit_text_background&quot;&#10;                        android:textColor=&quot;@color/AcardTextColor&quot; /&gt;&#10;&#10;                    &lt;EditText&#10;                        android:id=&quot;@+id/inputPrepMinutes&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:hint=&quot;Minuten&quot;&#10;                        android:inputType=&quot;number&quot;&#10;                        android:background=&quot;@drawable/edit_text_background&quot;&#10;                        android:layout_marginStart=&quot;8dp&quot;&#10;                        android:textColor=&quot;@color/AcardTextColor&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- Notizen --&gt;&#10;                &lt;EditText&#10;                    android:id=&quot;@+id/inputNotes&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:hint=&quot;Notizen (optional)&quot;&#10;                    android:inputType=&quot;textMultiLine&quot;&#10;                    android:minLines=&quot;2&quot;&#10;                    android:background=&quot;@drawable/edit_text_background&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot;&#10;                    android:textColor=&quot;@color/AcardTextColor&quot;&#10;                    android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                &lt;!-- Button --&gt;&#10;                &lt;Button&#10;                    android:id=&quot;@+id/buttonAddRecipe&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Rezept hinzufügen&quot;&#10;                    android:layout_marginTop=&quot;24dp&quot;&#10;                    android:backgroundTint=&quot;@color/AprimaryColor&quot;&#10;                    android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/ScrollView&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_add_recipe_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_add_recipe_menu.xml" />
              <option name="originalContent" value="                android:tint=&quot;@android:color/white&quot; /&gt;&#10;    &lt;/FrameLayout&gt;&#10;                android:contentDescription=&quot;Plus Icon&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/FrameLayout&gt;&#10;&#10;    &lt;FrameLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/buttonWebsite&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:background=&quot;@drawable/pill_button_background&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;true&quot;&gt;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;28dp&quot;&#10;                android:layout_height=&quot;28dp&quot;&#10;                android:src=&quot;@android:drawable/ic_input_add&quot;&#10;                android:tint=&quot;@android:color/white&quot;&#10;                android:contentDescription=&quot;Plus Icon&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Website importieren&quot;&#10;                android:textColor=&quot;#FFFFFF&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;&#10;                android:shadowColor=&quot;#66000000&quot;&#10;                android:shadowDx=&quot;0&quot;&#10;                android:shadowDy=&quot;1&quot;&#10;                android:shadowRadius=&quot;2&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/FrameLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@android:color/transparent&quot;&#10;    android:padding=&quot;24dp&quot;&#10;    android:gravity=&quot;center&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/buttonManual&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;56dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:background=&quot;@drawable/pill_button_background&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:minWidth=&quot;120dp&quot;&#10;        android:paddingStart=&quot;24dp&quot;&#10;        android:paddingEnd=&quot;32dp&quot;&gt;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;28dp&quot;&#10;            android:layout_height=&quot;28dp&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:src=&quot;@android:drawable/ic_input_add&quot;&#10;            android:tint=&quot;@android:color/white&quot;&#10;            android:contentDescription=&quot;Plus Icon&quot; /&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Manuell hinzufügen&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:layout_marginStart=&quot;16dp&quot;&#10;            android:shadowColor=&quot;#66000000&quot;&#10;            android:shadowDx=&quot;0&quot;&#10;            android:shadowDy=&quot;1&quot;&#10;            android:shadowRadius=&quot;2&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/buttonInstagram&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;56dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:background=&quot;@drawable/pill_button_background&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:minWidth=&quot;120dp&quot;&#10;        android:paddingStart=&quot;24dp&quot;&#10;        android:paddingEnd=&quot;32dp&quot;&gt;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;28dp&quot;&#10;            android:layout_height=&quot;28dp&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:src=&quot;@android:drawable/ic_input_add&quot;&#10;            android:tint=&quot;@android:color/white&quot;&#10;            android:contentDescription=&quot;Plus Icon&quot; /&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Instagram importieren&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:layout_marginStart=&quot;16dp&quot;&#10;            android:shadowColor=&quot;#66000000&quot;&#10;            android:shadowDx=&quot;0&quot;&#10;            android:shadowDy=&quot;1&quot;&#10;            android:shadowRadius=&quot;2&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/buttonWebsite&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;56dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:background=&quot;@drawable/pill_button_background&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:minWidth=&quot;120dp&quot;&#10;        android:paddingStart=&quot;24dp&quot;&#10;        android:paddingEnd=&quot;32dp&quot;&gt;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;28dp&quot;&#10;            android:layout_height=&quot;28dp&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:src=&quot;@android:drawable/ic_input_add&quot;&#10;            android:tint=&quot;@android:color/white&quot;&#10;            android:contentDescription=&quot;Plus Icon&quot; /&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Website importieren&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:layout_marginStart=&quot;16dp&quot;&#10;            android:shadowColor=&quot;#66000000&quot;&#10;            android:shadowDx=&quot;0&quot;&#10;            android:shadowDy=&quot;1&quot;&#10;            android:shadowRadius=&quot;2&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_import_instagram.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_import_instagram.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&#10;    android:background=&quot;@color/AbackgroundColor&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Instagram-Link einfügen&quot;&#10;        android:textColor=&quot;@color/AcardTextColor&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/inputInstagramLink&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Instagram-Link&quot;&#10;        android:inputType=&quot;textUri&quot;&#10;        android:background=&quot;@drawable/edit_text_background&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:textColor=&quot;@color/AcardTextColor&quot;&#10;        android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/buttonImportInstagram&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Importieren&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:backgroundTint=&quot;@color/AprimaryColor&quot;&#10;        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_import_website.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_import_website.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&#10;    android:background=&quot;@color/AbackgroundColor&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Website-Link einfügen&quot;&#10;        android:textColor=&quot;@color/AcardTextColor&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/inputWebsiteLink&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Website-Link&quot;&#10;        android:inputType=&quot;textUri&quot;&#10;        android:background=&quot;@drawable/edit_text_background&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:textColor=&quot;@color/AcardTextColor&quot;&#10;        android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/buttonImportWebsite&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Importieren&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:backgroundTint=&quot;@color/AprimaryColor&quot;&#10;        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_recipe_detail.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_recipe_detail.xml" />
              <option name="originalContent" value="&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;200dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/recipe_image&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:scaleType=&quot;centerCrop&quot;&#10;                android:src=&quot;@drawable/ic_launcher_foreground&quot;&#10;                android:contentDescription=&quot;Rezeptbild&quot; /&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/close_button&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:layout_gravity=&quot;start|top&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_close_clear_cancel&quot;&#10;                android:contentDescription=&quot;Schließen&quot;&#10;                android:padding=&quot;8dp&quot;&#10;                android:alpha=&quot;0.7&quot; /&gt;&#10;        &lt;/FrameLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_title&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:text=&quot;Rezepttitel&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:gravity=&quot;center&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_horizontal&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/recipe_prep_time&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Zubereitung: 15m&quot;&#10;                android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/recipe_cook_time&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Kochzeit: 15m&quot;&#10;                android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/recipe_total_time&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Gesamt: 30m&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_description&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Schnell, einfach &amp;amp; so gut, dass man sie echt jeden Tag essen könnte!&quot;&#10;            android:padding=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_horizontal&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/ingredients_button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Zutaten&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/instructions_button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Anleitung&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/nutrition_button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Nährwerte&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:id=&quot;@+id/content_container&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:padding=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_notes_title&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Notizen&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:paddingStart=&quot;16dp&quot;&#10;            android:paddingEnd=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_notes_content&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Rezeptnotizen&quot;&#10;            android:padding=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
              <option name="updatedContent" value="&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;200dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/recipe_image&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:scaleType=&quot;centerCrop&quot;&#10;                android:src=&quot;@drawable/ic_launcher_foreground&quot;&#10;                android:contentDescription=&quot;Rezeptbild&quot; /&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/close_button&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:layout_gravity=&quot;start|top&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_close_clear_cancel&quot;&#10;                android:contentDescription=&quot;Schließen&quot;&#10;                android:padding=&quot;8dp&quot;&#10;                android:alpha=&quot;0.7&quot; /&gt;&#10;        &lt;/FrameLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_title&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:text=&quot;Rezepttitel&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:gravity=&quot;center&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_horizontal&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/recipe_prep_time&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Zubereitung: 15m&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_description&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Schnell, einfach &amp;amp; so gut, dass man sie echt jeden Tag essen könnte!&quot;&#10;            android:padding=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_horizontal&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/ingredients_button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Zutaten&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/instructions_button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Anleitung&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/nutrition_button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Nährwerte&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:id=&quot;@+id/content_container&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:padding=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_notes_title&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Notizen&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:paddingStart=&quot;16dp&quot;&#10;            android:paddingEnd=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_notes_content&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Rezeptnotizen&quot;&#10;            android:padding=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_ingredient.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_ingredient.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:padding=&quot;0dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/ingredientText&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Ingredient&quot;&#10;        android:textSize=&quot;16sp&quot; /&gt;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;wrap_content&quot;&#13;&#10;    android:orientation=&quot;horizontal&quot;&#13;&#10;    android:padding=&quot;0dp&quot;&#13;&#10;    android:gravity=&quot;center_vertical&quot;&gt;&#13;&#10;&#13;&#10;    &lt;TextView&#13;&#10;        android:id=&quot;@+id/ingredientText&quot;&#13;&#10;        android:layout_width=&quot;0dp&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_weight=&quot;1&quot;&#13;&#10;        android:text=&quot;Ingredient&quot;&#13;&#10;        android:textSize=&quot;16sp&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;ImageView&#13;&#10;        android:id=&quot;@+id/dragHandle&quot;&#13;&#10;        android:layout_width=&quot;24dp&quot;&#13;&#10;        android:layout_height=&quot;24dp&quot;&#13;&#10;        android:src=&quot;@android:drawable/ic_menu_sort_by_size&quot;&#13;&#10;        android:contentDescription=&quot;Verschieben&quot;&#13;&#10;        android:padding=&quot;4dp&quot;&#13;&#10;        android:layout_marginEnd=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;ImageView&#13;&#10;        android:id=&quot;@+id/deleteIngredient&quot;&#13;&#10;        android:layout_width=&quot;24dp&quot;&#13;&#10;        android:layout_height=&quot;24dp&quot;&#13;&#10;        android:src=&quot;@android:drawable/ic_menu_close_clear_cancel&quot;&#13;&#10;        android:contentDescription=&quot;Löschen&quot;&#13;&#10;        android:padding=&quot;4dp&quot; /&gt;&#13;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_preparation.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_preparation.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:padding=&quot;0dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/preparationText&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Preparation&quot;&#10;        android:textSize=&quot;16sp&quot; /&gt;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;wrap_content&quot;&#13;&#10;    android:orientation=&quot;horizontal&quot;&#13;&#10;    android:padding=&quot;0dp&quot;&#13;&#10;    android:gravity=&quot;center_vertical&quot;&gt;&#13;&#10;&#13;&#10;    &lt;TextView&#13;&#10;        android:id=&quot;@+id/preparationText&quot;&#13;&#10;        android:layout_width=&quot;0dp&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_weight=&quot;1&quot;&#13;&#10;        android:text=&quot;Preparation&quot;&#13;&#10;        android:textSize=&quot;16sp&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;ImageView&#13;&#10;        android:id=&quot;@+id/dragHandle&quot;&#13;&#10;        android:layout_width=&quot;24dp&quot;&#13;&#10;        android:layout_height=&quot;24dp&quot;&#13;&#10;        android:src=&quot;@android:drawable/ic_menu_sort_by_size&quot;&#13;&#10;        android:contentDescription=&quot;Verschieben&quot;&#13;&#10;        android:padding=&quot;4dp&quot;&#13;&#10;        android:layout_marginEnd=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;ImageView&#13;&#10;        android:id=&quot;@+id/deletePreparation&quot;&#13;&#10;        android:layout_width=&quot;24dp&quot;&#13;&#10;        android:layout_height=&quot;24dp&quot;&#13;&#10;        android:src=&quot;@android:drawable/ic_menu_close_clear_cancel&quot;&#13;&#10;        android:contentDescription=&quot;Löschen&quot;&#13;&#10;        android:padding=&quot;4dp&quot; /&gt;&#13;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/recipe_detail_ingredients.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/recipe_detail_ingredients.xml" />
              <option name="originalContent" value="&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Zutaten&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:paddingBottom=&quot;8dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Portionen:&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:layout_marginRight=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/servings_count&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;4&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textStyle=&quot;bold&quot;/&gt;&#10;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:paddingBottom=&quot;8dp&quot;&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/ingredient_name_header&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;2&quot;&#10;            android:text=&quot;Zutat&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/ingredient_quantity_header&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Menge&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:gravity=&quot;end&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/ingredients_recycler_view&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:orientation=&quot;vertical&quot;&#13;&#10;    android:padding=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;    &lt;TextView&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:text=&quot;Zutaten&quot;&#13;&#10;        android:textSize=&quot;20sp&quot;&#13;&#10;        android:textStyle=&quot;bold&quot;&#13;&#10;        android:paddingBottom=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:orientation=&quot;horizontal&quot;&#13;&#10;        android:gravity=&quot;center_vertical&quot;&#13;&#10;        android:paddingBottom=&quot;8dp&quot;&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:text=&quot;Portionen:&quot;&#13;&#10;            android:textSize=&quot;16sp&quot;&#13;&#10;            android:layout_marginRight=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/servings_count&quot;&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:text=&quot;-&quot;&#13;&#10;            android:textSize=&quot;16sp&quot;&#13;&#10;            android:textStyle=&quot;bold&quot;/&gt;&#13;&#10;&#13;&#10;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:orientation=&quot;horizontal&quot;&#13;&#10;        android:paddingBottom=&quot;8dp&quot;&gt;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/ingredient_name_header&quot;&#13;&#10;            android:layout_width=&quot;0dp&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_weight=&quot;2&quot;&#13;&#10;            android:text=&quot;Zutat&quot;&#13;&#10;            android:textSize=&quot;16sp&quot;&#13;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/ingredient_quantity_header&quot;&#13;&#10;            android:layout_width=&quot;0dp&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_weight=&quot;1&quot;&#13;&#10;            android:text=&quot;Menge&quot;&#13;&#10;            android:textSize=&quot;16sp&quot;&#13;&#10;            android:textStyle=&quot;bold&quot;&#13;&#10;            android:gravity=&quot;end&quot;/&gt;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#13;&#10;        android:id=&quot;@+id/ingredients_recycler_view&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot; /&gt;&#13;&#10;&#13;&#10;&#13;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>