<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/AddRecipeDialogFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/AddRecipeDialogFragment.kt" />
              <option name="originalContent" value="import android.app.Activity&#10;import android.content.Intent&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.LinearLayout&#10;import android.widget.Toast&#10;import androidx.fragment.app.DialogFragment&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.InputStream&#10;&#10;class AddRecipeDialogFragment : DialogFragment() {&#10;&#10;    private var selectedImagePath: String? = null&#10;    private var imageUri: Uri? = null&#10;&#10;    interface OnRecipeAddedListener {&#10;        fun onRecipeAdded(recipe: Recipe)&#10;    }&#10;&#10;    private var listener: OnRecipeAddedListener? = null&#10;&#10;    fun setOnRecipeAddedListener(listener: OnRecipeAddedListener) {&#10;        this.listener = listener&#10;    }&#10;&#10;    private val ingredients = mutableListOf&lt;String&gt;()&#10;    private lateinit var ingredientsAdapter: IngredientsAdapter&#10;&#10;    private val preparations = mutableListOf&lt;String&gt;()&#10;    private lateinit var preparationsAdapter: PreparationsAdapter&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.dialog_add_recipe, container, false)&#10;    }&#10;&#10;    override fun onStart() {&#10;        super.onStart()&#10;        dialog?.window?.setLayout(&#10;            ViewGroup.LayoutParams.MATCH_PARENT,&#10;            ViewGroup.LayoutParams.MATCH_PARENT&#10;        )&#10;        dialog?.window?.setBackgroundDrawableResource(android.R.color.transparent) // Transparent background&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        val nameInput: EditText = view.findViewById(R.id.inputRecipeTitle)&#10;        val preparationInput: EditText = view.findViewById(R.id.inputDescription)&#10;        val newIngredientInput: EditText = view.findViewById(R.id.inputNewIngredient)&#10;        val servingsInput: EditText = view.findViewById(R.id.inputServings)&#10;        val prepHoursInput: EditText = view.findViewById(R.id.inputPrepHours)&#10;        val prepMinutesInput: EditText = view.findViewById(R.id.inputPrepMinutes)&#10;        val notesInput: EditText = view.findViewById(R.id.inputNotes)&#10;        val saveButton: Button = view.findViewById(R.id.buttonAddRecipe)&#10;        val ingredientsRecyclerView: RecyclerView = view.findViewById(R.id.ingredientsRecyclerView)&#10;        val newPreparationInput: EditText = view.findViewById(R.id.inputNewInstruction)&#10;        val preparationsRecyclerView: RecyclerView = view.findViewById(R.id.instructionsRecyclerView)&#10;&#10;&#10;        val backButton: View = view.findViewById(R.id.backButton) // Replace with the actual ID of the back symbol&#10;        backButton.setOnClickListener {&#10;            dismiss() // Close the dialog&#10;        }&#10;&#10;        val uploadButton = view.findViewById&lt;LinearLayout&gt;(R.id.buttonUploadImage)&#10;        uploadButton.setOnClickListener {&#10;            openImagePicker()&#10;        }&#10;&#10;        // Set up RecyclerView&#10;        ingredientsAdapter = IngredientsAdapter(ingredients, android.R.color.black)&#10;        ingredientsRecyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        ingredientsRecyclerView.adapter = ingredientsAdapter&#10;&#10;        preparationsAdapter = PreparationsAdapter(preparations, android.R.color.black)&#10;        preparationsRecyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        preparationsRecyclerView.adapter = preparationsAdapter&#10;&#10;        // Add ingredient on Enter key press&#10;        newIngredientInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                val ingredientText = newIngredientInput.text.toString().trim()&#10;                if (ingredientText.isNotEmpty()) {&#10;                    ingredients.add(ingredientText) // Add ingredient to the list&#10;                    ingredientsAdapter.notifyDataSetChanged() // Update RecyclerView&#10;                    ingredientsRecyclerView.scrollToPosition(ingredients.size - 1) // Scroll to the last item&#10;                    newIngredientInput.text.clear() // Clear input field&#10;                }&#10;                true // Event handled&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        newPreparationInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                val preparationText = newPreparationInput.text.toString().trim()&#10;                if (preparationText.isNotEmpty()) {&#10;                    preparations.add(preparationText) // Add preparation step to the list&#10;                    preparationsAdapter.notifyDataSetChanged() // Update RecyclerView&#10;                    preparationsRecyclerView.scrollToPosition(preparations.size - 1) // Scroll to the last item&#10;                    newPreparationInput.text.clear() // Clear input field&#10;                }&#10;                true // Event handled&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        saveButton.setOnClickListener {&#10;            val name = nameInput.text.toString()&#10;            val description = preparationInput.text.toString() // Capture the description&#10;            val servings = servingsInput.text.toString().toIntOrNull() ?: 0&#10;            val prepTime = &quot;${prepHoursInput.text}:${prepMinutesInput.text}&quot;&#10;            val notes = notesInput.text.toString()&#10;&#10;            if (name.isNotEmpty() &amp;&amp; ingredients.isNotEmpty() &amp;&amp; preparations.isNotEmpty()) {&#10;                val newRecipe = Recipe(&#10;                    id = System.currentTimeMillis().toInt(),&#10;                    name = name,&#10;                    description = description, // Save the description&#10;                    ingredients = ingredients,&#10;                    preparations = preparations,&#10;                    image = selectedImagePath,&#10;                    servings = servings,&#10;                    prepTime = prepTime,&#10;                    notes = notes&#10;                )&#10;                saveRecipe(newRecipe)&#10;                listener?.onRecipeAdded(newRecipe)&#10;                dismiss()&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    private fun saveRecipe(recipe: Recipe) {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val recipes: MutableList&lt;Recipe&gt; = if (recipesFile.exists()) {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;&#10;        // Generiere eine neue ID basierend auf der hÃ¶chsten existierenden ID&#10;        val newId = (recipes.maxOfOrNull { it.id } ?: 0) + 1&#10;        val recipeWithId = recipe.copy(id = newId)&#10;&#10;        if (imageUri != null) {&#10;            saveImageToInternalStorage(imageUri!!, recipeWithId.id, recipeWithId.name)&#10;            recipeWithId.image = selectedImagePath // Aktualisiere den Bildpfad im Rezept&#10;        }&#10;&#10;        recipes.add(recipeWithId)&#10;        recipesFile.writeText(Gson().toJson(recipes))&#10;&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == REQUEST_IMAGE_PICK &amp;&amp; resultCode == Activity.RESULT_OK) {&#10;            imageUri = data?.data&#10;            if (imageUri != null) {&#10;                Toast.makeText(requireContext(), &quot;Image selected successfully&quot;, Toast.LENGTH_SHORT).show()&#10;            } else {&#10;                Toast.makeText(requireContext(), &quot;Image selection failed&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveImageToInternalStorage(imageUri: Uri, recipeId: Int, recipeName: String) {&#10;        try {&#10;            val inputStream: InputStream? = requireContext().contentResolver.openInputStream(imageUri)&#10;            val bitmap = BitmapFactory.decodeStream(inputStream)&#10;&#10;            val imageDir = File(requireContext().filesDir, &quot;image&quot;)&#10;            if (!imageDir.exists()) {&#10;                imageDir.mkdir()&#10;            }&#10;&#10;            val sanitizedRecipeName = recipeName.replace(&quot;[^a-zA-Z0-9]&quot;.toRegex(), &quot;_&quot;)&#10;            selectedImagePath = &quot;${imageDir.absolutePath}/${recipeId}_${sanitizedRecipeName}.jpg&quot;&#10;            val imageFile = File(imageDir, &quot;${recipeId}_${sanitizedRecipeName}.jpg&quot;)&#10;&#10;            val outputStream = FileOutputStream(imageFile)&#10;            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream)&#10;            outputStream.flush()&#10;            outputStream.close()&#10;&#10;            selectedImagePath = imageFile.absolutePath&#10;            Toast.makeText(requireContext(), &quot;Image saved successfully&quot;, Toast.LENGTH_SHORT).show()&#10;        } catch (e: Exception) {&#10;            Toast.makeText(requireContext(), &quot;Failed to save image: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        private const val REQUEST_IMAGE_PICK = 1001&#10;    }&#10;&#10;    private fun openImagePicker() {&#10;        val intent = Intent(Intent.ACTION_PICK)&#10;        intent.type = &quot;image/*&quot;&#10;        startActivityForResult(intent, REQUEST_IMAGE_PICK)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import android.app.Activity&#10;import android.content.Intent&#10;import android.graphics.Bitmap&#10;import android.graphics.BitmapFactory&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.ImageView&#10;import android.widget.LinearLayout&#10;import android.widget.Toast&#10;import androidx.fragment.app.DialogFragment&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.io.InputStream&#10;&#10;class AddRecipeDialogFragment : DialogFragment() {&#10;&#10;    private var selectedImagePath: String? = null&#10;    private var imageUri: Uri? = null&#10;&#10;    interface OnRecipeAddedListener {&#10;        fun onRecipeAdded(recipe: Recipe)&#10;    }&#10;&#10;    private var listener: OnRecipeAddedListener? = null&#10;&#10;    fun setOnRecipeAddedListener(listener: OnRecipeAddedListener) {&#10;        this.listener = listener&#10;    }&#10;&#10;    private val ingredients = mutableListOf&lt;String&gt;()&#10;    private lateinit var ingredientsAdapter: IngredientsAdapter&#10;&#10;    private val preparations = mutableListOf&lt;String&gt;()&#10;    private lateinit var preparationsAdapter: PreparationsAdapter&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.dialog_add_recipe, container, false)&#10;    }&#10;&#10;    override fun onStart() {&#10;        super.onStart()&#10;        dialog?.window?.setLayout(&#10;            ViewGroup.LayoutParams.MATCH_PARENT,&#10;            ViewGroup.LayoutParams.MATCH_PARENT&#10;        )&#10;        dialog?.window?.setBackgroundDrawableResource(android.R.color.transparent) // Transparent background&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        val nameInput: EditText = view.findViewById(R.id.inputRecipeTitle)&#10;        val preparationInput: EditText = view.findViewById(R.id.inputDescription)&#10;        val newIngredientInput: EditText = view.findViewById(R.id.inputNewIngredient)&#10;        val servingsInput: EditText = view.findViewById(R.id.inputServings)&#10;        val prepHoursInput: EditText = view.findViewById(R.id.inputPrepHours)&#10;        val prepMinutesInput: EditText = view.findViewById(R.id.inputPrepMinutes)&#10;        val notesInput: EditText = view.findViewById(R.id.inputNotes)&#10;        val saveButton: Button = view.findViewById(R.id.buttonAddRecipe)&#10;        val ingredientsRecyclerView: RecyclerView = view.findViewById(R.id.ingredientsRecyclerView)&#10;        val newPreparationInput: EditText = view.findViewById(R.id.inputNewInstruction)&#10;        val preparationsRecyclerView: RecyclerView = view.findViewById(R.id.instructionsRecyclerView)&#10;&#10;&#10;        val backButton: View = view.findViewById(R.id.backButton) // Replace with the actual ID of the back symbol&#10;        backButton.setOnClickListener {&#10;            dismiss() // Close the dialog&#10;        }&#10;&#10;        val uploadButton = view.findViewById&lt;LinearLayout&gt;(R.id.buttonUploadImage)&#10;        val selectedImageView = view.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;        val uploadPlaceholder = view.findViewById&lt;LinearLayout&gt;(R.id.uploadPlaceholder)&#10;        uploadButton.setOnClickListener {&#10;            openImagePicker()&#10;        }&#10;&#10;        // Set up RecyclerView&#10;        ingredientsAdapter = IngredientsAdapter(ingredients, android.R.color.black)&#10;        ingredientsRecyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        ingredientsRecyclerView.adapter = ingredientsAdapter&#10;&#10;        preparationsAdapter = PreparationsAdapter(preparations, android.R.color.black)&#10;        preparationsRecyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        preparationsRecyclerView.adapter = preparationsAdapter&#10;&#10;        // Add ingredient on Enter key press&#10;        newIngredientInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                val ingredientText = newIngredientInput.text.toString().trim()&#10;                if (ingredientText.isNotEmpty()) {&#10;                    ingredients.add(ingredientText) // Add ingredient to the list&#10;                    ingredientsAdapter.notifyDataSetChanged() // Update RecyclerView&#10;                    ingredientsRecyclerView.scrollToPosition(ingredients.size - 1) // Scroll to the last item&#10;                    newIngredientInput.text.clear() // Clear input field&#10;                }&#10;                true // Event handled&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        newPreparationInput.setOnEditorActionListener { _, actionId, _ -&gt;&#10;            if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_DONE) {&#10;                val preparationText = newPreparationInput.text.toString().trim()&#10;                if (preparationText.isNotEmpty()) {&#10;                    preparations.add(preparationText) // Add preparation step to the list&#10;                    preparationsAdapter.notifyDataSetChanged() // Update RecyclerView&#10;                    preparationsRecyclerView.scrollToPosition(preparations.size - 1) // Scroll to the last item&#10;                    newPreparationInput.text.clear() // Clear input field&#10;                }&#10;                true // Event handled&#10;            } else {&#10;                false&#10;            }&#10;        }&#10;&#10;        saveButton.setOnClickListener {&#10;            val name = nameInput.text.toString()&#10;            val description = preparationInput.text.toString() // Capture the description&#10;            val servings = servingsInput.text.toString().toIntOrNull() ?: 0&#10;            val prepTime = &quot;${prepHoursInput.text}:${prepMinutesInput.text}&quot;&#10;            val notes = notesInput.text.toString()&#10;&#10;            if (name.isNotEmpty() &amp;&amp; ingredients.isNotEmpty() &amp;&amp; preparations.isNotEmpty()) {&#10;                val newRecipe = Recipe(&#10;                    id = System.currentTimeMillis().toInt(),&#10;                    name = name,&#10;                    description = description, // Save the description&#10;                    ingredients = ingredients,&#10;                    preparations = preparations,&#10;                    image = selectedImagePath,&#10;                    servings = servings,&#10;                    prepTime = prepTime,&#10;                    notes = notes&#10;                )&#10;                saveRecipe(newRecipe)&#10;                listener?.onRecipeAdded(newRecipe)&#10;                dismiss()&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    private fun saveRecipe(recipe: Recipe) {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val recipes: MutableList&lt;Recipe&gt; = if (recipesFile.exists()) {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;&#10;        // Generiere eine neue ID basierend auf der hÃ¶chsten existierenden ID&#10;        val newId = (recipes.maxOfOrNull { it.id } ?: 0) + 1&#10;        val recipeWithId = recipe.copy(id = newId)&#10;&#10;        if (imageUri != null) {&#10;            saveImageToInternalStorage(imageUri!!, recipeWithId.id, recipeWithId.name)&#10;            recipeWithId.image = selectedImagePath // Aktualisiere den Bildpfad im Rezept&#10;        }&#10;&#10;        recipes.add(recipeWithId)&#10;        recipesFile.writeText(Gson().toJson(recipes))&#10;&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == REQUEST_IMAGE_PICK &amp;&amp; resultCode == Activity.RESULT_OK) {&#10;            imageUri = data?.data&#10;            val selectedImageView = view?.findViewById&lt;ImageView&gt;(R.id.selectedImageView)&#10;            val uploadPlaceholder = view?.findViewById&lt;LinearLayout&gt;(R.id.uploadPlaceholder)&#10;            if (imageUri != null &amp;&amp; selectedImageView != null &amp;&amp; uploadPlaceholder != null) {&#10;                selectedImageView.setImageURI(imageUri)&#10;                selectedImageView.visibility = View.VISIBLE&#10;                uploadPlaceholder.visibility = View.GONE&#10;                Toast.makeText(requireContext(), &quot;Image selected successfully&quot;, Toast.LENGTH_SHORT).show()&#10;            } else {&#10;                Toast.makeText(requireContext(), &quot;Image selection failed&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveImageToInternalStorage(imageUri: Uri, recipeId: Int, recipeName: String) {&#10;        try {&#10;            val inputStream: InputStream? = requireContext().contentResolver.openInputStream(imageUri)&#10;            val bitmap = BitmapFactory.decodeStream(inputStream)&#10;&#10;            val imageDir = File(requireContext().filesDir, &quot;image&quot;)&#10;            if (!imageDir.exists()) {&#10;                imageDir.mkdir()&#10;            }&#10;&#10;            val sanitizedRecipeName = recipeName.replace(&quot;[^a-zA-Z0-9]&quot;.toRegex(), &quot;_&quot;)&#10;            selectedImagePath = &quot;${imageDir.absolutePath}/${recipeId}_${sanitizedRecipeName}.jpg&quot;&#10;            val imageFile = File(imageDir, &quot;${recipeId}_${sanitizedRecipeName}.jpg&quot;)&#10;&#10;            val outputStream = FileOutputStream(imageFile)&#10;            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outputStream)&#10;            outputStream.flush()&#10;            outputStream.close()&#10;&#10;            selectedImagePath = imageFile.absolutePath&#10;            Toast.makeText(requireContext(), &quot;Image saved successfully&quot;, Toast.LENGTH_SHORT).show()&#10;        } catch (e: Exception) {&#10;            Toast.makeText(requireContext(), &quot;Failed to save image: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        private const val REQUEST_IMAGE_PICK = 1001&#10;    }&#10;&#10;    private fun openImagePicker() {&#10;        val intent = Intent(Intent.ACTION_PICK)&#10;        intent.type = &quot;image/*&quot;&#10;        startActivityForResult(intent, REQUEST_IMAGE_PICK)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_add_recipe.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_add_recipe.xml" />
              <option name="originalContent" value="&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/AbackgroundColor&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- AppBar --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:background=&quot;@color/AbackgroundColor&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/backButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_revert&quot;&#10;                android:contentDescription=&quot;Back&quot;&#10;                android:padding=&quot;8dp&quot;&#10;                app:tint=&quot;@android:color/black&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Rezepte hinzufÃ¼gen&quot;&#10;                android:textColor=&quot;@color/AcardTextColor&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:layout_gravity=&quot;center_vertical&quot;&#10;                android:layout_marginStart=&quot;16dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Title --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Rezept Titel&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputRecipeTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Rezept Titel&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;        &lt;!-- Image Picker --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/buttonUploadImage&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;100dp&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:background=&quot;@drawable/dashed_line_background&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:layout_marginTop=&quot;20dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;true&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_camera&quot;&#10;                android:contentDescription=&quot;Upload Image&quot;&#10;                app:tint=&quot;@color/AcardTextColor&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Bild hochladen&quot;&#10;                android:textColor=&quot;@color/AcardTextColor&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Description --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Beschreibung&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputDescription&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Beschreibung&quot;&#10;            android:inputType=&quot;textMultiLine&quot;&#10;            android:lines=&quot;4&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;        &lt;!-- Ingredients --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Zutaten&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/ingredientsRecyclerView&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;150dp&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputNewIngredient&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Zutaten hinzufÃ¼gen&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:imeOptions=&quot;actionDone&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;        &lt;!-- Instructions --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Zubereitung&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/instructionsRecyclerView&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;150dp&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputNewInstruction&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Schritt hinzufÃ¼gen&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:imeOptions=&quot;actionDone&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;        &lt;!-- Servings --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Portionen&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputServings&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Portionen&quot;&#10;            android:inputType=&quot;number&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;        &lt;!-- Prep Time --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Zubereitungszeit&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&gt;&#10;&#10;            &lt;EditText&#10;                android:id=&quot;@+id/inputPrepHours&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:hint=&quot;Stunden&quot;&#10;                android:inputType=&quot;number&quot;&#10;                android:background=&quot;@drawable/edit_text_background&quot;&#10;                android:padding=&quot;8dp&quot;&#10;                android:textColor=&quot;@color/AcardTextColor&quot;&#10;                android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;            &lt;EditText&#10;                android:id=&quot;@+id/inputPrepMinutes&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:hint=&quot;Minuten&quot;&#10;                android:inputType=&quot;number&quot;&#10;                android:background=&quot;@drawable/edit_text_background&quot;&#10;                android:padding=&quot;8dp&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:textColor=&quot;@color/AcardTextColor&quot;&#10;                android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Notes --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Notes&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputNotes&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Notizen (Optional)&quot;&#10;            android:inputType=&quot;textMultiLine&quot;&#10;            android:lines=&quot;3&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;        &lt;!-- Add Recipe Button --&gt;&#10;        &lt;Button&#10;            android:id=&quot;@+id/buttonAddRecipe&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Rezept hinzufÃ¼gen&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:backgroundTint=&quot;@color/AprimaryColor&quot;&#10;            android:textColor=&quot;@android:color/white&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
              <option name="updatedContent" value="&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/AbackgroundColor&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- AppBar --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:background=&quot;@color/AbackgroundColor&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/backButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_revert&quot;&#10;                android:contentDescription=&quot;Back&quot;&#10;                android:padding=&quot;8dp&quot;&#10;                app:tint=&quot;@android:color/black&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Rezepte hinzufÃ¼gen&quot;&#10;                android:textColor=&quot;@color/AcardTextColor&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:layout_gravity=&quot;center_vertical&quot;&#10;                android:layout_marginStart=&quot;16dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Title --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Rezept Titel&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputRecipeTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Rezept Titel&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;        &lt;!-- Image Picker --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/buttonUploadImage&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;100dp&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:background=&quot;@drawable/dashed_line_background&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:layout_marginTop=&quot;20dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;true&quot;&gt;&#10;&#10;            &lt;FrameLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/selectedImageView&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:scaleType=&quot;centerCrop&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:background=&quot;@drawable/dashed_line_background&quot;&#10;                    android:contentDescription=&quot;AusgewÃ¤hltes Bild&quot;&#10;                    android:clipToOutline=&quot;true&quot; /&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/uploadPlaceholder&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:gravity=&quot;center&quot;&gt;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:src=&quot;@android:drawable/ic_menu_camera&quot;&#10;                        android:contentDescription=&quot;Upload Image&quot;&#10;                        app:tint=&quot;@color/AcardTextColor&quot; /&gt;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Bild hochladen&quot;&#10;                        android:textColor=&quot;@color/AcardTextColor&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/FrameLayout&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Description --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Beschreibung&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputDescription&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Beschreibung&quot;&#10;            android:inputType=&quot;textMultiLine&quot;&#10;            android:lines=&quot;4&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;        &lt;!-- Ingredients --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Zutaten&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/ingredientsRecyclerView&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;150dp&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputNewIngredient&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Zutaten hinzufÃ¼gen&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:imeOptions=&quot;actionDone&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;        &lt;!-- Instructions --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Zubereitung&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/instructionsRecyclerView&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;150dp&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputNewInstruction&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Schritt hinzufÃ¼gen&quot;&#10;            android:inputType=&quot;text&quot;&#10;            android:imeOptions=&quot;actionDone&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;        &lt;!-- Servings --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Portionen&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputServings&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Portionen&quot;&#10;            android:inputType=&quot;number&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;        &lt;!-- Prep Time --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Zubereitungszeit&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&gt;&#10;&#10;            &lt;EditText&#10;                android:id=&quot;@+id/inputPrepHours&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:hint=&quot;Stunden&quot;&#10;                android:inputType=&quot;number&quot;&#10;                android:background=&quot;@drawable/edit_text_background&quot;&#10;                android:padding=&quot;8dp&quot;&#10;                android:textColor=&quot;@color/AcardTextColor&quot;&#10;                android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;            &lt;EditText&#10;                android:id=&quot;@+id/inputPrepMinutes&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:hint=&quot;Minuten&quot;&#10;                android:inputType=&quot;number&quot;&#10;                android:background=&quot;@drawable/edit_text_background&quot;&#10;                android:padding=&quot;8dp&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:textColor=&quot;@color/AcardTextColor&quot;&#10;                android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Notes --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Notes&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/inputNotes&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:hint=&quot;Notizen (Optional)&quot;&#10;            android:inputType=&quot;textMultiLine&quot;&#10;            android:lines=&quot;3&quot;&#10;            android:background=&quot;@drawable/edit_text_background&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:textColor=&quot;@color/AcardTextColor&quot;&#10;            android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;        &lt;!-- Add Recipe Button --&gt;&#10;        &lt;Button&#10;            android:id=&quot;@+id/buttonAddRecipe&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Rezept hinzufÃ¼gen&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:backgroundTint=&quot;@color/AprimaryColor&quot;&#10;            android:textColor=&quot;@android:color/white&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/assets/recipes.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/assets/recipes.json" />
              <option name="updatedContent" value="[&#10;  {&#10;    &quot;id&quot;: 1,&#10;    &quot;name&quot;: &quot;Gulasch mit SpÃ¤tzle&quot;,&#10;    &quot;description&quot;: &quot;Ein herzhaftes Gericht mit Rindergulasch, Karotten und SpÃ¤tzle.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Rindergulasch&quot;,&#10;      &quot;Karotten&quot;,&#10;      &quot;Staudensellerie&quot;,&#10;      &quot;Zwiebel&quot;,&#10;      &quot;Paprika&quot;,&#10;      &quot;Knoblauch&quot;,&#10;      &quot;Rotwein&quot;,&#10;      &quot;RinderbrÃ¼he&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Fleisch von auÃen anbrÃ¤unen und wieder rausnehmen&quot;,&#10;      &quot;Zwiebel, Knoblauch, Karotten, Paprika und Sellerie kleinschneiden und anbraten&quot;,&#10;      &quot;AblÃ¶schen mit Rotwein und RinderbrÃ¼he dazugeben&quot;,&#10;      &quot;Fleisch wieder dazugeben und mind. 3 Stunden auf niedriger Temp. kÃ¶cheln lassen&quot;,&#10;      &quot;SpÃ¤tzle selbst machen oder nach Packungsanleitung zubereiten&quot;,&#10;      &quot;Gulasch mit SpÃ¤tzle servieren&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/1_Gulasch_mit_Sp_tzle.jpg&quot;,&#10;    &quot;servings&quot;: 6,&#10;    &quot;prepTime&quot;: &quot;4:00&quot;,&#10;    &quot;notes&quot;: &quot;Je lÃ¤nger das Gulasch kÃ¶chelt, desto besser wird es. Am besten am Vortag zubereiten und Ã¼ber Nacht ziehen lassen.&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 2,&#10;    &quot;name&quot;: &quot;Fried Rice&quot;,&#10;    &quot;description&quot;: &quot;Ein asiatisches Geicht mit gebratenem Reis, GemÃ¼se und Sojasauce.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Thaireis vom Vortag&quot;,&#10;      &quot;FrÃ¼hlingszwiebel&quot;,&#10;      &quot;Karotten&quot;,&#10;      &quot;Paprika&quot;,&#10;      &quot;Erbsen&quot;,&#10;      &quot;Sojasauce&quot;,&#10;      &quot;SesamÃ¶l&quot;,&#10;      &quot;Eier&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;GemÃ¼se klein schneiden&quot;,&#10;      &quot;Eier in einer Pfanne braten und beiseite stellen&quot;,&#10;      &quot;GemÃ¼se in einer Pfanne anbraten und den Reis dazugeben&quot;,&#10;      &quot;Mit Sojasauce und SesamÃ¶l wÃ¼rzen&quot;,&#10;      &quot;Eier dazugeben und alles gut vermischen&quot;,&#10;      &quot;Mit FrÃ¼hlingszwiebeln garnieren und servieren&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/2_Fried_Rice.jpg&quot;,&#10;    &quot;servings&quot;: 2,&#10;    &quot;prepTime&quot;: &quot;0:20&quot;,&#10;    &quot;notes&quot;: &quot;&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 3,&#10;    &quot;name&quot;: &quot;Teriyaki HÃ¤hnchen mit Reis und Brokkoli&quot;,&#10;    &quot;description&quot;: &quot;Ein asiatisches Gericht mit HÃ¤hnchen, Brokkoli und Teriyaki-SoÃe.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;HÃ¤hnchen&quot;,&#10;      &quot;Thaireis&quot;,&#10;      &quot;Brokkoli&quot;,&#10;      &quot;Sojasauce&quot;,&#10;      &quot;SesamÃ¶l&quot;,&#10;      &quot;Brauner Zucker&quot;,&#10;      &quot;Knoblauch&quot;,&#10;      &quot;Ingwer&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Reis und Brokkoli kochen&quot;,&#10;      &quot;SojasoÃe, SesamÃ¶l, Zucker, Knoblauch und Ingwer in einer SchÃ¼ssel vermischen&quot;,&#10;      &quot;HÃ¤hnchen in einer Pfanne anbraten&quot;,&#10;      &quot;Teriyaki-SoÃe dazugeben und kÃ¶cheln lassen bis sie andickt&quot;,&#10;      &quot;HÃ¤hnchen mit Reis und Brokkoli servieren&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/3_Teriyaki_H_hnchen_mit_Reis_und_Brokkoli.jpg&quot;,&#10;    &quot;servings&quot;: 2,&#10;    &quot;prepTime&quot;: &quot;0:40&quot;,&#10;    &quot;notes&quot;: &quot;Verwenden Sie frischen Ingwer fÃ¼r mehr Geschmack.&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 4,&#10;    &quot;name&quot;: &quot;Salami Pizza&quot;,&#10;    &quot;description&quot;: &quot;Eine leckere Pizza mit Salami, KÃ¤se und TomatensoÃe.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Pizza-Teig&quot;,&#10;      &quot;Salami&quot;,&#10;      &quot;Gouda&quot;,&#10;      &quot;TomatensoÃe&quot;,&#10;      &quot;Oregano&quot;,&#10;      &quot;KrÃ¤uter der Provence&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Pizzateig ausrollen&quot;,&#10;      &quot;TomatensoÃe mit KrÃ¤utern vermischen und auf den Teig streichen&quot;,&#10;      &quot;Salami und KÃ¤se darauf verteilen&quot;,&#10;      &quot;Im Ofen bei 220 Grad ca. 15-20 Minuten backen&quot;,&#10;      &quot;Mit frischem Basilikum garnieren und servieren&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/4_Salami_Pizza.jpg&quot;,&#10;    &quot;servings&quot;: 4,&#10;    &quot;prepTime&quot;: &quot;0:50&quot;,&#10;    &quot;notes&quot;: &quot;&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 5,&#10;    &quot;name&quot;: &quot;Apfel-Streusel Kuchen&quot;,&#10;    &quot;description&quot;: &quot;Ein leckerer Apfelkuchen mit Streuseln.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Weizenmehl&quot;,&#10;      &quot;Backpulver&quot;,&#10;      &quot;Zucker&quot;,&#10;      &quot;Butter&quot;,&#10;      &quot;Eier&quot;,&#10;      &quot;Ãpfel&quot;,&#10;      &quot;Zimt&quot;,&#10;      &quot;Zitronensaft&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Den Boden der 26 cm Springform mit Backpapier auslegen, RÃ¤nder leicht fetten und mit Mehl bestÃ¤uben.&quot;,&#10;      &quot;Alle Zutaten zu einem Streuselteig (gerÃ¼hrten MÃ¼rbteig) verkneten. Ca. 15 Minuten eingewickelt kÃ¼hl stellen. Etwa zwei Drittel fÃ¼r Boden und Rand abnehmen, daraus eine Kugel formen und diese etwas grÃ¶Ãer als BackformgrÃ¶Ãe ausrollen.&quot;,&#10;      &quot;Ofen auf 180 Grad Ober- und Unterhitze vorheizen&quot;,&#10;      &quot;Ãpfel schÃ¤len, putzen, in WÃ¼rfel schneiden. Mit Zucker, Saft und Zimt mischen. Die Apfel-Mischung auf dem Boden verteilen. Restliche Streusel drÃ¼ber geben.&quot;,&#10;      &quot;Kuchen ca. 55 Minuten backen, eventuell gegen Ende abdecken, damit er nicht zu dunkel wird.&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/5_Apfel-Streusel_Kuchen.jpg&quot;,&#10;    &quot;servings&quot;: 10,&#10;    &quot;prepTime&quot;: &quot;1:30&quot;,&#10;    &quot;notes&quot;: &quot;&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 6,&#10;    &quot;name&quot;: &quot;Kartoffelgratin mit Blumenkohl&quot;,&#10;    &quot;description&quot;: &quot;Ein herzafter Auflauf mit Kartoffeln und Blumenkohl.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Kartoffeln&quot;,&#10;      &quot;Blumenkohl&quot;,&#10;      &quot;Zwiebel&quot;,&#10;      &quot;Knoblauch&quot;,&#10;      &quot;Sahne&quot;,&#10;      &quot;KÃ¤se&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Blumenkohl in RÃ¶schen teilen und in Salzwasser blanchieren&quot;,&#10;      &quot;Kartoffeln in feine Scheiben schneiden und in eine Auflaufform schichten&quot;,&#10;      &quot;Zwiebel und Knoblauch anbraten und mit der Sahne leicht aufkochen lassen&quot;,&#10;      &quot;Die Sahne Ã¼ber die Kartoffeln gieÃen und mit KÃ¤se bestreuen&quot;,&#10;      &quot;Im Ofen bei 180 Grad ca. 45 Minuten backen, bis die Kartoffeln gar sind&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/6_Kartoffelgratin_mit_Blumenkohl.jpg&quot;,&#10;    &quot;servings&quot;: 6,&#10;    &quot;prepTime&quot;: &quot;1:30&quot;,&#10;    &quot;notes&quot;: &quot;&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 7,&#10;    &quot;name&quot;: &quot;Erdbeerkuchen mit Vanillepudding&quot;,&#10;    &quot;description&quot;: &quot;Ein fruchtiger und weicher Kuchen mit Erdbeeren und Vanillepudding.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Mehl&quot;,&#10;      &quot;Eier&quot;,&#10;      &quot;Zucker&quot;,&#10;      &quot;Salz&quot;,&#10;      &quot;Butter&quot;,&#10;      &quot;Backpulver&quot;,&#10;      &quot;Milch&quot;,&#10;      &quot;Vanillepuddingpulver&quot;,&#10;      &quot;Erdbeeren&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Den Backofen auf 175Â° Grad Ober-/Unterhitze vorheizen und die Backform sorgfÃ¤ltig mit Butter einfetten. &quot;,&#10;      &quot;Mit einem Handmixer die Eier und den Zucker fÃ¼r 3-4 Minuten schaumig rÃ¼hren, bis die Masse dick und weiÃ geworden ist.&quot;,&#10;      &quot;Das Mehl mit dem Backpulver und dem Salz mischen. Die Mehlmischung zur Eiermasse zufÃ¼gen und ganz kurz unterrÃ¼hren, bis sich die Zutaten gerade so verbunden haben und ein homogener Teig entstanden ist.&quot;,&#10;      &quot;Den Teig in die Form fÃ¼llen und den Biskuitboden fÃ¼r 20 Minuten backen.&quot;,&#10;      &quot;Den Boden nach dem Backen sofort auf einem Kuchengitter stÃ¼rzen und abkÃ¼hlen lassen. AnschlieÃend bis zur weiteren Verwendung luftdicht abdecken, da er schnell austrocknet.&quot;,&#10;      &quot;Den Vanillepudding nach Packungsanleitung zubereiten.&quot;,&#10;      &quot;Die Erdbeeren waschen, kleinschneiden und leicht mit Zucker bestreuen&quot;,&#10;      &quot;AnschlieÃsend den Vanillepudding auf den Biskuitboden verteilen und die Erdbeeren darauf verteilen.&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/7_Erdbeerkuchen_mit_Vanillepudding.jpg&quot;,&#10;    &quot;servings&quot;: 1,&#10;    &quot;prepTime&quot;: &quot;1:00&quot;,&#10;    &quot;notes&quot;: &quot;&quot;&#10;  },&#10;  {&#10;    &quot;id&quot;: 8,&#10;    &quot;name&quot;: &quot;TÃ¼rkische Pasta&quot;,&#10;    &quot;description&quot;: &quot;Eine wÃ¤rmende und trÃ¶stliche Suppe aus Tomaten, Zwiebeln und Knoblauch.&quot;,&#10;    &quot;ingredients&quot;: [&#10;      &quot;Nudeln&quot;,&#10;      &quot;Rinderhackfleisch&quot;,&#10;      &quot;Zwiebeln&quot;,&#10;      &quot;Cherry-Tomaten&quot;,&#10;      &quot;Joghurt&quot;,&#10;      &quot;Knoblauch&quot;,&#10;      &quot;Butter&quot;,&#10;      &quot;PaprikagewÃ¼rz&quot;,&#10;      &quot;Frische Petersilie&quot;&#10;    ],&#10;    &quot;preparations&quot;: [&#10;      &quot;Joghurt mit Knoblauch vermischen und ziehen lassen&quot;,&#10;      &quot;Rinderhackfleisch scharf anbraten und wÃ¼rzen&quot;,&#10;      &quot;Zwiebeln dazu geben&quot;,&#10;      &quot;In der Zwischenzeit Nudeln kochen&quot;,&#10;      &quot;Butter schmelzen und PaprikagewÃ¼rz dazu geben&quot;,&#10;      &quot;Nudeln mit Hackfleisch, Joghurt, Cherrytomaten, Butter und Petersilie anrichten&quot;&#10;    ],&#10;    &quot;image&quot;: &quot;images/8_T_rkische_Pasta.jpg&quot;,&#10;    &quot;servings&quot;: 2,&#10;    &quot;prepTime&quot;: &quot;0:45&quot;,&#10;    &quot;notes&quot;: &quot;&quot;&#10;  }&#10;]&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/AddRecipeMenuDialogFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/AddRecipeMenuDialogFragment.kt" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.app.Dialog&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import com.google.android.material.bottomsheet.BottomSheetDialogFragment&#10;import com.app.mealplanner.databinding.DialogAddRecipeMenuBinding&#10;&#10;class AddRecipeMenuDialogFragment(&#10;    private val onManual: () -&gt; Unit,&#10;    private val onInstagram: () -&gt; Unit,&#10;    private val onWebsite: () -&gt; Unit&#10;) : BottomSheetDialogFragment() {&#10;    private var _binding: DialogAddRecipeMenuBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        _binding = DialogAddRecipeMenuBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        binding.fabManual.setOnClickListener {&#10;            dismiss()&#10;            onManual()&#10;        }&#10;        binding.fabInstagram.setOnClickListener {&#10;            dismiss()&#10;            onInstagram()&#10;        }&#10;        binding.fabWebsite.setOnClickListener {&#10;            dismiss()&#10;            onWebsite()&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/ImportInstagramDialogFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/ImportInstagramDialogFragment.kt" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.app.Dialog&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import com.google.android.material.bottomsheet.BottomSheetDialogFragment&#10;import com.app.mealplanner.databinding.DialogImportInstagramBinding&#10;&#10;class ImportInstagramDialogFragment : BottomSheetDialogFragment() {&#10;    private var _binding: DialogImportInstagramBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        _binding = DialogImportInstagramBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/ImportWebsiteDialogFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/ImportWebsiteDialogFragment.kt" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import android.app.Dialog&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import com.google.android.material.bottomsheet.BottomSheetDialogFragment&#10;import com.app.mealplanner.databinding.DialogImportWebsiteBinding&#10;&#10;class ImportWebsiteDialogFragment : BottomSheetDialogFragment() {&#10;    private var _binding: DialogImportWebsiteBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?&#10;    ): View? {&#10;        _binding = DialogImportWebsiteBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipeDetailFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipeDetailFragment.kt" />
              <option name="originalContent" value="import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.ImageButton&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;import com.app.mealplanner.model.Recipe&#10;import com.bumptech.glide.Glide&#10;&#10;class RecipeDetailFragment : Fragment() {&#10;&#10;    companion object {&#10;        private const val ARG_RECIPE = &quot;recipe&quot;&#10;&#10;        fun newInstance(recipe: Recipe): RecipeDetailFragment {&#10;            val fragment = RecipeDetailFragment()&#10;            val args = Bundle()&#10;            args.putSerializable(ARG_RECIPE, recipe)&#10;            fragment.arguments = args&#10;            return fragment&#10;        }&#10;    }&#10;&#10;    private var recipe: Recipe? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        recipe = arguments?.getSerializable(ARG_RECIPE) as? Recipe&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_recipe_detail, container, false)&#10;&#10;        val closeButton: View = view.findViewById(R.id.close_button)&#10;        closeButton.setOnClickListener {&#10;            parentFragmentManager.popBackStack()&#10;        }&#10;&#10;        val titleTextView: TextView = view.findViewById(R.id.recipe_title)&#10;        val descriptionTextView: TextView = view.findViewById(R.id.recipe_description)&#10;        val recipeImageView: ImageView = view.findViewById(R.id.recipe_image) // Recipe image view&#10;&#10;        recipe?.let {&#10;            titleTextView.text = it.name&#10;            descriptionTextView.text = it.description&#10;&#10;            // Load the recipe image using Glide&#10;            if (!it.image.isNullOrEmpty()) {&#10;                Glide.with(this)&#10;                    .load(it.image)&#10;                    .placeholder(android.R.drawable.ic_menu_gallery) // Placeholder while loading&#10;                    .error(android.R.drawable.ic_dialog_alert) // Fallback if loading fails&#10;                    .into(recipeImageView)&#10;            } else {&#10;                recipeImageView.setImageResource(android.R.drawable.ic_menu_gallery) // Default image&#10;            }&#10;        }&#10;&#10;        val ingredientsButton: Button = view.findViewById(R.id.ingredients_button)&#10;        val instructionsButton: Button = view.findViewById(R.id.instructions_button)&#10;        val nutritionsButton: Button = view.findViewById(R.id.nutrition_button)&#10;&#10;        ingredientsButton.setOnClickListener {&#10;            loadContent(R.layout.recipe_detail_ingredients)&#10;        }&#10;&#10;        instructionsButton.setOnClickListener {&#10;            loadContent(R.layout.recipe_detail_instructions)&#10;        }&#10;&#10;        nutritionsButton.setOnClickListener {&#10;            loadContent(R.layout.recipe_detail_nutritions)&#10;        }&#10;&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        loadContent(R.layout.recipe_detail_ingredients) // Automatically load ingredients&#10;    }&#10;&#10;    private fun loadContent(layoutResId: Int) {&#10;        val contentContainer = requireView().findViewById&lt;ViewGroup&gt;(R.id.content_container)&#10;        contentContainer.removeAllViews()&#10;        LayoutInflater.from(context).inflate(layoutResId, contentContainer, true)&#10;&#10;        when (layoutResId) {&#10;            R.layout.recipe_detail_ingredients -&gt; {&#10;                val recyclerView = contentContainer.findViewById&lt;RecyclerView&gt;(R.id.ingredients_recycler_view)&#10;                recyclerView?.adapter = IngredientsAdapter(recipe?.ingredients ?: emptyList(), android.R.color.black)&#10;                recyclerView?.layoutManager = LinearLayoutManager(requireContext())&#10;            }&#10;            R.layout.recipe_detail_instructions -&gt; {&#10;                val recyclerView = contentContainer.findViewById&lt;RecyclerView&gt;(R.id.instructions_recycler_view)&#10;                recyclerView?.adapter = PreparationsAdapter(recipe?.preparations ?: emptyList(), android.R.color.black)&#10;                recyclerView?.layoutManager = LinearLayoutManager(requireContext())&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.ImageButton&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.R&#10;import com.app.mealplanner.model.Recipe&#10;import com.bumptech.glide.Glide&#10;&#10;class RecipeDetailFragment : Fragment() {&#10;&#10;    companion object {&#10;        private const val ARG_RECIPE = &quot;recipe&quot;&#10;&#10;        fun newInstance(recipe: Recipe): RecipeDetailFragment {&#10;            val fragment = RecipeDetailFragment()&#10;            val args = Bundle()&#10;            args.putSerializable(ARG_RECIPE, recipe)&#10;            fragment.arguments = args&#10;            return fragment&#10;        }&#10;    }&#10;&#10;    private var recipe: Recipe? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        recipe = arguments?.getSerializable(ARG_RECIPE) as? Recipe&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_recipe_detail, container, false)&#10;&#10;        val closeButton: View = view.findViewById(R.id.close_button)&#10;        closeButton.setOnClickListener {&#10;            parentFragmentManager.popBackStack()&#10;        }&#10;&#10;        val titleTextView: TextView = view.findViewById(R.id.recipe_title)&#10;        val descriptionTextView: TextView = view.findViewById(R.id.recipe_description)&#10;        val recipeImageView: ImageView = view.findViewById(R.id.recipe_image) // Recipe image view&#10;        val recipePrepTime: TextView = view.findViewById(R.id.recipe_prep_time)&#10;&#10;        recipe?.let {&#10;            titleTextView.text = it.name&#10;            descriptionTextView.text = it.description&#10;&#10;            // Load the recipe image using Glide&#10;            if (!it.image.isNullOrEmpty()) {&#10;                Glide.with(this)&#10;                    .load(it.image)&#10;                    .placeholder(android.R.drawable.ic_menu_gallery) // Placeholder while loading&#10;                    .error(android.R.drawable.ic_dialog_alert) // Fallback if loading fails&#10;                    .into(recipeImageView)&#10;            } else {&#10;                recipeImageView.setImageResource(android.R.drawable.ic_menu_gallery) // Default image&#10;            }&#10;            recipePrepTime.text = &quot;Zubereitung: ${it.prepTime}&quot;&#10;        }&#10;&#10;        val ingredientsButton: Button = view.findViewById(R.id.ingredients_button)&#10;        val instructionsButton: Button = view.findViewById(R.id.instructions_button)&#10;        val nutritionsButton: Button = view.findViewById(R.id.nutrition_button)&#10;&#10;        ingredientsButton.setOnClickListener {&#10;            loadContent(R.layout.recipe_detail_ingredients)&#10;        }&#10;&#10;        instructionsButton.setOnClickListener {&#10;            loadContent(R.layout.recipe_detail_instructions)&#10;        }&#10;&#10;        nutritionsButton.setOnClickListener {&#10;            loadContent(R.layout.recipe_detail_nutritions)&#10;        }&#10;&#10;        return view&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        loadContent(R.layout.recipe_detail_ingredients) // Automatically load ingredients&#10;    }&#10;&#10;    private fun loadContent(layoutResId: Int) {&#10;        val contentContainer = requireView().findViewById&lt;ViewGroup&gt;(R.id.content_container)&#10;        contentContainer.removeAllViews()&#10;        LayoutInflater.from(context).inflate(layoutResId, contentContainer, true)&#10;&#10;        when (layoutResId) {&#10;            R.layout.recipe_detail_ingredients -&gt; {&#10;                val recyclerView = contentContainer.findViewById&lt;RecyclerView&gt;(R.id.ingredients_recycler_view)&#10;                recyclerView?.adapter = IngredientsAdapter(recipe?.ingredients ?: emptyList(), android.R.color.black)&#10;                recyclerView?.layoutManager = LinearLayoutManager(requireContext())&#10;            }&#10;            R.layout.recipe_detail_instructions -&gt; {&#10;                val recyclerView = contentContainer.findViewById&lt;RecyclerView&gt;(R.id.instructions_recycler_view)&#10;                recyclerView?.adapter = PreparationsAdapter(recipe?.preparations ?: emptyList(), android.R.color.black)&#10;                recyclerView?.layoutManager = LinearLayoutManager(requireContext())&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipesFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/app/mealplanner/RecipesFragment.kt" />
              <option name="originalContent" value="package com.app.mealplanner&#10;&#10;import AddRecipeDialogFragment&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.ItemTouchHelper&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;&#10;&#10;class RecipesFragment : Fragment(R.layout.fragment_recipes) {&#10;&#10;    private lateinit var adapter: RecipeAdapter&#10;&#10;    companion object {&#10;        private var sessionRecipes: MutableList&lt;Recipe&gt;? = null // Speichert die Reihenfolge der Rezepte wÃ¤hrend der Session&#10;        private val swipedRecipes = mutableListOf&lt;Int&gt;() // Speichert dauerhaft wÃ¤hrend der App-Sitzung&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        copyRecipesToExternalStorage()&#10;        mergeRecipesFromAssetsAndInternalStorage()&#10;&#10;        val recyclerView: RecyclerView = view.findViewById(R.id.recyclerViewRecipes)&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        adapter = RecipeAdapter(mutableListOf&lt;Recipe&gt;()) { recipeId -&gt;&#10;            val recipe = loadRecipes().find { it.id.toString() == recipeId }&#10;            if (recipe != null) {&#10;                onRecipeSwiped(recipe)&#10;            }&#10;        }&#10;        recyclerView.adapter = adapter&#10;&#10;        // Rezepte nur beim ersten Aufruf mischen&#10;        if (sessionRecipes == null) {&#10;            sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;        }&#10;&#10;        val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;        adapter.updateRecipes(filteredRecipes)&#10;&#10;        // Floating Action Button&#10;        val fabAddRecipe: View = view.findViewById(R.id.fabAddRecipe)&#10;        fabAddRecipe.setOnClickListener {&#10;            showAddRecipeMenu()&#10;        }&#10;&#10;        // Add swipe functionality&#10;        val itemTouchHelper = ItemTouchHelper(object :&#10;            ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                return false // No move functionality needed&#10;            }&#10;&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {&#10;                val position = viewHolder.adapterPosition&#10;                val recipe = adapter.getRecipes()[position]&#10;&#10;                if (direction == ItemTouchHelper.LEFT) {&#10;                    // Nach links wischen: Nur fÃ¼r die Session ausblenden&#10;                    swipedRecipes.add(recipe.id)&#10;                    val updatedRecipes = filterRecipes(loadRecipes())&#10;                    adapter.updateRecipes(updatedRecipes)&#10;                } else if (direction == ItemTouchHelper.RIGHT) {&#10;                    // Nach rechts wischen: Zu den Favoriten hinzufÃ¼gen&#10;                    onRecipeSwiped(recipe)&#10;                }&#10;            }&#10;        })&#10;        itemTouchHelper.attachToRecyclerView(recyclerView)&#10;    }&#10;&#10;    private fun showAddRecipeDialog() {&#10;        val dialog = AddRecipeDialogFragment()&#10;        dialog.setOnRecipeAddedListener(object : AddRecipeDialogFragment.OnRecipeAddedListener {&#10;            override fun onRecipeAdded(recipe: Recipe) {&#10;                if (sessionRecipes == null) {&#10;                    sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;                }&#10;                sessionRecipes!!.add(0, recipe) // Neues Rezept an den Anfang der Session-Liste setzen&#10;                val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;                adapter.updateRecipes(filteredRecipes) // RecyclerView aktualisieren&#10;            }&#10;        })&#10;        dialog.show(parentFragmentManager, &quot;AddRecipeDialog&quot;)&#10;    }&#10;&#10;    private fun loadRecipes(): MutableList&lt;Recipe&gt; {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        return if (recipesFile.exists()) {&#10;            try {&#10;                val json = recipesFile.readText()&#10;                val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;                val recipes: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;&#10;                // Update image paths to point to internal storage&#10;                recipes.forEach { recipe -&gt;&#10;                    if (recipe.image != null) {&#10;                        val imageFile = File(requireContext().filesDir, recipe.image)&#10;                        if (imageFile.exists()) {&#10;                            recipe.image = imageFile.absolutePath&#10;                        } else {&#10;                            recipe.image = null // Reset if the image file is missing&#10;                        }&#10;                    }&#10;                }&#10;&#10;                recipes&#10;            } catch (e: Exception) {&#10;                e.printStackTrace()&#10;                mutableListOf()&#10;            }&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    private fun loadFavorites(): MutableList&lt;Recipe&gt; {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        return if (favoritesFile.exists()) {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    private fun filterRecipes(recipes: MutableList&lt;Recipe&gt;): MutableList&lt;Recipe&gt; {&#10;        val favoriteIds = loadFavorites().map { it.id }&#10;        return recipes.filter { it.id !in swipedRecipes &amp;&amp; it.id !in favoriteIds }.toMutableList()&#10;    }&#10;&#10;    private fun onRecipeSwiped(recipe: Recipe) {&#10;        swipedRecipes.add(recipe.id) // Hide recipe for the session&#10;        val updatedRecipes = filterRecipes(loadRecipes())&#10;        adapter.updateRecipes(updatedRecipes)&#10;&#10;        // Add the swiped recipe to favorites&#10;        val favorites = loadFavorites()&#10;        if (!favorites.any { it.id == recipe.id }) {&#10;            favorites.add(recipe)&#10;            saveFavorites(favorites)&#10;        }&#10;    }&#10;&#10;    private fun saveFavorites(favorites: MutableList&lt;Recipe&gt;) {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        val json = Gson().toJson(favorites)&#10;        favoritesFile.writeText(json)&#10;    }&#10;&#10;    fun addFavorite(recipe: Recipe) {&#10;        val favorites = loadFavorites()&#10;        if (!favorites.any { it.id == recipe.id }) {&#10;            favorites.add(recipe)&#10;            saveFavorites(favorites) // Save updated favorites&#10;        }&#10;    }&#10;&#10;    fun removeFavorite(recipe: Recipe) {&#10;        val favorites = loadFavorites()&#10;        if (favorites.any { it.id == recipe.id }) {&#10;            favorites.removeIf { it.id == recipe.id }&#10;            saveFavorites(favorites) // Save updated favorites&#10;        }&#10;    }&#10;&#10;    private fun mergeRecipesFromAssetsAndInternalStorage() {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val imagesDir = File(requireContext().filesDir, &quot;images&quot;)&#10;&#10;        // Ensure the images directory exists&#10;        if (!imagesDir.exists()) {&#10;            imagesDir.mkdir()&#10;        }&#10;&#10;        // Copy recipes from assets&#10;        val assetRecipes: MutableList&lt;Recipe&gt; = try {&#10;            val json = requireContext().assets.open(&quot;recipes.json&quot;).bufferedReader().use { it.readText() }&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            mutableListOf()&#10;        }&#10;&#10;        // Copy images from assets to internal storage&#10;        try {&#10;            requireContext().assets.list(&quot;images&quot;)?.forEach { imageName -&gt;&#10;                val inputStream = requireContext().assets.open(&quot;images/$imageName&quot;)&#10;                val outputFile = File(imagesDir, imageName)&#10;                if (!outputFile.exists()) {&#10;                    inputStream.use { input -&gt;&#10;                        outputFile.outputStream().use { output -&gt;&#10;                            input.copyTo(output)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;        }&#10;&#10;        // Check if the internal recipes file exists&#10;        if (!recipesFile.exists()) {&#10;            // Save the asset recipes to internal storage if the file doesn't exist&#10;            recipesFile.writeText(Gson().toJson(assetRecipes))&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;Internal recipes.json created from assets.&quot;)&#10;            return&#10;        }&#10;&#10;        // Load recipes from internal storage&#10;        val internalRecipes: MutableList&lt;Recipe&gt; = try {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            mutableListOf()&#10;        }&#10;&#10;        // Merge recipes, avoiding duplicates by `id`&#10;        val mergedRecipes = (internalRecipes + assetRecipes).distinctBy { it.id }.toMutableList()&#10;&#10;        // Save merged recipes back to internal storage&#10;        recipesFile.writeText(Gson().toJson(mergedRecipes))&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Internal recipes.json updated with merged recipes.&quot;)&#10;    }&#10;&#10;    private fun copyRecipesToExternalStorage() {&#10;        val internalFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val externalFile = File(requireContext().getExternalFilesDir(null), &quot;recipes.json&quot;)&#10;        if (internalFile.exists()) {&#10;            internalFile.copyTo(externalFile, overwrite = true)&#10;            Log.d(&#10;                &quot;RecipesFragment&quot;,&#10;                &quot;recipes.json copied to external storage: ${externalFile.absolutePath}&quot;&#10;            )&#10;        } else {&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;recipes.json file does not exist in internal storage.&quot;)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.app.mealplanner&#10;&#10;import AddRecipeDialogFragment&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.ItemTouchHelper&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.app.mealplanner.model.Recipe&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import java.io.File&#10;&#10;&#10;class RecipesFragment : Fragment(R.layout.fragment_recipes) {&#10;&#10;    private lateinit var adapter: RecipeAdapter&#10;&#10;    companion object {&#10;        private var sessionRecipes: MutableList&lt;Recipe&gt;? = null // Speichert die Reihenfolge der Rezepte wÃ¤hrend der Session&#10;        private val swipedRecipes = mutableListOf&lt;Int&gt;() // Speichert dauerhaft wÃ¤hrend der App-Sitzung&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        copyRecipesToExternalStorage()&#10;        mergeRecipesFromAssetsAndInternalStorage()&#10;&#10;        val recyclerView: RecyclerView = view.findViewById(R.id.recyclerViewRecipes)&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        adapter = RecipeAdapter(mutableListOf&lt;Recipe&gt;()) { recipeId -&gt;&#10;            val recipe = loadRecipes().find { it.id.toString() == recipeId }&#10;            if (recipe != null) {&#10;                onRecipeSwiped(recipe)&#10;            }&#10;        }&#10;        recyclerView.adapter = adapter&#10;&#10;        // Rezepte nur beim ersten Aufruf mischen&#10;        if (sessionRecipes == null) {&#10;            sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;        }&#10;&#10;        val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;        adapter.updateRecipes(filteredRecipes)&#10;&#10;        // Floating Action Button&#10;        val fabAddRecipe: View = view.findViewById(R.id.fabAddRecipe)&#10;        fabAddRecipe.setOnClickListener {&#10;            showAddRecipeMenu()&#10;        }&#10;&#10;        // Add swipe functionality&#10;        val itemTouchHelper = ItemTouchHelper(object :&#10;            ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {&#10;            override fun onMove(&#10;                recyclerView: RecyclerView,&#10;                viewHolder: RecyclerView.ViewHolder,&#10;                target: RecyclerView.ViewHolder&#10;            ): Boolean {&#10;                return false // No move functionality needed&#10;            }&#10;&#10;            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {&#10;                val position = viewHolder.adapterPosition&#10;                val recipe = adapter.getRecipes()[position]&#10;&#10;                if (direction == ItemTouchHelper.LEFT) {&#10;                    // Nach links wischen: Nur fÃ¼r die Session ausblenden&#10;                    swipedRecipes.add(recipe.id)&#10;                    val updatedRecipes = filterRecipes(loadRecipes())&#10;                    adapter.updateRecipes(updatedRecipes)&#10;                } else if (direction == ItemTouchHelper.RIGHT) {&#10;                    // Nach rechts wischen: Zu den Favoriten hinzufÃ¼gen&#10;                    onRecipeSwiped(recipe)&#10;                }&#10;            }&#10;        })&#10;        itemTouchHelper.attachToRecyclerView(recyclerView)&#10;    }&#10;&#10;    private fun showAddRecipeMenu() {&#10;        val menuDialog = AddRecipeMenuDialogFragment(&#10;            onManual = {&#10;                showAddRecipeDialog()&#10;            },&#10;            onInstagram = {&#10;                ImportInstagramDialogFragment().show(parentFragmentManager, &quot;ImportInstagramDialog&quot;)&#10;            },&#10;            onWebsite = {&#10;                ImportWebsiteDialogFragment().show(parentFragmentManager, &quot;ImportWebsiteDialog&quot;)&#10;            }&#10;        )&#10;        menuDialog.show(parentFragmentManager, &quot;AddRecipeMenuDialog&quot;)&#10;    }&#10;&#10;    private fun showAddRecipeDialog() {&#10;        val dialog = AddRecipeDialogFragment()&#10;        dialog.setOnRecipeAddedListener(object : AddRecipeDialogFragment.OnRecipeAddedListener {&#10;            override fun onRecipeAdded(recipe: Recipe) {&#10;                if (sessionRecipes == null) {&#10;                    sessionRecipes = loadRecipes().shuffled().toMutableList()&#10;                }&#10;                sessionRecipes!!.add(0, recipe) // Neues Rezept an den Anfang der Session-Liste setzen&#10;                val filteredRecipes = filterRecipes(sessionRecipes!!)&#10;                adapter.updateRecipes(filteredRecipes) // RecyclerView aktualisieren&#10;            }&#10;        })&#10;        dialog.show(parentFragmentManager, &quot;AddRecipeDialog&quot;)&#10;    }&#10;&#10;    private fun loadRecipes(): MutableList&lt;Recipe&gt; {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        return if (recipesFile.exists()) {&#10;            try {&#10;                val json = recipesFile.readText()&#10;                val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;                val recipes: MutableList&lt;Recipe&gt; = Gson().fromJson(json, type)&#10;&#10;                // Update image paths to point to internal storage&#10;                recipes.forEach { recipe -&gt;&#10;                    if (recipe.image != null) {&#10;                        val imageFile = File(requireContext().filesDir, recipe.image)&#10;                        if (imageFile.exists()) {&#10;                            recipe.image = imageFile.absolutePath&#10;                        } else {&#10;                            recipe.image = null // Reset if the image file is missing&#10;                        }&#10;                    }&#10;                }&#10;&#10;                recipes&#10;            } catch (e: Exception) {&#10;                e.printStackTrace()&#10;                mutableListOf()&#10;            }&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    private fun loadFavorites(): MutableList&lt;Recipe&gt; {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        return if (favoritesFile.exists()) {&#10;            val json = favoritesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } else {&#10;            mutableListOf()&#10;        }&#10;    }&#10;&#10;    private fun filterRecipes(recipes: MutableList&lt;Recipe&gt;): MutableList&lt;Recipe&gt; {&#10;        val favoriteIds = loadFavorites().map { it.id }&#10;        return recipes.filter { it.id !in swipedRecipes &amp;&amp; it.id !in favoriteIds }.toMutableList()&#10;    }&#10;&#10;    private fun onRecipeSwiped(recipe: Recipe) {&#10;        swipedRecipes.add(recipe.id) // Hide recipe for the session&#10;        val updatedRecipes = filterRecipes(loadRecipes())&#10;        adapter.updateRecipes(updatedRecipes)&#10;&#10;        // Add the swiped recipe to favorites&#10;        val favorites = loadFavorites()&#10;        if (!favorites.any { it.id == recipe.id }) {&#10;            favorites.add(recipe)&#10;            saveFavorites(favorites)&#10;        }&#10;    }&#10;&#10;    private fun saveFavorites(favorites: MutableList&lt;Recipe&gt;) {&#10;        val favoritesFile = File(requireContext().filesDir, &quot;favorites.json&quot;)&#10;        val json = Gson().toJson(favorites)&#10;        favoritesFile.writeText(json)&#10;    }&#10;&#10;    fun addFavorite(recipe: Recipe) {&#10;        val favorites = loadFavorites()&#10;        if (!favorites.any { it.id == recipe.id }) {&#10;            favorites.add(recipe)&#10;            saveFavorites(favorites) // Save updated favorites&#10;        }&#10;    }&#10;&#10;    fun removeFavorite(recipe: Recipe) {&#10;        val favorites = loadFavorites()&#10;        if (favorites.any { it.id == recipe.id }) {&#10;            favorites.removeIf { it.id == recipe.id }&#10;            saveFavorites(favorites) // Save updated favorites&#10;        }&#10;    }&#10;&#10;    private fun mergeRecipesFromAssetsAndInternalStorage() {&#10;        val recipesFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val imagesDir = File(requireContext().filesDir, &quot;images&quot;)&#10;&#10;        // Ensure the images directory exists&#10;        if (!imagesDir.exists()) {&#10;            imagesDir.mkdir()&#10;        }&#10;&#10;        // Copy recipes from assets&#10;        val assetRecipes: MutableList&lt;Recipe&gt; = try {&#10;            val json = requireContext().assets.open(&quot;recipes.json&quot;).bufferedReader().use { it.readText() }&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            mutableListOf()&#10;        }&#10;&#10;        // Copy images from assets to internal storage&#10;        try {&#10;            requireContext().assets.list(&quot;images&quot;)?.forEach { imageName -&gt;&#10;                val inputStream = requireContext().assets.open(&quot;images/$imageName&quot;)&#10;                val outputFile = File(imagesDir, imageName)&#10;                if (!outputFile.exists()) {&#10;                    inputStream.use { input -&gt;&#10;                        outputFile.outputStream().use { output -&gt;&#10;                            input.copyTo(output)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;        }&#10;&#10;        // Check if the internal recipes file exists&#10;        if (!recipesFile.exists()) {&#10;            // Save the asset recipes to internal storage if the file doesn't exist&#10;            recipesFile.writeText(Gson().toJson(assetRecipes))&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;Internal recipes.json created from assets.&quot;)&#10;            return&#10;        }&#10;&#10;        // Load recipes from internal storage&#10;        val internalRecipes: MutableList&lt;Recipe&gt; = try {&#10;            val json = recipesFile.readText()&#10;            val type = object : TypeToken&lt;MutableList&lt;Recipe&gt;&gt;() {}.type&#10;            Gson().fromJson(json, type)&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            mutableListOf()&#10;        }&#10;&#10;        // Merge recipes, avoiding duplicates by `id`&#10;        val mergedRecipes = (internalRecipes + assetRecipes).distinctBy { it.id }.toMutableList()&#10;&#10;        // Save merged recipes back to internal storage&#10;        recipesFile.writeText(Gson().toJson(mergedRecipes))&#10;        Log.d(&quot;RecipesFragment&quot;, &quot;Internal recipes.json updated with merged recipes.&quot;)&#10;    }&#10;&#10;    private fun copyRecipesToExternalStorage() {&#10;        val internalFile = File(requireContext().filesDir, &quot;recipes.json&quot;)&#10;        val externalFile = File(requireContext().getExternalFilesDir(null), &quot;recipes.json&quot;)&#10;        if (internalFile.exists()) {&#10;            internalFile.copyTo(externalFile, overwrite = true)&#10;            Log.d(&#10;                &quot;RecipesFragment&quot;,&#10;                &quot;recipes.json copied to external storage: ${externalFile.absolutePath}&quot;&#10;            )&#10;        } else {&#10;            Log.d(&quot;RecipesFragment&quot;, &quot;recipes.json file does not exist in internal storage.&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/pill_button_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/pill_button_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#BDBDBD&quot; /&gt; &lt;!-- Mittelgrau --&gt;&#10;    &lt;corners android:radius=&quot;28dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/rounded_grey_button.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/rounded_grey_button.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#BDBDBD&quot; /&gt; &lt;!-- Mittelgrau --&gt;&#10;    &lt;corners android:radius=&quot;24dp&quot; /&gt; &lt;!-- Langgezogener Kreis --&gt;&#10;&lt;/shape&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#BDBDBD&quot; /&gt; &lt;!-- Mittelgrau --&gt;&#10;    &lt;corners android:radius=&quot;24dp&quot; /&gt; &lt;!-- Langgezogener Kreis --&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/rounded_orange_button.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/rounded_orange_button.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#FFB300&quot; /&gt; &lt;!-- Orange/Gelb (Amber 700) --&gt;&#10;    &lt;corners android:radius=&quot;24dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#FFB300&quot; /&gt; &lt;!-- Orange/Gelb (Amber 700) --&gt;&#10;    &lt;corners android:radius=&quot;24dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_add_recipe_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_add_recipe_menu.xml" />
              <option name="originalContent" value="                android:tint=&quot;@android:color/white&quot; /&gt;&#10;    &lt;/FrameLayout&gt;&#10;                android:contentDescription=&quot;Plus Icon&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/FrameLayout&gt;&#10;&#10;    &lt;FrameLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/buttonWebsite&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:background=&quot;@drawable/pill_button_background&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;true&quot;&gt;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;28dp&quot;&#10;                android:layout_height=&quot;28dp&quot;&#10;                android:src=&quot;@android:drawable/ic_input_add&quot;&#10;                android:tint=&quot;@android:color/white&quot;&#10;                android:contentDescription=&quot;Plus Icon&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Website importieren&quot;&#10;                android:textColor=&quot;#FFFFFF&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;&#10;                android:shadowColor=&quot;#66000000&quot;&#10;                android:shadowDx=&quot;0&quot;&#10;                android:shadowDy=&quot;1&quot;&#10;                android:shadowRadius=&quot;2&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/FrameLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@android:color/transparent&quot;&#10;    android:padding=&quot;24dp&quot;&#10;    android:gravity=&quot;center&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/buttonManual&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;56dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:background=&quot;@drawable/pill_button_background&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:minWidth=&quot;120dp&quot;&#10;        android:paddingStart=&quot;24dp&quot;&#10;        android:paddingEnd=&quot;32dp&quot;&gt;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;28dp&quot;&#10;            android:layout_height=&quot;28dp&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:src=&quot;@android:drawable/ic_input_add&quot;&#10;            android:tint=&quot;@android:color/white&quot;&#10;            android:contentDescription=&quot;Plus Icon&quot; /&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Manuell hinzufÃ¼gen&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:layout_marginStart=&quot;16dp&quot;&#10;            android:shadowColor=&quot;#66000000&quot;&#10;            android:shadowDx=&quot;0&quot;&#10;            android:shadowDy=&quot;1&quot;&#10;            android:shadowRadius=&quot;2&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/buttonInstagram&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;56dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:background=&quot;@drawable/pill_button_background&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:minWidth=&quot;120dp&quot;&#10;        android:paddingStart=&quot;24dp&quot;&#10;        android:paddingEnd=&quot;32dp&quot;&gt;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;28dp&quot;&#10;            android:layout_height=&quot;28dp&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:src=&quot;@android:drawable/ic_input_add&quot;&#10;            android:tint=&quot;@android:color/white&quot;&#10;            android:contentDescription=&quot;Plus Icon&quot; /&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Instagram importieren&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:layout_marginStart=&quot;16dp&quot;&#10;            android:shadowColor=&quot;#66000000&quot;&#10;            android:shadowDx=&quot;0&quot;&#10;            android:shadowDy=&quot;1&quot;&#10;            android:shadowRadius=&quot;2&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/buttonWebsite&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;56dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:background=&quot;@drawable/pill_button_background&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:minWidth=&quot;120dp&quot;&#10;        android:paddingStart=&quot;24dp&quot;&#10;        android:paddingEnd=&quot;32dp&quot;&gt;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;28dp&quot;&#10;            android:layout_height=&quot;28dp&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:src=&quot;@android:drawable/ic_input_add&quot;&#10;            android:tint=&quot;@android:color/white&quot;&#10;            android:contentDescription=&quot;Plus Icon&quot; /&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Website importieren&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:layout_marginStart=&quot;16dp&quot;&#10;            android:shadowColor=&quot;#66000000&quot;&#10;            android:shadowDx=&quot;0&quot;&#10;            android:shadowDy=&quot;1&quot;&#10;            android:shadowRadius=&quot;2&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_import_instagram.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_import_instagram.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&#10;    android:background=&quot;@color/AbackgroundColor&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Instagram-Link einfÃ¼gen&quot;&#10;        android:textColor=&quot;@color/AcardTextColor&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/inputInstagramLink&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Instagram-Link&quot;&#10;        android:inputType=&quot;textUri&quot;&#10;        android:background=&quot;@drawable/edit_text_background&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:textColor=&quot;@color/AcardTextColor&quot;&#10;        android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/buttonImportInstagram&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Importieren&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:backgroundTint=&quot;@color/AprimaryColor&quot;&#10;        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_import_website.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_import_website.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&#10;    android:background=&quot;@color/AbackgroundColor&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Website-Link einfÃ¼gen&quot;&#10;        android:textColor=&quot;@color/AcardTextColor&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/inputWebsiteLink&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Website-Link&quot;&#10;        android:inputType=&quot;textUri&quot;&#10;        android:background=&quot;@drawable/edit_text_background&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:textColor=&quot;@color/AcardTextColor&quot;&#10;        android:textColorHint=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/buttonImportWebsite&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Importieren&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:backgroundTint=&quot;@color/AprimaryColor&quot;&#10;        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_recipe_detail.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_recipe_detail.xml" />
              <option name="originalContent" value="&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;200dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/recipe_image&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:scaleType=&quot;centerCrop&quot;&#10;                android:src=&quot;@drawable/ic_launcher_foreground&quot;&#10;                android:contentDescription=&quot;Rezeptbild&quot; /&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/close_button&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:layout_gravity=&quot;start|top&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_close_clear_cancel&quot;&#10;                android:contentDescription=&quot;SchlieÃen&quot;&#10;                android:padding=&quot;8dp&quot;&#10;                android:alpha=&quot;0.7&quot; /&gt;&#10;        &lt;/FrameLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_title&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:text=&quot;Rezepttitel&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:gravity=&quot;center&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_horizontal&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/recipe_prep_time&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Zubereitung: 15m&quot;&#10;                android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/recipe_cook_time&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Kochzeit: 15m&quot;&#10;                android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/recipe_total_time&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Gesamt: 30m&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_description&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Schnell, einfach &amp;amp; so gut, dass man sie echt jeden Tag essen kÃ¶nnte!&quot;&#10;            android:padding=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_horizontal&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/ingredients_button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Zutaten&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/instructions_button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Anleitung&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/nutrition_button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;NÃ¤hrwerte&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:id=&quot;@+id/content_container&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:padding=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_notes_title&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Notizen&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:paddingStart=&quot;16dp&quot;&#10;            android:paddingEnd=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_notes_content&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Rezeptnotizen&quot;&#10;            android:padding=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
              <option name="updatedContent" value="&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;200dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/recipe_image&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:scaleType=&quot;centerCrop&quot;&#10;                android:src=&quot;@drawable/ic_launcher_foreground&quot;&#10;                android:contentDescription=&quot;Rezeptbild&quot; /&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/close_button&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:layout_gravity=&quot;start|top&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_close_clear_cancel&quot;&#10;                android:contentDescription=&quot;SchlieÃen&quot;&#10;                android:padding=&quot;8dp&quot;&#10;                android:alpha=&quot;0.7&quot; /&gt;&#10;        &lt;/FrameLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_title&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:text=&quot;Rezepttitel&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:gravity=&quot;center&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_horizontal&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/recipe_prep_time&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Zubereitung: 15m&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_description&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Schnell, einfach &amp;amp; so gut, dass man sie echt jeden Tag essen kÃ¶nnte!&quot;&#10;            android:padding=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_horizontal&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/ingredients_button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Zutaten&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/instructions_button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Anleitung&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/nutrition_button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;NÃ¤hrwerte&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;FrameLayout&#10;            android:id=&quot;@+id/content_container&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:padding=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_notes_title&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Notizen&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:paddingStart=&quot;16dp&quot;&#10;            android:paddingEnd=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/recipe_notes_content&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Rezeptnotizen&quot;&#10;            android:padding=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>